;
; File generated by cc65 v 2.15 - Git f7cdfbf
;
	.fopt		compiler,"cc65 v 2.15 - Git f7cdfbf"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_size
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_vram_unrle
	.import		_delay
	.export		_mypal_game_bg0
	.export		_mypal_game_fg0
	.export		_mypal_game_bg1
	.export		_mypal_game_fg1
	.export		_mypal_game_bg2
	.export		_mypal_game_bg3
	.export		_mypal_game_fg3
	.export		_mypal_game_bg4
	.export		_mypal_game_fg4
	.export		_mypal_game_bg5
	.export		_mypal_game_fg5
	.export		_mypal_game_bg6
	.export		_mypal_game_fg6
	.export		_mypal_game_bg7
	.export		_enems_0
	.export		_hotspots_0
	.export		_map_0_tiles
	.export		_map_0_locks
	.export		_enems_1
	.export		_hotspots_1
	.export		_map_1_tiles
	.export		_map_1_decos_00
	.export		_map_1_decos_01
	.export		_map_1_decos_02
	.export		_map_1_decos_03
	.export		_map_1_decos_04
	.export		_map_1_decos_05
	.export		_map_1_decos_06
	.export		_map_1_decos_07
	.export		_map_1_decos_08
	.export		_map_1_decos_09
	.export		_map_1_decos_0a
	.export		_map_1_decos_0b
	.export		_map_1_decos_0c
	.export		_map_1_decos_0d
	.export		_map_1_decos
	.export		_map_1_locks
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_ts1_pals
	.export		_ts1_tmaps
	.export		_ts2_pals
	.export		_ts2_tmaps
	.export		_ts3_pals
	.export		_ts3_tmaps
	.export		_ts4_pals
	.export		_ts4_tmaps
	.export		_sspl0_00_a
	.export		_sspl0_00_b
	.export		_sspl0_01_a
	.export		_sspl0_01_b
	.export		_sspl0_02_a
	.export		_sspl0_02_b
	.export		_sspl0_03_a
	.export		_sspl0_03_b
	.export		_sspl0_04_a
	.export		_sspl0_04_b
	.export		_sspl0_05_a
	.export		_sspl0_05_b
	.export		_sspl0_06_a
	.export		_sspl0_06_b
	.export		_sspl0_07_a
	.export		_sspl0_07_b
	.export		_ssen0_00_a
	.export		_ssen0_00_b
	.export		_ssen0_01_a
	.export		_ssen0_01_b
	.export		_ssen0_02_a
	.export		_ssen0_02_b
	.export		_ssen0_03_a
	.export		_ssen0_03_b
	.export		_ssen0_04_a
	.export		_ssen0_04_b
	.export		_ssen0_05_a
	.export		_ssen0_05_b
	.export		_ssplat0
	.export		_ssit0_00
	.export		_ssit0_01
	.export		_ssit0_02
	.export		_ssenextra0_00
	.export		_ssenextra0_01
	.export		_ssenextra0_02
	.export		_ssenextra0_03
	.export		_sspl1_00_a
	.export		_sspl1_00_b
	.export		_sspl1_01_a
	.export		_sspl1_01_b
	.export		_sspl1_02_a
	.export		_sspl1_02_b
	.export		_sspl1_03_a
	.export		_sspl1_03_b
	.export		_sspl1_04_a
	.export		_sspl1_04_b
	.export		_sspl1_05_a
	.export		_sspl1_05_b
	.export		_sspl1_06_a
	.export		_sspl1_06_b
	.export		_sspl1_07_a
	.export		_sspl1_07_b
	.export		_ssen1_00_a
	.export		_ssen1_00_b
	.export		_ssen1_01_a
	.export		_ssen1_01_b
	.export		_ssen1_02_a
	.export		_ssen1_02_b
	.export		_ssen1_03_a
	.export		_ssen1_03_b
	.export		_ssen1_04_a
	.export		_ssen1_04_b
	.export		_ssen1_05_a
	.export		_ssen1_05_b
	.export		_ssplat1
	.export		_ssit1_00
	.export		_ssit1_01
	.export		_ssit1_02
	.export		_sspl2_00_a
	.export		_sspl2_00_b
	.export		_sspl2_01_a
	.export		_sspl2_01_b
	.export		_sspl2_02_a
	.export		_sspl2_02_b
	.export		_sspl2_03_a
	.export		_sspl2_03_b
	.export		_sspl2_04_a
	.export		_sspl2_04_b
	.export		_sspl2_05_a
	.export		_sspl2_05_b
	.export		_sspl2_06_a
	.export		_sspl2_06_b
	.export		_sspl2_07_a
	.export		_sspl2_07_b
	.export		_ssit2_00
	.export		_ssit2_01
	.export		_ssit2_02
	.export		_ssending_pppp_00
	.export		_sspl_lah_00_a
	.export		_sspl_lah_00_b
	.export		_sspl_lah_01_a
	.export		_sspl_lah_01_b
	.export		_sspl_lah_02_a
	.export		_sspl_lah_02_b
	.export		_sspl_lah_ending_00
	.export		_sspl_lah_ending_01
	.export		_sspl_lah_ending_02
	.export		_ssen_lah_00_a
	.export		_ssen_lah_00_b
	.export		_ssen_lah_01_a
	.export		_ssen_lah_01_b
	.export		_ssen_lah_02_a
	.export		_ssen_lah_02_b
	.export		_ssen_lah_03_a
	.export		_ssen_lah_03_b
	.export		_ssen_lah_04_a
	.export		_ssen_lah_04_b
	.export		_ssen_lah_05_a
	.export		_ssen_lah_05_b
	.export		_ssen_lah_06_a
	.export		_ssen_lah_06_b
	.export		_ssen_lah_07_a
	.export		_ssen_lah_07_b
	.export		_ssit_lah_00
	.export		_ssit_lah_01
	.export		_ssit_lah_02
	.export		_sspl_pppp_00_a
	.export		_sspl_pppp_00_b
	.export		_sspl_pppp_01_a
	.export		_sspl_pppp_01_b
	.export		_sspl_pppp_02_a
	.export		_sspl_pppp_02_b
	.export		_ssen_pppp_00_a
	.export		_ssen_pppp_00_b
	.export		_ssen_pppp_01_a
	.export		_ssen_pppp_01_b
	.export		_ssen_pppp_02_a
	.export		_ssen_pppp_02_b
	.export		_ssen_pppp_03_a
	.export		_ssen_pppp_03_b
	.export		_ssen_pppp_04_a
	.export		_ssen_pppp_04_b
	.export		_ssen_pppp_05_a
	.export		_ssen_pppp_05_b
	.export		_ssen_pppp_06_a
	.export		_ssen_pppp_06_b
	.export		_ssen_pppp_07_a
	.export		_ssen_pppp_07_b
	.export		_ssit_pppp_00
	.export		_ssit_pppp_01
	.export		_ssit_pppp_02
	.export		_spr_enems
	.export		_spr_player
	.export		_sprplempty
	.export		_spr_items
	.export		_behs0
	.export		_behs1
	.export		_bitmasks
	.export		_jitter
	.export		_coco_vx_precalc
	.export		_coco_vy_precalc
	.export		_hud1
	.export		_hud2
	.export		_hud3
	.export		_mypal_game_bg_title
	.export		_mypal_game_bg
	.export		_mypal_game_bg_ending
	.export		_music_track_ingame
	.export		_lah_title_rle
	.export		_lah_ending_rle
	.export		_pppp_title_rle
	.export		_pppp_ending_rle
	.export		_monona_title_rle
	.export		_monona_ending_rle
	.export		_monono_title_rle
	.export		_jetpuri_title_rle
	.export		_jetpuri_ending_rle
	.export		_l_TOP_ADJUST
	.export		_l_SPRITE_ADJUST
	.export		_l_PLAYER_G
	.export		_l_pcharacter
	.export		_l_encelloffset
	.export		_l_pal_spr
	.export		_l_hudbaseline
	.export		_l_PLAYER_AX
	.export		_l_ts_pals
	.export		_l_ts_tmaps
	.export		_l_behs
	.export		_l_n_pant
	.export		_SPRITE_ADJUST
	.export		_TOP_ADJUST
	.export		_PLAYER_G
	.export		_PLAYER_AX
	.export		_oam_index
	.export		_half_life
	.export		_frame_counter
	.export		_pad0
	.export		_gpit
	.export		_gpjt
	.export		_bi
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdct
	.export		_rdyb
	.export		_gpint
	.export		_gpsint
	.export		_gp_gen
	.export		_gp_aux
	.export		_gp_map
	.export		_gp_tmap
	.export		_gp_addr
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_ul
	.export		_cx1
	.export		_cy1
	.export		_cx2
	.export		_cy2
	.export		_at1
	.export		_at2
	.export		_caux
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_x2
	.export		__en_y1
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		_en_t
	.export		_en_hl
	.export		_en_v
	.export		_en_state
	.export		_en_gen_life
	.export		_en_life
	.export		_en_washit
	.export		_en_gen_washit
	.export		_en_fishing
	.export		_en_s
	.export		_en_dying
	.export		_en_gen_dying
	.export		_en_facing
	.export		_spr_x
	.export		_spr_y
	.export		_spr_id
	.export		_en_fr
	.export		_enoffs
	.export		_genflipflop
	.export		_is_platform
	.export		_encelloffset
	.export		_prx
	.export		_pry
	.export		_px
	.export		_py
	.export		_pcx
	.export		_pcy
	.export		_pvx
	.export		_pvy
	.export		_pj
	.export		_pctj
	.export		_pthrust
	.export		_pjb
	.export		_pfiring
	.export		_phit
	.export		_pflickering
	.export		_pfacing
	.export		_pfacingh
	.export		_pfacingv
	.export		_pfacinglast
	.export		_pgotten
	.export		_ppossee
	.export		_pregotten
	.export		_pfixct
	.export		_psprid
	.export		_pcharacter
	.export		_pvylast
	.export		_pgtmx
	.export		_pgtmy
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_itcelloffset
	.export		_sstart
	.export		_coco_x
	.export		_coco_y
	.export		_coco_vx
	.export		_coco_vy
	.export		_coco_flag
	.export		_coco_it
	.export		_inverted_screen
	.export		_game_jet_puri
	.export		_game_monono
	.export		_game_monona
	.export		_game_pppp
	.export		_ticks
	.export		_halfticks
	.export		_game_time
	.export		_ticker
	.export		_display
	.export		_flash
	.export		_update_list
	.export		_fader
	.export		_attr_table
	.export		_first_time
	.export		_c_map
	.export		_c_decos
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_n_bolts
	.export		_max_hotspots_type_1
	.export		_level
	.export		_do_game
	.export		_game_state
	.export		_game_res
	.export		_scr_buff
	.export		_scr_attr
	.export		_n_pant
	.export		_on_pant
	.export		_evil_tile_hit
	.export		_ep_x
	.export		_ep_y
	.export		_ep_mx
	.export		_ep_my
	.export		_ep_it
	.export		_pkilled
	.export		_plife
	.export		_oplife
	.export		_pobjs
	.export		_opobjs
	.export		_pkeys
	.export		_opkeys
	.export		_b_x
	.export		_b_y
	.export		_b_mx
	.export		_b_my
	.export		_b_ac
	.export		_b_slots
	.export		_b_slot
	.export		_infested
	.export		_generators_active
	.export		_infsx
	.export		_infsy
	.export		_hact
	.export		_hr_hit
	.export		_lkact
	.export		_hudbaseline
	.export		_please_continue
	.export		_already_played
	.export		_fumettos_life
	.export		_fumettos_x
	.export		_fumettos_y
	.export		_thrustct
	.export		_rn_pant
	.export		_map_w
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_ct
	.export		_m113_comm_pool_checksum_calculate
	.export		_m113_safe_change_chr_bank
	.export		_m113_comm_pool_checksum_check
	.export		_m113_handle_reset
	.export		_m113_comm_pool_init
	.export		_m113_comm_pool_checksum_write
	.export		_m113_rom_pair_jump
	.export		_fade_out
	.export		_fade_in
	.export		_cls
	.export		_reset_attributes
	.export		_show_attributes
	.export		_write_attr
	.export		_update_list_write
	.export		_draw_tile
	.export		_draw_tile_advance
	.export		_update_list_horz_2
	.export		_update_list_tile
	.export		_set_map_tile
	.export		_p_t2
	.export		_advance_worm
	.export		_draw_scr
	.export		_p_s
	.export		_enter_screen
	.export		_exit_cleanly
	.export		_wait_time_or_input
	.export		_do_screen
	.export		_screen_title
	.export		_screen_game_over
	.export		_screen_game_ending
	.export		_cm_two_points
	.export		_collide
	.export		_hotspots_ini
	.export		_hotspots_load
	.export		_hotspots_do
	.export		_bolts_load
	.export		_pppp_invert_bolt
	.export		_bolts_clear_bolt
	.export		_bolts_update_screen
	.export		_fumettos_init
	.export		_fumettos_add
	.export		_fumettos_do
	.export		_player_reset_movement
	.export		_player_process_block
	.export		_player_init
	.export		_player_hit
	.export		_player_move
	.export		_player_render
	.export		_simplecoco_init
	.export		_simplecoco_straight_new
	.export		_simplecoco_do
	.export		_persistent_enems_load
	.export		_persistent_update
	.export		_enems_load
	.export		_enems_spr
	.export		_enems_do
	.export		_hud_update
	.export		_hud_draw
	.export		_game_init
	.export		_game_prepare_screen
	.export		_game_loop
	.export		_game_title
	.export		_game_over
	.export		_game_ending
	.export		_main

.segment	"DATA"

_hud1:
	.addr	L25BF
_hud2:
	.addr	L25C1
_hud3:
	.addr	L25C3
.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_mypal_game_bg0:
	.byte	$0F
	.byte	$15
	.byte	$2D
	.byte	$10
	.byte	$0F
	.byte	$0C
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$02
	.byte	$28
	.byte	$30
_mypal_game_fg0:
	.byte	$0F
	.byte	$08
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$37
	.byte	$0F
	.byte	$15
	.byte	$27
	.byte	$38
	.byte	$0F
	.byte	$08
	.byte	$00
	.byte	$38
_mypal_game_bg1:
	.byte	$0C
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$0C
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$0C
	.byte	$04
	.byte	$25
	.byte	$35
	.byte	$0C
	.byte	$07
	.byte	$25
	.byte	$30
_mypal_game_fg1:
	.byte	$0F
	.byte	$04
	.byte	$16
	.byte	$37
	.byte	$0F
	.byte	$05
	.byte	$26
	.byte	$36
	.byte	$0F
	.byte	$0C
	.byte	$21
	.byte	$16
	.byte	$0F
	.byte	$0B
	.byte	$1A
	.byte	$29
_mypal_game_bg2:
	.byte	$22
	.byte	$0F
	.byte	$04
	.byte	$25
	.byte	$22
	.byte	$0F
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$0C
	.byte	$15
	.byte	$36
_mypal_game_bg3:
	.byte	$0F
	.byte	$08
	.byte	$17
	.byte	$29
	.byte	$0F
	.byte	$03
	.byte	$23
	.byte	$36
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$16
	.byte	$28
	.byte	$39
_mypal_game_fg3:
	.byte	$0F
	.byte	$08
	.byte	$23
	.byte	$28
	.byte	$0F
	.byte	$13
	.byte	$14
	.byte	$38
	.byte	$0F
	.byte	$12
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$0A
	.byte	$29
	.byte	$34
_mypal_game_bg4:
	.byte	$11
	.byte	$0B
	.byte	$19
	.byte	$29
	.byte	$11
	.byte	$0F
	.byte	$2D
	.byte	$36
	.byte	$11
	.byte	$03
	.byte	$15
	.byte	$26
	.byte	$11
	.byte	$3B
	.byte	$21
	.byte	$02
_mypal_game_fg4:
	.byte	$23
	.byte	$07
	.byte	$0F
	.byte	$28
	.byte	$23
	.byte	$08
	.byte	$14
	.byte	$38
	.byte	$23
	.byte	$15
	.byte	$25
	.byte	$34
	.byte	$23
	.byte	$0C
	.byte	$29
	.byte	$34
_mypal_game_bg5:
	.byte	$0F
	.byte	$02
	.byte	$24
	.byte	$34
	.byte	$0F
	.byte	$02
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$23
	.byte	$24
	.byte	$31
	.byte	$0F
	.byte	$01
	.byte	$25
	.byte	$30
_mypal_game_fg5:
	.byte	$0F
	.byte	$07
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_mypal_game_bg6:
	.byte	$0F
	.byte	$1A
	.byte	$0C
	.byte	$18
	.byte	$0F
	.byte	$16
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$16
	.byte	$03
	.byte	$26
	.byte	$0F
	.byte	$02
	.byte	$28
	.byte	$30
_mypal_game_fg6:
	.byte	$0F
	.byte	$0C
	.byte	$15
	.byte	$3D
	.byte	$0F
	.byte	$07
	.byte	$26
	.byte	$37
	.byte	$0F
	.byte	$18
	.byte	$08
	.byte	$38
	.byte	$0F
	.byte	$08
	.byte	$00
	.byte	$38
_mypal_game_bg7:
	.byte	$0F
	.byte	$0C
	.byte	$25
	.byte	$37
	.byte	$0F
	.byte	$0C
	.byte	$15
	.byte	$37
	.byte	$0F
	.byte	$0C
	.byte	$28
	.byte	$30
	.byte	$0F
	.byte	$0C
	.byte	$28
	.byte	$30
_enems_0:
	.byte	$11
	.byte	$17
	.byte	$47
	.byte	$01
	.byte	$11
	.byte	$18
	.byte	$48
	.byte	$02
	.byte	$80
	.byte	$41
	.byte	$4E
	.byte	$02
	.byte	$23
	.byte	$6E
	.byte	$61
	.byte	$02
	.byte	$80
	.byte	$B1
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$9E
	.byte	$97
	.byte	$01
	.byte	$23
	.byte	$B1
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$2E
	.byte	$BE
	.byte	$04
	.byte	$80
	.byte	$66
	.byte	$A6
	.byte	$02
	.byte	$80
	.byte	$67
	.byte	$A7
	.byte	$01
	.byte	$11
	.byte	$5C
	.byte	$9C
	.byte	$01
	.byte	$23
	.byte	$A3
	.byte	$AB
	.byte	$01
	.byte	$80
	.byte	$61
	.byte	$6E
	.byte	$02
	.byte	$80
	.byte	$6E
	.byte	$61
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$29
	.byte	$99
	.byte	$02
	.byte	$12
	.byte	$A5
	.byte	$25
	.byte	$04
	.byte	$80
	.byte	$6E
	.byte	$61
	.byte	$02
	.byte	$11
	.byte	$25
	.byte	$65
	.byte	$01
	.byte	$12
	.byte	$3B
	.byte	$AB
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$5C
	.byte	$51
	.byte	$02
	.byte	$11
	.byte	$3E
	.byte	$9E
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$78
	.byte	$01
	.byte	$80
	.byte	$2C
	.byte	$CC
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$81
	.byte	$83
	.byte	$01
	.byte	$80
	.byte	$7E
	.byte	$71
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$81
	.byte	$21
	.byte	$01
	.byte	$80
	.byte	$27
	.byte	$A7
	.byte	$01
	.byte	$80
	.byte	$A1
	.byte	$AE
	.byte	$02
	.byte	$23
	.byte	$58
	.byte	$51
	.byte	$02
	.byte	$12
	.byte	$6C
	.byte	$BE
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$26
	.byte	$79
	.byte	$02
	.byte	$12
	.byte	$31
	.byte	$B1
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$63
	.byte	$B3
	.byte	$02
	.byte	$11
	.byte	$37
	.byte	$97
	.byte	$02
	.byte	$10
	.byte	$9C
	.byte	$2C
	.byte	$01
	.byte	$11
	.byte	$B8
	.byte	$B2
	.byte	$02
	.byte	$80
	.byte	$3E
	.byte	$31
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$5C
	.byte	$BC
	.byte	$02
	.byte	$10
	.byte	$8E
	.byte	$4E
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$AA
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$6E
	.byte	$63
	.byte	$01
	.byte	$10
	.byte	$BD
	.byte	$2E
	.byte	$01
	.byte	$80
	.byte	$41
	.byte	$4D
	.byte	$02
	.byte	$11
	.byte	$41
	.byte	$45
	.byte	$01
	.byte	$12
	.byte	$86
	.byte	$83
	.byte	$01
	.byte	$23
	.byte	$29
	.byte	$A9
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$4C
	.byte	$47
	.byte	$02
	.byte	$11
	.byte	$96
	.byte	$91
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$7E
	.byte	$79
	.byte	$01
	.byte	$23
	.byte	$38
	.byte	$B8
	.byte	$01
	.byte	$80
	.byte	$36
	.byte	$31
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$5B
	.byte	$51
	.byte	$01
	.byte	$12
	.byte	$B4
	.byte	$B1
	.byte	$01
	.byte	$80
	.byte	$2E
	.byte	$7E
	.byte	$01
	.byte	$11
	.byte	$35
	.byte	$85
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$26
	.byte	$B6
	.byte	$02
	.byte	$11
	.byte	$3D
	.byte	$BD
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$29
	.byte	$69
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$8C
	.byte	$83
	.byte	$01
	.byte	$11
	.byte	$35
	.byte	$65
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$36
	.byte	$B6
	.byte	$01
	.byte	$10
	.byte	$BD
	.byte	$2C
	.byte	$02
	.byte	$80
	.byte	$31
	.byte	$3E
	.byte	$02
_hotspots_0:
	.byte	$02
	.byte	$B3
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$4E
	.byte	$03
	.byte	$72
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$3E
	.byte	$03
	.byte	$73
	.byte	$01
	.byte	$A7
	.byte	$03
	.byte	$BD
	.byte	$03
	.byte	$7D
	.byte	$01
	.byte	$B2
	.byte	$02
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$65
	.byte	$02
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$BD
	.byte	$03
	.byte	$33
	.byte	$01
	.byte	$3E
	.byte	$01
	.byte	$7E
	.byte	$03
	.byte	$31
	.byte	$02
	.byte	$3E
	.byte	$02
	.byte	$B4
	.byte	$01
	.byte	$7E
	.byte	$01
	.byte	$3E
_map_0_tiles:
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$A0
	.byte	$00
	.byte	$0A
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$E0
	.byte	$00
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$CC
	.byte	$C2
	.byte	$22
	.byte	$CC
	.byte	$CC
	.byte	$22
	.byte	$21
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$42
	.byte	$30
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$A0
	.byte	$00
	.byte	$0A
	.byte	$AA
	.byte	$22
	.byte	$CC
	.byte	$CC
	.byte	$BB
	.byte	$BC
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$2B
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$73
	.byte	$30
	.byte	$87
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$27
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$27
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$03
	.byte	$36
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$35
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$35
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$33
	.byte	$56
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$35
	.byte	$35
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$23
	.byte	$55
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$33
	.byte	$25
	.byte	$35
	.byte	$55
	.byte	$55
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$13
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$02
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$C7
	.byte	$00
	.byte	$02
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$70
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$3A
	.byte	$AE
	.byte	$00
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$0A
	.byte	$A3
	.byte	$35
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$30
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$0E
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$22
	.byte	$99
	.byte	$99
	.byte	$22
	.byte	$22
	.byte	$99
	.byte	$99
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$CC
	.byte	$C2
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$CC
	.byte	$AA
	.byte	$AA
	.byte	$A2
	.byte	$27
	.byte	$70
	.byte	$CC
	.byte	$CA
	.byte	$AA
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$AA
	.byte	$A2
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$32
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$70
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$70
	.byte	$00
	.byte	$77
	.byte	$70
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$63
	.byte	$AD
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$D2
	.byte	$30
	.byte	$DD
	.byte	$04
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$D7
	.byte	$72
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$80
	.byte	$07
	.byte	$70
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$08
	.byte	$70
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$63
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$20
	.byte	$70
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$08
	.byte	$09
	.byte	$00
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$D0
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$09
	.byte	$00
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$C9
	.byte	$00
	.byte	$20
	.byte	$0D
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$20
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$24
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$27
	.byte	$70
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E2
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DD
	.byte	$D2
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$80
	.byte	$04
	.byte	$77
	.byte	$70
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$DD
	.byte	$DD
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$77
	.byte	$72
	.byte	$30
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$DD
	.byte	$D0
	.byte	$00
	.byte	$02
	.byte	$3D
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$70
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$3D
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$0A
	.byte	$A2
	.byte	$2A
	.byte	$A4
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$40
	.byte	$03
	.byte	$20
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$77
	.byte	$74
	.byte	$70
	.byte	$00
	.byte	$74
	.byte	$77
	.byte	$DD
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$22
	.byte	$D7
	.byte	$77
	.byte	$00
	.byte	$07
	.byte	$7D
	.byte	$D2
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$70
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$70
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$6C
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$C2
	.byte	$07
	.byte	$00
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$3D
	.byte	$DD
	.byte	$D1
	.byte	$20
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$30
	.byte	$0C
	.byte	$CC
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$07
	.byte	$02
	.byte	$20
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$70
	.byte	$02
	.byte	$20
	.byte	$E0
	.byte	$0E
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$20
	.byte	$E0
	.byte	$0E
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$00
	.byte	$E0
	.byte	$0E
	.byte	$00
	.byte	$E0
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$32
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$63
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$77
	.byte	$AA
	.byte	$30
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$99
	.byte	$10
	.byte	$00
	.byte	$AA
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$BB
	.byte	$10
	.byte	$00
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$BB
	.byte	$10
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$77
	.byte	$BB
	.byte	$30
	.byte	$00
	.byte	$BB
	.byte	$08
	.byte	$09
	.byte	$90
	.byte	$00
	.byte	$BB
	.byte	$30
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$0B
	.byte	$B0
	.byte	$00
	.byte	$BB
	.byte	$30
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$0B
	.byte	$B0
	.byte	$00
	.byte	$BB
	.byte	$12
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$00
	.byte	$51
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$70
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$99
	.byte	$D7
	.byte	$77
	.byte	$00
	.byte	$E0
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$B9
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$E0
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$BB
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$E0
	.byte	$07
	.byte	$07
	.byte	$03
	.byte	$BB
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$E0
	.byte	$07
	.byte	$00
	.byte	$73
	.byte	$BB
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$E0
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$BB
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$E0
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$E0
	.byte	$07
	.byte	$77
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$66
	.byte	$32
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$12
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$30
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$77
	.byte	$74
	.byte	$03
	.byte	$20
	.byte	$70
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$77
	.byte	$77
	.byte	$43
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$F0
	.byte	$0C
	.byte	$CC
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$64
	.byte	$00
	.byte	$67
	.byte	$73
	.byte	$29
	.byte	$99
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$97
	.byte	$00
	.byte	$92
	.byte	$27
	.byte	$77
	.byte	$72
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$37
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$70
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$87
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$70
	.byte	$02
	.byte	$CC
	.byte	$C2
	.byte	$07
	.byte	$70
	.byte	$03
	.byte	$30
	.byte	$07
	.byte	$02
	.byte	$AA
	.byte	$A2
	.byte	$00
	.byte	$77
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$73
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$36
	.byte	$67
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$06
	.byte	$22
	.byte	$27
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$20
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$70
	.byte	$02
	.byte	$30
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$3C
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$E0
	.byte	$03
	.byte	$32
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$03
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$17
	.byte	$73
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$73
	.byte	$E0
	.byte	$80
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$73
	.byte	$F0
	.byte	$00
	.byte	$80
	.byte	$06
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$6D
	.byte	$DD
	.byte	$DD
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$77
	.byte	$77
	.byte	$70
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$80
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$30
	.byte	$0D
	.byte	$DD
	.byte	$D3
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$73
	.byte	$20
	.byte	$00
	.byte	$80
	.byte	$03
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$3A
	.byte	$AA
	.byte	$AD
	.byte	$D3
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$07
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$77
	.byte	$02
	.byte	$30
	.byte	$07
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$20
	.byte	$07
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$20
	.byte	$70
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$37
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$CC
	.byte	$C2
	.byte	$22
	.byte	$22
	.byte	$CC
	.byte	$C0
	.byte	$03
	.byte	$20
	.byte	$AA
	.byte	$A2
	.byte	$22
	.byte	$22
	.byte	$AA
	.byte	$A0
	.byte	$02
	.byte	$70
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$02
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$32
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$03
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$32
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$32
	.byte	$20
	.byte	$08
	.byte	$0D
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$D3
	.byte	$32
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$72
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$36
	.byte	$66
	.byte	$66
	.byte	$67
	.byte	$77
	.byte	$70
	.byte	$00
	.byte	$02
	.byte	$35
	.byte	$55
	.byte	$55
	.byte	$56
	.byte	$66
	.byte	$67
	.byte	$70
	.byte	$00
	.byte	$25
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$56
	.byte	$66
	.byte	$62
	.byte	$2A
	.byte	$AA
	.byte	$AD
	.byte	$D3
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$D6
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$2D
	.byte	$DD
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$CC
	.byte	$CC
	.byte	$C2
	.byte	$32
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$27
	.byte	$77
	.byte	$40
	.byte	$07
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$03
	.byte	$60
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$42
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$00
	.byte	$07
	.byte	$02
	.byte	$30
	.byte	$70
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$07
	.byte	$03
	.byte	$20
	.byte	$70
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$02
	.byte	$20
	.byte	$07
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$03
	.byte	$2C
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$C2
	.byte	$26
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$61
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$87
	.byte	$00
	.byte	$07
	.byte	$77
	.byte	$70
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$80
	.byte	$30
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$87
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$70
	.byte	$07
	.byte	$00
	.byte	$80
	.byte	$32
	.byte	$23
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$27
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$0A
	.byte	$22
	.byte	$22
	.byte	$20
	.byte	$00
	.byte	$0D
	.byte	$DD
	.byte	$30
	.byte	$02
	.byte	$20
	.byte	$27
	.byte	$77
	.byte	$40
	.byte	$07
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$30
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$07
	.byte	$00
	.byte	$7D
	.byte	$D3
	.byte	$20
	.byte	$04
	.byte	$00
	.byte	$70
	.byte	$07
	.byte	$00
	.byte	$70
	.byte	$02
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$70
	.byte	$07
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$30
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$70
	.byte	$02
	.byte	$E0
	.byte	$07
	.byte	$04
	.byte	$77
	.byte	$77
	.byte	$77
	.byte	$70
	.byte	$02
	.byte	$F0
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$AD
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$27
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$77
	.byte	$77
	.byte	$72
	.byte	$32
	.byte	$33
	.byte	$33
	.byte	$22
	.byte	$23
	.byte	$22
	.byte	$23
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$27
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$42
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$70
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$37
	.byte	$70
	.byte	$00
	.byte	$77
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$37
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$72
	.byte	$27
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$27
	.byte	$70
	.byte	$00
	.byte	$07
	.byte	$77
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$12
	.byte	$32
	.byte	$22
	.byte	$30
	.byte	$00
	.byte	$0D
	.byte	$DD
	.byte	$30
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$AA
	.byte	$D0
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$70
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$0D
	.byte	$27
	.byte	$70
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$07
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$CC
	.byte	$00
	.byte	$CC
	.byte	$C0
	.byte	$00
	.byte	$0C
	.byte	$C2
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$23
	.byte	$27
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$17
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$30
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$70
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$0D
	.byte	$A0
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$03
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$D2
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$03
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$3B
	.byte	$BC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CC
	.byte	$CB
	.byte	$00
	.byte	$36
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$63
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$12
	.byte	$27
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$03
	.byte	$27
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$07
	.byte	$43
	.byte	$30
	.byte	$00
	.byte	$07
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$70
	.byte	$80
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$23
_map_0_locks:
	.byte	$07
	.byte	$30
	.byte	$10
	.byte	$A0
	.byte	$13
	.byte	$30
	.byte	$19
	.byte	$2F
	.byte	$19
	.byte	$90
_enems_1:
	.byte	$11
	.byte	$A3
	.byte	$53
	.byte	$01
	.byte	$11
	.byte	$66
	.byte	$46
	.byte	$01
	.byte	$12
	.byte	$AA
	.byte	$28
	.byte	$02
	.byte	$23
	.byte	$AE
	.byte	$A4
	.byte	$02
	.byte	$12
	.byte	$66
	.byte	$34
	.byte	$02
	.byte	$12
	.byte	$92
	.byte	$21
	.byte	$02
	.byte	$12
	.byte	$B4
	.byte	$45
	.byte	$02
	.byte	$10
	.byte	$6C
	.byte	$6A
	.byte	$01
	.byte	$12
	.byte	$2D
	.byte	$23
	.byte	$02
	.byte	$12
	.byte	$9B
	.byte	$3A
	.byte	$01
	.byte	$12
	.byte	$A6
	.byte	$25
	.byte	$02
	.byte	$11
	.byte	$23
	.byte	$B3
	.byte	$02
	.byte	$12
	.byte	$AA
	.byte	$52
	.byte	$02
	.byte	$10
	.byte	$5A
	.byte	$2A
	.byte	$01
	.byte	$11
	.byte	$BE
	.byte	$2E
	.byte	$02
	.byte	$10
	.byte	$82
	.byte	$89
	.byte	$02
	.byte	$11
	.byte	$58
	.byte	$5D
	.byte	$01
	.byte	$10
	.byte	$AD
	.byte	$AA
	.byte	$01
	.byte	$10
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$11
	.byte	$A9
	.byte	$29
	.byte	$02
	.byte	$12
	.byte	$A1
	.byte	$44
	.byte	$02
	.byte	$11
	.byte	$B4
	.byte	$34
	.byte	$02
	.byte	$10
	.byte	$BC
	.byte	$9B
	.byte	$01
	.byte	$12
	.byte	$5E
	.byte	$58
	.byte	$01
	.byte	$10
	.byte	$92
	.byte	$9E
	.byte	$02
	.byte	$11
	.byte	$BD
	.byte	$B3
	.byte	$01
	.byte	$12
	.byte	$28
	.byte	$23
	.byte	$01
	.byte	$10
	.byte	$B8
	.byte	$BE
	.byte	$02
	.byte	$10
	.byte	$87
	.byte	$8B
	.byte	$01
	.byte	$23
	.byte	$B6
	.byte	$46
	.byte	$01
	.byte	$10
	.byte	$6E
	.byte	$6B
	.byte	$01
	.byte	$11
	.byte	$BE
	.byte	$BA
	.byte	$01
	.byte	$12
	.byte	$B5
	.byte	$55
	.byte	$02
	.byte	$10
	.byte	$82
	.byte	$8A
	.byte	$02
	.byte	$11
	.byte	$33
	.byte	$3A
	.byte	$02
	.byte	$11
	.byte	$BE
	.byte	$3E
	.byte	$02
	.byte	$10
	.byte	$BE
	.byte	$B2
	.byte	$02
	.byte	$11
	.byte	$AD
	.byte	$41
	.byte	$02
	.byte	$12
	.byte	$B1
	.byte	$4E
	.byte	$04
	.byte	$23
	.byte	$B7
	.byte	$47
	.byte	$01
	.byte	$10
	.byte	$62
	.byte	$64
	.byte	$01
	.byte	$11
	.byte	$B4
	.byte	$B1
	.byte	$02
	.byte	$11
	.byte	$32
	.byte	$38
	.byte	$01
	.byte	$23
	.byte	$BC
	.byte	$B1
	.byte	$01
	.byte	$11
	.byte	$AD
	.byte	$4D
	.byte	$01
	.byte	$23
	.byte	$AC
	.byte	$A3
	.byte	$02
	.byte	$12
	.byte	$9A
	.byte	$2A
	.byte	$01
	.byte	$10
	.byte	$43
	.byte	$46
	.byte	$01
	.byte	$23
	.byte	$9D
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$A1
	.byte	$81
	.byte	$01
	.byte	$00
	.byte	$41
	.byte	$11
	.byte	$01
	.byte	$10
	.byte	$BD
	.byte	$3D
	.byte	$01
	.byte	$11
	.byte	$B2
	.byte	$B7
	.byte	$01
	.byte	$12
	.byte	$44
	.byte	$46
	.byte	$00
_hotspots_1:
	.byte	$01
	.byte	$34
	.byte	$01
	.byte	$6D
	.byte	$01
	.byte	$95
	.byte	$01
	.byte	$68
	.byte	$01
	.byte	$6C
	.byte	$01
	.byte	$5D
	.byte	$01
	.byte	$8A
	.byte	$01
	.byte	$B9
	.byte	$02
	.byte	$35
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$58
	.byte	$01
	.byte	$8B
	.byte	$02
	.byte	$31
	.byte	$01
	.byte	$25
	.byte	$01
	.byte	$6A
	.byte	$02
	.byte	$2C
	.byte	$01
	.byte	$B2
	.byte	$02
	.byte	$24
_map_1_tiles:
	.byte	$BD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$CC
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$AA
	.byte	$AA
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A6
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$BD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$EE
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$50
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$45
	.byte	$40
	.byte	$00
	.byte	$EE
	.byte	$E0
	.byte	$00
	.byte	$BE
	.byte	$00
	.byte	$EE
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$45
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$0C
	.byte	$EE
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$0E
	.byte	$EE
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$0B
	.byte	$BD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$EE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$54
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$EE
	.byte	$00
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$22
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$11
	.byte	$19
	.byte	$0C
	.byte	$00
	.byte	$05
	.byte	$45
	.byte	$45
	.byte	$71
	.byte	$11
	.byte	$19
	.byte	$0C
	.byte	$00
	.byte	$EE
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$11
	.byte	$19
	.byte	$0C
	.byte	$00
	.byte	$07
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$19
	.byte	$0C
	.byte	$54
	.byte	$07
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$12
	.byte	$22
	.byte	$0C
	.byte	$22
	.byte	$07
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$71
	.byte	$19
	.byte	$0C
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$CE
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$54
	.byte	$C0
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$04
	.byte	$63
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$06
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0C
	.byte	$46
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$33
	.byte	$63
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$30
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$EC
	.byte	$66
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$33
	.byte	$33
	.byte	$CA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$0C
	.byte	$45
	.byte	$44
	.byte	$B6
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$6B
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$05
	.byte	$45
	.byte	$54
	.byte	$55
	.byte	$00
	.byte	$04
	.byte	$55
	.byte	$50
	.byte	$43
	.byte	$63
	.byte	$63
	.byte	$66
	.byte	$54
	.byte	$56
	.byte	$36
	.byte	$65
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$60
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E3
	.byte	$36
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$03
	.byte	$60
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$00
	.byte	$63
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$63
	.byte	$45
	.byte	$44
	.byte	$44
	.byte	$55
	.byte	$44
	.byte	$34
	.byte	$45
	.byte	$44
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$34
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$36
	.byte	$34
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$63
	.byte	$63
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$54
	.byte	$53
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$46
	.byte	$30
	.byte	$00
	.byte	$36
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$36
	.byte	$33
	.byte	$36
	.byte	$33
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$36
	.byte	$33
	.byte	$63
	.byte	$33
	.byte	$33
	.byte	$30
	.byte	$03
	.byte	$36
	.byte	$54
	.byte	$45
	.byte	$55
	.byte	$44
	.byte	$55
	.byte	$44
	.byte	$54
	.byte	$45
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$04
	.byte	$04
	.byte	$55
	.byte	$54
	.byte	$44
	.byte	$55
	.byte	$5C
	.byte	$5C
	.byte	$46
	.byte	$53
	.byte	$63
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DB
	.byte	$DB
	.byte	$60
	.byte	$33
	.byte	$36
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$05
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$99
	.byte	$0B
	.byte	$30
	.byte	$00
	.byte	$60
	.byte	$04
	.byte	$00
	.byte	$47
	.byte	$90
	.byte	$0C
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$22
	.byte	$90
	.byte	$4C
	.byte	$36
	.byte	$00
	.byte	$50
	.byte	$07
	.byte	$11
	.byte	$19
	.byte	$92
	.byte	$2C
	.byte	$5F
	.byte	$40
	.byte	$E0
	.byte	$06
	.byte	$11
	.byte	$19
	.byte	$71
	.byte	$9C
	.byte	$66
	.byte	$60
	.byte	$00
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$C4
	.byte	$55
	.byte	$54
	.byte	$55
	.byte	$44
	.byte	$55
	.byte	$07
	.byte	$11
	.byte	$BD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DB
	.byte	$47
	.byte	$11
	.byte	$C0
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$11
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$DD
	.byte	$00
	.byte	$79
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$40
	.byte	$0B
	.byte	$DD
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$77
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$BD
	.byte	$C0
	.byte	$77
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$BB
	.byte	$C0
	.byte	$77
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$CC
	.byte	$C7
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C7
	.byte	$97
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$66
	.byte	$66
	.byte	$6A
	.byte	$AA
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$19
	.byte	$07
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$71
	.byte	$19
	.byte	$4C
	.byte	$19
	.byte	$97
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$71
	.byte	$19
	.byte	$EC
	.byte	$19
	.byte	$07
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$71
	.byte	$19
	.byte	$0C
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$B1
	.byte	$19
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$11
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$19
	.byte	$0C
	.byte	$DB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$0C
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$5C
	.byte	$00
	.byte	$BD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$C9
	.byte	$EC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C9
	.byte	$0C
	.byte	$45
	.byte	$55
	.byte	$45
	.byte	$54
	.byte	$44
	.byte	$54
	.byte	$F9
	.byte	$5C
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$B6
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$50
	.byte	$00
	.byte	$C5
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$CC
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$90
	.byte	$00
	.byte	$C7
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$90
	.byte	$07
	.byte	$C7
	.byte	$94
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$90
	.byte	$07
	.byte	$C7
	.byte	$72
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$90
	.byte	$07
	.byte	$C7
	.byte	$11
	.byte	$90
	.byte	$04
	.byte	$79
	.byte	$07
	.byte	$94
	.byte	$57
	.byte	$C7
	.byte	$11
	.byte	$90
	.byte	$00
	.byte	$22
	.byte	$47
	.byte	$12
	.byte	$21
	.byte	$C7
	.byte	$11
	.byte	$95
	.byte	$47
	.byte	$19
	.byte	$99
	.byte	$11
	.byte	$11
	.byte	$C7
	.byte	$11
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$19
	.byte	$11
	.byte	$11
	.byte	$BD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$88
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$88
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$70
	.byte	$00
	.byte	$08
	.byte	$88
	.byte	$86
	.byte	$99
	.byte	$00
	.byte	$01
	.byte	$90
	.byte	$00
	.byte	$08
	.byte	$88
	.byte	$83
	.byte	$90
	.byte	$54
	.byte	$71
	.byte	$90
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$86
	.byte	$90
	.byte	$02
	.byte	$21
	.byte	$90
	.byte	$00
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$94
	.byte	$71
	.byte	$91
	.byte	$90
	.byte	$00
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$12
	.byte	$21
	.byte	$91
	.byte	$90
	.byte	$00
	.byte	$83
	.byte	$88
	.byte	$83
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$90
	.byte	$08
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$11
	.byte	$11
	.byte	$79
	.byte	$90
	.byte	$08
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$BB
	.byte	$AA
	.byte	$AA
	.byte	$A3
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$33
	.byte	$B3
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$68
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$63
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$38
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$36
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$38
	.byte	$83
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$B8
	.byte	$88
	.byte	$88
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$B8
	.byte	$88
	.byte	$88
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$38
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$B8
	.byte	$88
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$3A
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A3
	.byte	$B3
	.byte	$66
	.byte	$60
	.byte	$00
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$88
	.byte	$C6
	.byte	$00
	.byte	$0C
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$66
	.byte	$88
	.byte	$C0
	.byte	$00
	.byte	$6C
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$C5
	.byte	$45
	.byte	$5F
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$8D
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$DD
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$8B
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$BA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A3
	.byte	$B3
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$88
	.byte	$66
	.byte	$66
	.byte	$88
	.byte	$68
	.byte	$86
	.byte	$63
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$33
	.byte	$38
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$33
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$3B
	.byte	$3A
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AB
	.byte	$3B
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$38
	.byte	$83
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$8B
	.byte	$63
	.byte	$33
	.byte	$63
	.byte	$68
	.byte	$88
	.byte	$86
	.byte	$88
	.byte	$83
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$88
	.byte	$86
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$B8
	.byte	$68
	.byte	$83
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$B8
	.byte	$88
	.byte	$86
	.byte	$38
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$38
	.byte	$88
	.byte	$83
	.byte	$68
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$83
	.byte	$68
	.byte	$88
	.byte	$3B
	.byte	$F8
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$36
	.byte	$3A
	.byte	$88
	.byte	$83
	.byte	$33
	.byte	$3A
	.byte	$AA
	.byte	$A3
	.byte	$BB
	.byte	$63
	.byte	$6B
	.byte	$36
_map_1_decos_00:
	.byte	$10
	.byte	$02
	.byte	$28
	.byte	$81
	.byte	$11
	.byte	$05
	.byte	$2E
	.byte	$32
	.byte	$46
	.byte	$64
	.byte	$79
	.byte	$00
_map_1_decos_01:
	.byte	$11
	.byte	$04
	.byte	$2C
	.byte	$41
	.byte	$67
	.byte	$75
	.byte	$90
	.byte	$3B
	.byte	$00
_map_1_decos_02:
	.byte	$11
	.byte	$03
	.byte	$26
	.byte	$4B
	.byte	$9E
	.byte	$90
	.byte	$64
	.byte	$00
_map_1_decos_03:
	.byte	$11
	.byte	$03
	.byte	$25
	.byte	$7C
	.byte	$89
	.byte	$10
	.byte	$02
	.byte	$2A
	.byte	$92
	.byte	$00
_map_1_decos_04:
	.byte	$92
	.byte	$BD
	.byte	$00
_map_1_decos_05:
	.byte	$12
	.byte	$03
	.byte	$58
	.byte	$83
	.byte	$AA
	.byte	$13
	.byte	$03
	.byte	$5D
	.byte	$AD
	.byte	$B1
	.byte	$00
_map_1_decos_06:
	.byte	$11
	.byte	$03
	.byte	$19
	.byte	$62
	.byte	$86
	.byte	$10
	.byte	$04
	.byte	$32
	.byte	$3F
	.byte	$75
	.byte	$8D
	.byte	$00
_map_1_decos_07:
	.byte	$11
	.byte	$05
	.byte	$25
	.byte	$42
	.byte	$4A
	.byte	$5D
	.byte	$64
	.byte	$10
	.byte	$03
	.byte	$3D
	.byte	$45
	.byte	$88
	.byte	$00
_map_1_decos_08:
	.byte	$11
	.byte	$06
	.byte	$2A
	.byte	$33
	.byte	$46
	.byte	$5E
	.byte	$6B
	.byte	$87
	.byte	$10
	.byte	$02
	.byte	$38
	.byte	$85
	.byte	$00
_map_1_decos_09:
	.byte	$11
	.byte	$08
	.byte	$23
	.byte	$2C
	.byte	$40
	.byte	$48
	.byte	$4E
	.byte	$66
	.byte	$6D
	.byte	$B6
	.byte	$10
	.byte	$02
	.byte	$2B
	.byte	$62
	.byte	$12
	.byte	$03
	.byte	$4B
	.byte	$87
	.byte	$9C
	.byte	$13
	.byte	$03
	.byte	$4C
	.byte	$8B
	.byte	$9E
	.byte	$00
_map_1_decos_0a:
	.byte	$11
	.byte	$02
	.byte	$27
	.byte	$7F
	.byte	$12
	.byte	$03
	.byte	$32
	.byte	$63
	.byte	$91
	.byte	$13
	.byte	$03
	.byte	$33
	.byte	$64
	.byte	$92
	.byte	$10
	.byte	$05
	.byte	$35
	.byte	$49
	.byte	$5D
	.byte	$86
	.byte	$99
	.byte	$00
_map_1_decos_0b:
	.byte	$11
	.byte	$03
	.byte	$12
	.byte	$78
	.byte	$97
	.byte	$10
	.byte	$03
	.byte	$43
	.byte	$5A
	.byte	$65
	.byte	$93
	.byte	$4D
	.byte	$00
_map_1_decos_0c:
	.byte	$10
	.byte	$04
	.byte	$25
	.byte	$2D
	.byte	$39
	.byte	$47
	.byte	$12
	.byte	$08
	.byte	$2B
	.byte	$31
	.byte	$3F
	.byte	$62
	.byte	$68
	.byte	$87
	.byte	$9A
	.byte	$A3
	.byte	$13
	.byte	$06
	.byte	$2C
	.byte	$32
	.byte	$64
	.byte	$69
	.byte	$89
	.byte	$9B
	.byte	$11
	.byte	$02
	.byte	$5A
	.byte	$76
	.byte	$00
_map_1_decos_0d:
	.byte	$11
	.byte	$02
	.byte	$1A
	.byte	$41
	.byte	$12
	.byte	$04
	.byte	$25
	.byte	$44
	.byte	$62
	.byte	$94
	.byte	$10
	.byte	$03
	.byte	$28
	.byte	$32
	.byte	$49
	.byte	$13
	.byte	$04
	.byte	$30
	.byte	$36
	.byte	$64
	.byte	$95
	.byte	$00
_map_1_decos:
	.addr	_map_1_decos_00
	.addr	_map_1_decos_01
	.addr	_map_1_decos_02
	.addr	_map_1_decos_03
	.addr	_map_1_decos_04
	.addr	_map_1_decos_05
	.addr	_map_1_decos_06
	.addr	_map_1_decos_07
	.addr	_map_1_decos_08
	.addr	_map_1_decos_09
	.addr	_map_1_decos_0a
	.addr	_map_1_decos_0b
	.addr	_map_1_decos_0c
	.addr	_map_1_decos_0d
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_map_1_locks:
	.byte	$02
	.byte	$80
	.byte	$09
	.byte	$A1
	.byte	$0B
	.byte	$AC
	.byte	$0F
	.byte	$37
	.byte	$11
	.byte	$A0
_ts0_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5C
	.byte	$5C
	.byte	$5C
	.byte	$5D
	.byte	$5D
	.byte	$5E
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
_ts1_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$03
_ts1_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9A
	.byte	$99
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$9F
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$9F
	.byte	$9F
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B5
	.byte	$B5
	.byte	$B5
	.byte	$B6
	.byte	$B6
	.byte	$B7
	.byte	$B7
	.byte	$B8
	.byte	$B8
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
_ts2_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
_ts2_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$41
	.byte	$40
	.byte	$42
	.byte	$42
	.byte	$41
	.byte	$40
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$00
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$41
	.byte	$53
	.byte	$40
	.byte	$54
	.byte	$55
	.byte	$55
	.byte	$54
	.byte	$40
	.byte	$56
	.byte	$41
	.byte	$57
	.byte	$58
	.byte	$58
	.byte	$59
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$42
	.byte	$42
	.byte	$62
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$42
	.byte	$42
	.byte	$53
	.byte	$40
	.byte	$42
	.byte	$42
	.byte	$41
	.byte	$57
_ts3_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
_ts3_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$69
	.byte	$6A
	.byte	$6D
	.byte	$6E
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$6F
	.byte	$70
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$76
	.byte	$6A
	.byte	$77
	.byte	$6C
	.byte	$78
	.byte	$79
	.byte	$79
	.byte	$78
	.byte	$69
	.byte	$7A
	.byte	$6B
	.byte	$7B
	.byte	$7C
	.byte	$7C
	.byte	$7D
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$81
	.byte	$5E
	.byte	$5F
	.byte	$5E
	.byte	$5F
	.byte	$82
	.byte	$82
	.byte	$83
	.byte	$83
	.byte	$84
	.byte	$84
	.byte	$6D
	.byte	$6E
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8A
	.byte	$76
	.byte	$6A
	.byte	$6D
	.byte	$6E
	.byte	$69
	.byte	$7A
	.byte	$6D
	.byte	$6E
_ts4_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_ts4_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$5C
	.byte	$5C
	.byte	$5C
	.byte	$5C
	.byte	$5D
	.byte	$5D
	.byte	$5E
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$E3
	.byte	$E3
	.byte	$E4
	.byte	$E4
	.byte	$B8
	.byte	$B8
	.byte	$00
	.byte	$00
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
_sspl0_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0B
	.byte	$00
	.byte	$80
_sspl0_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$06
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$0B
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$0A
	.byte	$40
	.byte	$80
_sspl0_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_sspl0_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0C
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0E
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_sspl0_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$13
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$80
_sspl0_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$13
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$12
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$15
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$17
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$80
_sspl0_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$19
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1B
	.byte	$00
	.byte	$80
_sspl0_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0C
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$19
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1B
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1A
	.byte	$40
	.byte	$80
_sspl0_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$13
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$80
_sspl0_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$13
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$12
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$15
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1C
	.byte	$40
	.byte	$80
_sspl0_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$1F
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$80
_sspl0_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1E
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$23
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$22
	.byte	$40
	.byte	$80
_sspl0_06_a:
	.byte	$FC
	.byte	$F8
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$25
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$29
	.byte	$00
	.byte	$80
_sspl0_06_b:
	.byte	$FC
	.byte	$F8
	.byte	$25
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$24
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$27
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$26
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$29
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$28
	.byte	$40
	.byte	$80
_sspl0_07_a:
	.byte	$FC
	.byte	$F8
	.byte	$2A
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$2B
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$2F
	.byte	$00
	.byte	$80
_sspl0_07_b:
	.byte	$FC
	.byte	$F8
	.byte	$2B
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$2A
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$2D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$2C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$2F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$2E
	.byte	$40
	.byte	$80
_ssen0_00_a:
	.byte	$00
	.byte	$F8
	.byte	$30
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$31
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$01
	.byte	$80
_ssen0_00_b:
	.byte	$00
	.byte	$F8
	.byte	$31
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$30
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$32
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$35
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$34
	.byte	$41
	.byte	$80
_ssen0_01_a:
	.byte	$00
	.byte	$F8
	.byte	$30
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$31
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$36
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$38
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$39
	.byte	$01
	.byte	$80
_ssen0_01_b:
	.byte	$00
	.byte	$F8
	.byte	$31
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$30
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$36
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$39
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$38
	.byte	$41
	.byte	$80
_ssen0_02_a:
	.byte	$00
	.byte	$F8
	.byte	$3A
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$3B
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$3D
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$3E
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$3F
	.byte	$01
	.byte	$80
_ssen0_02_b:
	.byte	$00
	.byte	$F8
	.byte	$3B
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$3A
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$3D
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$3F
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$3E
	.byte	$41
	.byte	$80
_ssen0_03_a:
	.byte	$00
	.byte	$F8
	.byte	$40
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$41
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$43
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$44
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$01
	.byte	$80
_ssen0_03_b:
	.byte	$00
	.byte	$F8
	.byte	$41
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$42
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$45
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$44
	.byte	$41
	.byte	$80
_ssen0_04_a:
	.byte	$00
	.byte	$F8
	.byte	$46
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$47
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$49
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4A
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4B
	.byte	$02
	.byte	$80
_ssen0_04_b:
	.byte	$00
	.byte	$F8
	.byte	$47
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$46
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$48
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4B
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$42
	.byte	$80
_ssen0_05_a:
	.byte	$00
	.byte	$F8
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$4D
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$51
	.byte	$02
	.byte	$80
_ssen0_05_b:
	.byte	$00
	.byte	$F8
	.byte	$4D
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$50
	.byte	$42
	.byte	$80
_ssplat0:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$52
	.byte	$41
	.byte	$80
_ssit0_00:
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$00
	.byte	$80
_ssit0_01:
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$58
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$00
	.byte	$80
_ssit0_02:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$01
	.byte	$80
_ssenextra0_00:
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$61
	.byte	$03
	.byte	$80
_ssenextra0_01:
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$63
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$64
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$65
	.byte	$03
	.byte	$80
_ssenextra0_02:
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$5E
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$61
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$60
	.byte	$43
	.byte	$80
_ssenextra0_03:
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$83
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$83
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$83
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$83
	.byte	$80
_sspl1_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$66
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$67
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$69
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$6A
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$6B
	.byte	$00
	.byte	$80
_sspl1_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$67
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$66
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$69
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$68
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$6B
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$6A
	.byte	$40
	.byte	$80
_sspl1_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$6C
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$6D
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$6E
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$6F
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$70
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$71
	.byte	$00
	.byte	$80
_sspl1_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$6D
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$6C
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$6F
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$6E
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$71
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$70
	.byte	$40
	.byte	$80
_sspl1_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$72
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$73
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$74
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$75
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$80
_sspl1_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$73
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$72
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$75
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$74
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$77
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$76
	.byte	$40
	.byte	$80
_sspl1_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$78
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$79
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$7B
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$7C
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$7D
	.byte	$00
	.byte	$80
_sspl1_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$79
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$78
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$7B
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$7A
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$7D
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$7C
	.byte	$40
	.byte	$80
_sspl1_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$7E
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$7F
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$81
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$82
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$83
	.byte	$00
	.byte	$80
_sspl1_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$7F
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$7E
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$81
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$80
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$83
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$82
	.byte	$40
	.byte	$80
_sspl1_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$84
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$85
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$86
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$87
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$88
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$89
	.byte	$00
	.byte	$80
_sspl1_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$85
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$84
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$87
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$86
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$89
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$88
	.byte	$40
	.byte	$80
_sspl1_06_a:
	.byte	$FC
	.byte	$F8
	.byte	$8A
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$8B
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$8C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$8D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$8E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$8F
	.byte	$00
	.byte	$80
_sspl1_06_b:
	.byte	$FC
	.byte	$F8
	.byte	$8B
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$8A
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$8D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$8C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$8F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$8E
	.byte	$40
	.byte	$80
_sspl1_07_a:
	.byte	$FC
	.byte	$F8
	.byte	$90
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$91
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$94
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$95
	.byte	$00
	.byte	$80
_sspl1_07_b:
	.byte	$FC
	.byte	$F8
	.byte	$91
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$90
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$93
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$92
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$95
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$94
	.byte	$40
	.byte	$80
_ssen1_00_a:
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$97
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$98
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$99
	.byte	$01
	.byte	$80
_ssen1_00_b:
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$96
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$99
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$98
	.byte	$41
	.byte	$80
_ssen1_01_a:
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$96
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$99
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$98
	.byte	$41
	.byte	$80
_ssen1_01_b:
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$97
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$98
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$99
	.byte	$01
	.byte	$80
_ssen1_02_a:
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$9B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$9C
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$9D
	.byte	$01
	.byte	$80
_ssen1_02_b:
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$9A
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$9D
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$9C
	.byte	$41
	.byte	$80
_ssen1_03_a:
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$9F
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$A0
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$A1
	.byte	$01
	.byte	$80
_ssen1_03_b:
	.byte	$00
	.byte	$00
	.byte	$9F
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$9E
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$A1
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$A0
	.byte	$41
	.byte	$80
_ssen1_04_a:
	.byte	$00
	.byte	$F8
	.byte	$A2
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$A3
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$A4
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$A5
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$A6
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$A7
	.byte	$02
	.byte	$80
_ssen1_04_b:
	.byte	$00
	.byte	$F8
	.byte	$A3
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$A2
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$A4
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$A7
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$A6
	.byte	$42
	.byte	$80
_ssen1_05_a:
	.byte	$00
	.byte	$F8
	.byte	$A3
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$A2
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$A4
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$A7
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$A6
	.byte	$42
	.byte	$80
_ssen1_05_b:
	.byte	$00
	.byte	$F8
	.byte	$A2
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$A3
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$A4
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$A5
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$A6
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$A7
	.byte	$02
	.byte	$80
_ssplat1:
	.byte	$00
	.byte	$00
	.byte	$A8
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$A8
	.byte	$42
	.byte	$80
_ssit1_00:
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$AA
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$AB
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$AC
	.byte	$03
	.byte	$80
_ssit1_01:
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$58
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$00
	.byte	$80
_ssit1_02:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$01
	.byte	$80
_sspl2_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$AD
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$AE
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$AF
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$B1
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$B2
	.byte	$00
	.byte	$80
_sspl2_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$AE
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$AD
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$B0
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$AF
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$B2
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$B1
	.byte	$40
	.byte	$80
_sspl2_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$B3
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$B4
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$B5
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$B6
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$B7
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$B8
	.byte	$00
	.byte	$80
_sspl2_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$B4
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$B3
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$B6
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$B5
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$B8
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$B7
	.byte	$40
	.byte	$80
_sspl2_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$B9
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$BA
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$BC
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$BD
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$BE
	.byte	$00
	.byte	$80
_sspl2_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$BA
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$B9
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$BC
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$BB
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$BE
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$BD
	.byte	$40
	.byte	$80
_sspl2_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$B3
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$B4
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$BF
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$C1
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$C2
	.byte	$00
	.byte	$80
_sspl2_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$B4
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$B3
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$C0
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$BF
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$C2
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$C1
	.byte	$40
	.byte	$80
_sspl2_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$B9
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$BA
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$C3
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$C4
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$C5
	.byte	$00
	.byte	$80
_sspl2_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$BA
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$B9
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$C3
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$BB
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$C5
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$C4
	.byte	$40
	.byte	$80
_sspl2_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$C6
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$C7
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$C8
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$C9
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$CA
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$CB
	.byte	$00
	.byte	$80
_sspl2_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$C7
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$C6
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$C9
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$C8
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$CB
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$CA
	.byte	$40
	.byte	$80
_sspl2_06_a:
	.byte	$FC
	.byte	$F8
	.byte	$CC
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$CD
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$CE
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$CF
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$D0
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$D1
	.byte	$00
	.byte	$80
_sspl2_06_b:
	.byte	$FC
	.byte	$F8
	.byte	$CD
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$CC
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$CF
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$CE
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$D1
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$D0
	.byte	$40
	.byte	$80
_sspl2_07_a:
	.byte	$FC
	.byte	$F8
	.byte	$D2
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$D3
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$D4
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$D5
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$D6
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$D7
	.byte	$00
	.byte	$80
_sspl2_07_b:
	.byte	$FC
	.byte	$F8
	.byte	$D3
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$D2
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$D5
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$D4
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$D7
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$D6
	.byte	$40
	.byte	$80
_ssit2_00:
	.byte	$00
	.byte	$00
	.byte	$D8
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D9
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$DA
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$DB
	.byte	$01
	.byte	$80
_ssit2_01:
	.byte	$00
	.byte	$00
	.byte	$DC
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$DD
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$DE
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$02
	.byte	$80
_ssit2_02:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$01
	.byte	$80
_ssending_pppp_00:
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$00
	.byte	$20
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$28
	.byte	$08
	.byte	$0B
	.byte	$00
	.byte	$30
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$0D
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$0E
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$28
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$30
	.byte	$10
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$15
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$16
	.byte	$00
	.byte	$18
	.byte	$18
	.byte	$17
	.byte	$00
	.byte	$20
	.byte	$18
	.byte	$18
	.byte	$00
	.byte	$28
	.byte	$18
	.byte	$19
	.byte	$00
	.byte	$30
	.byte	$18
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$1B
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$1C
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$1D
	.byte	$00
	.byte	$18
	.byte	$20
	.byte	$1E
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$1F
	.byte	$00
	.byte	$28
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$28
	.byte	$21
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$22
	.byte	$00
	.byte	$18
	.byte	$28
	.byte	$23
	.byte	$00
	.byte	$20
	.byte	$28
	.byte	$24
	.byte	$00
	.byte	$28
	.byte	$28
	.byte	$25
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$26
	.byte	$00
	.byte	$18
	.byte	$30
	.byte	$27
	.byte	$00
	.byte	$20
	.byte	$30
	.byte	$28
	.byte	$00
	.byte	$28
	.byte	$30
	.byte	$29
	.byte	$00
	.byte	$08
	.byte	$38
	.byte	$2A
	.byte	$00
	.byte	$18
	.byte	$38
	.byte	$2B
	.byte	$00
	.byte	$20
	.byte	$38
	.byte	$2C
	.byte	$00
	.byte	$28
	.byte	$38
	.byte	$2D
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$2E
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$2F
	.byte	$00
	.byte	$18
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$20
	.byte	$48
	.byte	$31
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$32
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$33
	.byte	$00
	.byte	$20
	.byte	$58
	.byte	$34
	.byte	$00
	.byte	$80
_sspl_lah_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$35
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$36
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$39
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$3A
	.byte	$00
	.byte	$80
_sspl_lah_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$36
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$35
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$37
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$3A
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$39
	.byte	$40
	.byte	$80
_sspl_lah_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$3B
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$3C
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$3D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$3E
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$3F
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$80
_sspl_lah_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$3C
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$3B
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$3E
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$3D
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$3F
	.byte	$40
	.byte	$80
_sspl_lah_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$41
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$80
_sspl_lah_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$41
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$43
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$42
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$44
	.byte	$40
	.byte	$80
_sspl_lah_ending_00:
	.byte	$FC
	.byte	$F8
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$47
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$49
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$4A
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$80
_sspl_lah_ending_01:
	.byte	$FC
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$4C
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$4E
	.byte	$02
	.byte	$80
_sspl_lah_ending_02:
	.byte	$FC
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$4F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$51
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$52
	.byte	$00
	.byte	$80
_ssen_lah_00_a:
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$53
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$54
	.byte	$41
	.byte	$80
_ssen_lah_00_b:
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$53
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$54
	.byte	$41
	.byte	$80
_ssen_lah_01_a:
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$55
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$56
	.byte	$41
	.byte	$80
_ssen_lah_01_b:
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$55
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$56
	.byte	$41
	.byte	$80
_ssen_lah_02_a:
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$58
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$59
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5A
	.byte	$02
	.byte	$80
_ssen_lah_02_b:
	.byte	$00
	.byte	$00
	.byte	$58
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5A
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$42
	.byte	$80
_ssen_lah_03_a:
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5E
	.byte	$02
	.byte	$80
_ssen_lah_03_b:
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5E
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$42
	.byte	$80
_ssen_lah_04_a:
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$60
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$61
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$62
	.byte	$03
	.byte	$80
_ssen_lah_04_b:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$61
	.byte	$43
	.byte	$80
_ssen_lah_05_a:
	.byte	$00
	.byte	$00
	.byte	$63
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$64
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$65
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$66
	.byte	$03
	.byte	$80
_ssen_lah_05_b:
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$63
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$66
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$65
	.byte	$43
	.byte	$80
_ssen_lah_06_a:
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$69
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$6A
	.byte	$00
	.byte	$80
_ssen_lah_06_b:
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$6A
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$69
	.byte	$40
	.byte	$80
_ssen_lah_07_a:
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$6B
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$6C
	.byte	$00
	.byte	$80
_ssen_lah_07_b:
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$6B
	.byte	$40
	.byte	$80
_ssit_lah_00:
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$6D
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$03
	.byte	$80
_ssit_lah_01:
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$71
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$00
	.byte	$80
_ssit_lah_02:
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$75
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$76
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$80
_sspl_pppp_00_a:
	.byte	$FC
	.byte	$00
	.byte	$39
	.byte	$80
	.byte	$04
	.byte	$00
	.byte	$3A
	.byte	$80
	.byte	$FC
	.byte	$08
	.byte	$37
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$38
	.byte	$80
	.byte	$FC
	.byte	$10
	.byte	$35
	.byte	$80
	.byte	$04
	.byte	$10
	.byte	$36
	.byte	$80
	.byte	$80
_sspl_pppp_00_b:
	.byte	$FC
	.byte	$00
	.byte	$3A
	.byte	$C0
	.byte	$04
	.byte	$00
	.byte	$39
	.byte	$C0
	.byte	$FC
	.byte	$08
	.byte	$38
	.byte	$C0
	.byte	$04
	.byte	$08
	.byte	$37
	.byte	$C0
	.byte	$FC
	.byte	$10
	.byte	$36
	.byte	$C0
	.byte	$04
	.byte	$10
	.byte	$35
	.byte	$C0
	.byte	$80
_sspl_pppp_01_a:
	.byte	$FC
	.byte	$00
	.byte	$3F
	.byte	$80
	.byte	$04
	.byte	$00
	.byte	$40
	.byte	$80
	.byte	$FC
	.byte	$08
	.byte	$3D
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$3E
	.byte	$80
	.byte	$FC
	.byte	$10
	.byte	$3B
	.byte	$80
	.byte	$04
	.byte	$10
	.byte	$3C
	.byte	$80
	.byte	$80
_sspl_pppp_01_b:
	.byte	$FC
	.byte	$00
	.byte	$40
	.byte	$C0
	.byte	$04
	.byte	$00
	.byte	$3F
	.byte	$C0
	.byte	$FC
	.byte	$08
	.byte	$3E
	.byte	$C0
	.byte	$04
	.byte	$08
	.byte	$3D
	.byte	$C0
	.byte	$FC
	.byte	$10
	.byte	$3C
	.byte	$C0
	.byte	$04
	.byte	$10
	.byte	$3B
	.byte	$C0
	.byte	$80
_sspl_pppp_02_a:
	.byte	$FC
	.byte	$00
	.byte	$44
	.byte	$80
	.byte	$04
	.byte	$00
	.byte	$45
	.byte	$80
	.byte	$FC
	.byte	$08
	.byte	$42
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$43
	.byte	$80
	.byte	$FC
	.byte	$10
	.byte	$41
	.byte	$80
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$80
_sspl_pppp_02_b:
	.byte	$FC
	.byte	$00
	.byte	$45
	.byte	$C0
	.byte	$04
	.byte	$00
	.byte	$44
	.byte	$C0
	.byte	$FC
	.byte	$08
	.byte	$43
	.byte	$C0
	.byte	$04
	.byte	$08
	.byte	$42
	.byte	$C0
	.byte	$FC
	.byte	$10
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$10
	.byte	$41
	.byte	$C0
	.byte	$80
_ssen_pppp_00_a:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$81
	.byte	$08
	.byte	$00
	.byte	$54
	.byte	$C1
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$C1
	.byte	$80
_ssen_pppp_00_b:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$81
	.byte	$08
	.byte	$00
	.byte	$54
	.byte	$C1
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$C1
	.byte	$80
_ssen_pppp_01_a:
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$81
	.byte	$08
	.byte	$00
	.byte	$56
	.byte	$C1
	.byte	$00
	.byte	$08
	.byte	$55
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$C1
	.byte	$80
_ssen_pppp_01_b:
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$81
	.byte	$08
	.byte	$00
	.byte	$56
	.byte	$C1
	.byte	$00
	.byte	$08
	.byte	$55
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$C1
	.byte	$80
_ssen_pppp_02_a:
	.byte	$00
	.byte	$00
	.byte	$59
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$5A
	.byte	$82
	.byte	$00
	.byte	$08
	.byte	$57
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$58
	.byte	$82
	.byte	$80
_ssen_pppp_02_b:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$C2
	.byte	$08
	.byte	$00
	.byte	$59
	.byte	$C2
	.byte	$00
	.byte	$08
	.byte	$58
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$57
	.byte	$C2
	.byte	$80
_ssen_pppp_03_a:
	.byte	$00
	.byte	$00
	.byte	$5D
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$5E
	.byte	$82
	.byte	$00
	.byte	$08
	.byte	$5B
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$5C
	.byte	$82
	.byte	$80
_ssen_pppp_03_b:
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$C2
	.byte	$08
	.byte	$00
	.byte	$5D
	.byte	$C2
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$5B
	.byte	$C2
	.byte	$80
_ssen_pppp_04_a:
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$83
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$83
	.byte	$00
	.byte	$08
	.byte	$5F
	.byte	$83
	.byte	$08
	.byte	$08
	.byte	$60
	.byte	$83
	.byte	$80
_ssen_pppp_04_b:
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$C3
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$C3
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$C3
	.byte	$08
	.byte	$08
	.byte	$5F
	.byte	$C3
	.byte	$80
_ssen_pppp_05_a:
	.byte	$00
	.byte	$00
	.byte	$65
	.byte	$83
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$83
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$83
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$83
	.byte	$80
_ssen_pppp_05_b:
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$C3
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$C3
	.byte	$00
	.byte	$08
	.byte	$64
	.byte	$C3
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$C3
	.byte	$80
_ssen_pppp_06_a:
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$80
	.byte	$08
	.byte	$00
	.byte	$6A
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$67
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$68
	.byte	$82
	.byte	$80
_ssen_pppp_06_b:
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$C0
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$C0
	.byte	$00
	.byte	$08
	.byte	$68
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$67
	.byte	$C2
	.byte	$80
_ssen_pppp_07_a:
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$80
	.byte	$08
	.byte	$00
	.byte	$6C
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$67
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$68
	.byte	$82
	.byte	$80
_ssen_pppp_07_b:
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$C0
	.byte	$08
	.byte	$00
	.byte	$6B
	.byte	$C0
	.byte	$00
	.byte	$08
	.byte	$68
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$67
	.byte	$C2
	.byte	$80
_ssit_pppp_00:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$79
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$79
	.byte	$40
	.byte	$80
_ssit_pppp_01:
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$80
	.byte	$08
	.byte	$00
	.byte	$73
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$80
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$80
	.byte	$80
_ssit_pppp_02:
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$74
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$81
	.byte	$80
_spr_enems:
	.addr	_ssen0_00_a
	.addr	_ssen0_01_a
	.addr	_ssen0_00_b
	.addr	_ssen0_01_b
	.addr	_ssen0_02_a
	.addr	_ssen0_03_a
	.addr	_ssen0_02_b
	.addr	_ssen0_03_b
	.addr	_ssen0_04_a
	.addr	_ssen0_05_a
	.addr	_ssen0_04_b
	.addr	_ssen0_05_b
	.addr	_ssplat0
	.addr	_ssplat0
	.addr	_ssplat0
	.addr	_ssplat0
	.addr	_ssen1_00_a
	.addr	_ssen1_01_a
	.addr	_ssen1_00_b
	.addr	_ssen1_01_b
	.addr	_ssen1_02_a
	.addr	_ssen1_03_a
	.addr	_ssen1_02_b
	.addr	_ssen1_03_b
	.addr	_ssen1_04_a
	.addr	_ssen1_05_a
	.addr	_ssen1_04_b
	.addr	_ssen1_05_b
	.addr	_ssplat1
	.addr	_ssplat1
	.addr	_ssplat1
	.addr	_ssplat1
	.addr	_ssenextra0_00
	.addr	_ssenextra0_01
	.addr	_ssenextra0_02
	.addr	_ssenextra0_03
	.addr	_ssen_lah_00_a
	.addr	_ssen_lah_01_a
	.addr	_ssen_lah_00_b
	.addr	_ssen_lah_01_b
	.addr	_ssen_lah_02_a
	.addr	_ssen_lah_03_a
	.addr	_ssen_lah_02_b
	.addr	_ssen_lah_03_b
	.addr	_ssen_lah_04_a
	.addr	_ssen_lah_05_a
	.addr	_ssen_lah_04_b
	.addr	_ssen_lah_05_b
	.addr	_ssen_lah_06_a
	.addr	_ssen_lah_07_a
	.addr	_ssen_lah_06_b
	.addr	_ssen_lah_07_b
	.addr	_ssen_pppp_00_a
	.addr	_ssen_pppp_01_a
	.addr	_ssen_pppp_00_b
	.addr	_ssen_pppp_01_b
	.addr	_ssen_pppp_02_a
	.addr	_ssen_pppp_03_a
	.addr	_ssen_pppp_02_b
	.addr	_ssen_pppp_03_b
	.addr	_ssen_pppp_04_a
	.addr	_ssen_pppp_05_a
	.addr	_ssen_pppp_04_b
	.addr	_ssen_pppp_05_b
	.addr	_ssen_pppp_06_a
	.addr	_ssen_pppp_07_a
	.addr	_ssen_pppp_06_b
	.addr	_ssen_pppp_07_b
_spr_player:
	.addr	_sspl0_00_a
	.addr	_sspl0_01_a
	.addr	_sspl0_02_a
	.addr	_sspl0_03_a
	.addr	_sspl0_04_a
	.addr	_sspl0_05_a
	.addr	_sspl0_06_a
	.addr	_sspl0_07_a
	.addr	_sspl0_00_b
	.addr	_sspl0_01_b
	.addr	_sspl0_02_b
	.addr	_sspl0_03_b
	.addr	_sspl0_04_b
	.addr	_sspl0_05_b
	.addr	_sspl0_06_b
	.addr	_sspl0_07_b
	.addr	_sspl1_00_a
	.addr	_sspl1_01_a
	.addr	_sspl1_02_a
	.addr	_sspl1_03_a
	.addr	_sspl1_04_a
	.addr	_sspl1_05_a
	.addr	_sspl1_06_a
	.addr	_sspl1_07_a
	.addr	_sspl1_00_b
	.addr	_sspl1_01_b
	.addr	_sspl1_02_b
	.addr	_sspl1_03_b
	.addr	_sspl1_04_b
	.addr	_sspl1_05_b
	.addr	_sspl1_06_b
	.addr	_sspl1_07_b
	.addr	_sspl_lah_01_a
	.addr	_sspl_lah_00_a
	.addr	_sspl_lah_01_a
	.addr	_sspl_lah_02_a
	.addr	_sspl_lah_01_a
	.addr	_sspl_lah_02_a
	.addr	_sspl_lah_00_a
	.addr	_sspl_lah_01_a
	.addr	_sspl_lah_01_b
	.addr	_sspl_lah_00_b
	.addr	_sspl_lah_01_b
	.addr	_sspl_lah_02_b
	.addr	_sspl_lah_01_b
	.addr	_sspl_lah_02_b
	.addr	_sspl_lah_00_b
	.addr	_sspl_lah_01_b
	.addr	_sspl_pppp_01_a
	.addr	_sspl_pppp_00_a
	.addr	_sspl_pppp_01_a
	.addr	_sspl_pppp_02_a
	.addr	_sspl_pppp_01_a
	.addr	_sspl_pppp_02_a
	.addr	_sspl_pppp_00_a
	.addr	_sspl_pppp_01_a
	.addr	_sspl_pppp_01_b
	.addr	_sspl_pppp_00_b
	.addr	_sspl_pppp_01_b
	.addr	_sspl_pppp_02_b
	.addr	_sspl_pppp_01_b
	.addr	_sspl_pppp_02_b
	.addr	_sspl_pppp_00_b
	.addr	_sspl_pppp_01_b
	.addr	_sspl2_00_a
	.addr	_sspl2_01_a
	.addr	_sspl2_02_a
	.addr	_sspl2_03_a
	.addr	_sspl2_04_a
	.addr	_sspl2_05_a
	.addr	_sspl2_06_a
	.addr	_sspl2_07_a
	.addr	_sspl2_00_b
	.addr	_sspl2_01_b
	.addr	_sspl2_02_b
	.addr	_sspl2_03_b
	.addr	_sspl2_04_b
	.addr	_sspl2_05_b
	.addr	_sspl2_06_b
	.addr	_sspl2_07_b
_sprplempty:
	.byte	$FC
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$80
_spr_items:
	.word	$0000
	.addr	_ssit0_00
	.addr	_ssit0_01
	.addr	_ssit0_02
	.word	$0000
	.addr	_ssit1_00
	.addr	_ssit1_01
	.addr	_ssit1_02
	.word	$0000
	.addr	_ssit2_00
	.addr	_ssit2_01
	.addr	_ssit2_02
	.word	$0000
	.addr	_ssit_lah_00
	.addr	_ssit_lah_01
	.addr	_ssit_lah_02
	.word	$0000
	.addr	_ssit_pppp_00
	.addr	_ssit_pppp_01
	.addr	_ssit_pppp_02
_behs0:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$0A
_behs1:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_jitter:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
_coco_vx_precalc:
	.byte	$A0
	.byte	$00
	.byte	$60
	.byte	$00
_coco_vy_precalc:
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$60
_mypal_game_bg_title:
	.addr	_mypal_game_bg0
	.addr	_mypal_game_bg1
	.addr	_mypal_game_bg7
	.addr	_mypal_game_bg5
	.addr	_mypal_game_bg4
_mypal_game_bg:
	.addr	_mypal_game_bg0
	.addr	_mypal_game_bg1
	.addr	_mypal_game_bg6
	.addr	_mypal_game_bg3
	.addr	_mypal_game_bg4
_mypal_game_bg_ending:
	.addr	_mypal_game_bg0
	.addr	_mypal_game_bg2
	.addr	_mypal_game_bg7
	.addr	_mypal_game_bg3
	.addr	_mypal_game_bg4
_music_track_ingame:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
_lah_title_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A8
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$90
	.byte	$92
	.byte	$93
	.byte	$96
	.byte	$97
	.byte	$00
	.byte	$9A
	.byte	$9C
	.byte	$00
	.byte	$9A
	.byte	$9C
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$8F
	.byte	$01
	.byte	$08
	.byte	$91
	.byte	$94
	.byte	$95
	.byte	$98
	.byte	$99
	.byte	$8F
	.byte	$9B
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$9D
	.byte	$9E
	.byte	$A0
	.byte	$8F
	.byte	$01
	.byte	$09
	.byte	$A1
	.byte	$01
	.byte	$07
	.byte	$A2
	.byte	$A3
	.byte	$A6
	.byte	$A7
	.byte	$AA
	.byte	$AB
	.byte	$AE
	.byte	$A1
	.byte	$01
	.byte	$18
	.byte	$A4
	.byte	$A5
	.byte	$A8
	.byte	$A9
	.byte	$AC
	.byte	$AD
	.byte	$AF
	.byte	$A1
	.byte	$A1
	.byte	$B0
	.byte	$B1
	.byte	$A1
	.byte	$A1
	.byte	$B0
	.byte	$B1
	.byte	$A1
	.byte	$01
	.byte	$08
	.byte	$B2
	.byte	$01
	.byte	$07
	.byte	$B3
	.byte	$B4
	.byte	$B6
	.byte	$B7
	.byte	$BA
	.byte	$BB
	.byte	$B2
	.byte	$01
	.byte	$03
	.byte	$C1
	.byte	$B2
	.byte	$C4
	.byte	$C5
	.byte	$C8
	.byte	$C9
	.byte	$B2
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$B5
	.byte	$B8
	.byte	$B9
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C2
	.byte	$C3
	.byte	$C6
	.byte	$C7
	.byte	$CA
	.byte	$CA
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$CB
	.byte	$CD
	.byte	$CE
	.byte	$D1
	.byte	$D2
	.byte	$00
	.byte	$00
	.byte	$D5
	.byte	$D6
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$CC
	.byte	$CF
	.byte	$D0
	.byte	$D3
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$D7
	.byte	$D8
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$00
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$F7
	.byte	$40
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$45
	.byte	$55
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$AA
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$01
	.byte	$00
_lah_ending_rle:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$B9
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$48
	.byte	$49
	.byte	$48
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$48
	.byte	$49
	.byte	$4C
	.byte	$4D
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$42
	.byte	$02
	.byte	$03
	.byte	$48
	.byte	$49
	.byte	$48
	.byte	$49
	.byte	$48
	.byte	$49
	.byte	$48
	.byte	$49
	.byte	$48
	.byte	$49
	.byte	$48
	.byte	$49
	.byte	$48
	.byte	$49
	.byte	$42
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$52
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$02
	.byte	$0D
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$56
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$57
	.byte	$4E
	.byte	$41
	.byte	$44
	.byte	$52
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$56
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$46
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$62
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$53
	.byte	$43
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$4E
	.byte	$4F
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$4E
	.byte	$44
	.byte	$41
	.byte	$57
	.byte	$46
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$0F
	.byte	$62
	.byte	$45
	.byte	$46
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$4E
	.byte	$4F
	.byte	$46
	.byte	$45
	.byte	$51
	.byte	$46
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$12
	.byte	$62
	.byte	$43
	.byte	$51
	.byte	$46
	.byte	$62
	.byte	$00
	.byte	$45
	.byte	$51
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$45
	.byte	$46
	.byte	$00
	.byte	$02
	.byte	$1E
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$80
	.byte	$A0
	.byte	$A0
	.byte	$28
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$20
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$02
	.byte	$00
_pppp_title_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$E3
	.byte	$E4
	.byte	$E7
	.byte	$E8
	.byte	$00
	.byte	$00
	.byte	$E3
	.byte	$E4
	.byte	$E7
	.byte	$E8
	.byte	$00
	.byte	$00
	.byte	$E3
	.byte	$E4
	.byte	$E7
	.byte	$E8
	.byte	$00
	.byte	$00
	.byte	$E3
	.byte	$E4
	.byte	$E7
	.byte	$E8
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$E5
	.byte	$E6
	.byte	$E9
	.byte	$EA
	.byte	$00
	.byte	$00
	.byte	$E5
	.byte	$E6
	.byte	$E9
	.byte	$EA
	.byte	$00
	.byte	$00
	.byte	$E5
	.byte	$E6
	.byte	$E9
	.byte	$EA
	.byte	$00
	.byte	$00
	.byte	$E5
	.byte	$E6
	.byte	$E9
	.byte	$EA
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$E5
	.byte	$EB
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$E5
	.byte	$EB
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$E5
	.byte	$EB
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$E5
	.byte	$EB
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$EC
	.byte	$ED
	.byte	$00
	.byte	$00
	.byte	$F2
	.byte	$F3
	.byte	$EC
	.byte	$ED
	.byte	$00
	.byte	$00
	.byte	$F2
	.byte	$F3
	.byte	$EC
	.byte	$ED
	.byte	$00
	.byte	$00
	.byte	$F2
	.byte	$F3
	.byte	$EC
	.byte	$ED
	.byte	$00
	.byte	$00
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$45
	.byte	$FF
	.byte	$01
	.byte	$10
	.byte	$55
	.byte	$57
	.byte	$5D
	.byte	$55
	.byte	$57
	.byte	$5D
	.byte	$FF
	.byte	$01
	.byte	$20
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_pppp_ending_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$D7
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$01
	.byte	$E2
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$42
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$40
	.byte	$40
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$42
	.byte	$41
	.byte	$41
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$42
	.byte	$40
	.byte	$41
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$42
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$42
	.byte	$42
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$43
	.byte	$44
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$42
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$42
	.byte	$01
	.byte	$03
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$4E
	.byte	$4F
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$01
	.byte	$0B
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$50
	.byte	$51
	.byte	$4E
	.byte	$4F
	.byte	$43
	.byte	$44
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$43
	.byte	$44
	.byte	$4E
	.byte	$4F
	.byte	$43
	.byte	$44
	.byte	$50
	.byte	$51
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$45
	.byte	$46
	.byte	$50
	.byte	$51
	.byte	$45
	.byte	$46
	.byte	$FF
	.byte	$01
	.byte	$0D
	.byte	$EF
	.byte	$FF
	.byte	$01
	.byte	$06
	.byte	$BB
	.byte	$EE
	.byte	$FF
	.byte	$01
	.byte	$07
	.byte	$EF
	.byte	$FF
	.byte	$01
	.byte	$05
	.byte	$BF
	.byte	$AE
	.byte	$FF
	.byte	$01
	.byte	$05
	.byte	$AB
	.byte	$9A
	.byte	$AE
	.byte	$AF
	.byte	$01
	.byte	$03
	.byte	$AB
	.byte	$6A
	.byte	$05
	.byte	$0A
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$00
_monona_title_rle:
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$6C
	.byte	$41
	.byte	$40
	.byte	$40
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$40
	.byte	$01
	.byte	$0E
	.byte	$41
	.byte	$40
	.byte	$45
	.byte	$46
	.byte	$40
	.byte	$45
	.byte	$46
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$41
	.byte	$40
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$44
	.byte	$41
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$47
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$40
	.byte	$44
	.byte	$48
	.byte	$49
	.byte	$47
	.byte	$44
	.byte	$40
	.byte	$01
	.byte	$06
	.byte	$44
	.byte	$4A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$44
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$40
	.byte	$45
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$4A
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$4C
	.byte	$4D
	.byte	$50
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$4B
	.byte	$4E
	.byte	$4F
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$46
	.byte	$47
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$58
	.byte	$59
	.byte	$5C
	.byte	$5D
	.byte	$60
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$62
	.byte	$64
	.byte	$65
	.byte	$64
	.byte	$65
	.byte	$68
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$57
	.byte	$40
	.byte	$5A
	.byte	$5B
	.byte	$5E
	.byte	$5F
	.byte	$61
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$63
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$67
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$69
	.byte	$6A
	.byte	$6D
	.byte	$6E
	.byte	$71
	.byte	$72
	.byte	$75
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$65
	.byte	$77
	.byte	$65
	.byte	$64
	.byte	$65
	.byte	$68
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$6B
	.byte	$6C
	.byte	$6F
	.byte	$70
	.byte	$73
	.byte	$74
	.byte	$76
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$67
	.byte	$78
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$67
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$79
	.byte	$7A
	.byte	$7D
	.byte	$7E
	.byte	$81
	.byte	$82
	.byte	$85
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$88
	.byte	$68
	.byte	$65
	.byte	$68
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$7B
	.byte	$7C
	.byte	$7F
	.byte	$80
	.byte	$83
	.byte	$84
	.byte	$86
	.byte	$87
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$89
	.byte	$67
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$8A
	.byte	$8C
	.byte	$8D
	.byte	$90
	.byte	$91
	.byte	$8F
	.byte	$94
	.byte	$96
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$8B
	.byte	$8E
	.byte	$8F
	.byte	$92
	.byte	$93
	.byte	$8F
	.byte	$95
	.byte	$97
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$98
	.byte	$99
	.byte	$8F
	.byte	$9C
	.byte	$9D
	.byte	$A0
	.byte	$A1
	.byte	$A4
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$9A
	.byte	$9B
	.byte	$9E
	.byte	$9F
	.byte	$A2
	.byte	$A3
	.byte	$A5
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$A6
	.byte	$A8
	.byte	$A9
	.byte	$AC
	.byte	$AD
	.byte	$AF
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$A7
	.byte	$AA
	.byte	$AB
	.byte	$AE
	.byte	$01
	.byte	$02
	.byte	$B1
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$B2
	.byte	$01
	.byte	$06
	.byte	$B3
	.byte	$B5
	.byte	$B2
	.byte	$AE
	.byte	$01
	.byte	$02
	.byte	$BA
	.byte	$B2
	.byte	$01
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$B4
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$00
	.byte	$01
	.byte	$D4
	.byte	$AA
	.byte	$01
	.byte	$08
	.byte	$2A
	.byte	$AA
	.byte	$CA
	.byte	$FA
	.byte	$BA
	.byte	$AA
	.byte	$AA
	.byte	$FF
	.byte	$33
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$02
	.byte	$FE
	.byte	$FF
	.byte	$77
	.byte	$55
	.byte	$DD
	.byte	$FF
	.byte	$01
	.byte	$04
	.byte	$33
	.byte	$04
	.byte	$00
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$5F
	.byte	$53
	.byte	$54
	.byte	$51
	.byte	$5F
	.byte	$01
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$07
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_monona_ending_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C7
	.byte	$96
	.byte	$97
	.byte	$99
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$95
	.byte	$98
	.byte	$49
	.byte	$9A
	.byte	$9B
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$9C
	.byte	$9E
	.byte	$9F
	.byte	$A1
	.byte	$A2
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$9D
	.byte	$A0
	.byte	$49
	.byte	$A3
	.byte	$A4
	.byte	$A7
	.byte	$49
	.byte	$A8
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$A9
	.byte	$AB
	.byte	$AC
	.byte	$AF
	.byte	$B0
	.byte	$B3
	.byte	$B4
	.byte	$B7
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$AA
	.byte	$AD
	.byte	$AE
	.byte	$B1
	.byte	$B2
	.byte	$B5
	.byte	$B6
	.byte	$B8
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BD
	.byte	$BE
	.byte	$C1
	.byte	$C2
	.byte	$C5
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$BC
	.byte	$BF
	.byte	$C0
	.byte	$C3
	.byte	$C4
	.byte	$C6
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$C7
	.byte	$C8
	.byte	$CB
	.byte	$CC
	.byte	$CF
	.byte	$D0
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$C9
	.byte	$CA
	.byte	$CD
	.byte	$CE
	.byte	$D1
	.byte	$D2
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$D3
	.byte	$D5
	.byte	$D6
	.byte	$D9
	.byte	$DA
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$D4
	.byte	$D7
	.byte	$D8
	.byte	$DB
	.byte	$DC
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$DD
	.byte	$DE
	.byte	$E1
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$DF
	.byte	$E0
	.byte	$E2
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$E4
	.byte	$E5
	.byte	$E8
	.byte	$E9
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$E3
	.byte	$E6
	.byte	$E7
	.byte	$EA
	.byte	$EB
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$04
	.byte	$01
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$F0
	.byte	$FF
	.byte	$01
	.byte	$08
	.byte	$3F
	.byte	$0F
	.byte	$FF
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$04
	.byte	$31
	.byte	$00
	.byte	$CC
	.byte	$FF
	.byte	$01
	.byte	$04
	.byte	$F3
	.byte	$00
	.byte	$FF
	.byte	$01
	.byte	$06
	.byte	$F0
	.byte	$FF
	.byte	$01
	.byte	$0C
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_monono_title_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$74
	.byte	$75
	.byte	$75
	.byte	$77
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$73
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$76
	.byte	$75
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$75
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$7C
	.byte	$73
	.byte	$01
	.byte	$08
	.byte	$7D
	.byte	$01
	.byte	$08
	.byte	$7F
	.byte	$75
	.byte	$01
	.byte	$02
	.byte	$81
	.byte	$7B
	.byte	$00
	.byte	$85
	.byte	$86
	.byte	$89
	.byte	$00
	.byte	$85
	.byte	$86
	.byte	$89
	.byte	$7D
	.byte	$01
	.byte	$08
	.byte	$7E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$80
	.byte	$75
	.byte	$78
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$87
	.byte	$88
	.byte	$8A
	.byte	$84
	.byte	$87
	.byte	$88
	.byte	$8A
	.byte	$7E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$8B
	.byte	$75
	.byte	$77
	.byte	$00
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$00
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$8C
	.byte	$82
	.byte	$79
	.byte	$00
	.byte	$8C
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$90
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$91
	.byte	$92
	.byte	$00
	.byte	$93
	.byte	$94
	.byte	$92
	.byte	$00
	.byte	$93
	.byte	$94
	.byte	$92
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$EB
	.byte	$FF
	.byte	$01
	.byte	$0F
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$5D
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$FF
	.byte	$FF
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$DD
	.byte	$FF
	.byte	$01
	.byte	$19
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_jetpuri_title_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$CD
	.byte	$C1
	.byte	$01
	.byte	$03
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$C1
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$C1
	.byte	$78
	.byte	$82
	.byte	$C1
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$C3
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$C6
	.byte	$01
	.byte	$02
	.byte	$C7
	.byte	$C2
	.byte	$00
	.byte	$C9
	.byte	$C7
	.byte	$C2
	.byte	$00
	.byte	$CB
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$C1
	.byte	$7C
	.byte	$00
	.byte	$C1
	.byte	$7C
	.byte	$C1
	.byte	$C2
	.byte	$00
	.byte	$C1
	.byte	$C2
	.byte	$C1
	.byte	$CE
	.byte	$C1
	.byte	$C2
	.byte	$C1
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$C8
	.byte	$7C
	.byte	$00
	.byte	$CA
	.byte	$C8
	.byte	$7C
	.byte	$00
	.byte	$CC
	.byte	$CD
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$7C
	.byte	$00
	.byte	$C1
	.byte	$7C
	.byte	$C1
	.byte	$7C
	.byte	$00
	.byte	$C1
	.byte	$7C
	.byte	$C1
	.byte	$CF
	.byte	$D0
	.byte	$C4
	.byte	$C1
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$CB
	.byte	$C8
	.byte	$D2
	.byte	$C6
	.byte	$C9
	.byte	$C6
	.byte	$7C
	.byte	$00
	.byte	$CA
	.byte	$82
	.byte	$C4
	.byte	$00
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$CF
	.byte	$D7
	.byte	$C1
	.byte	$7C
	.byte	$00
	.byte	$C1
	.byte	$7C
	.byte	$C1
	.byte	$DA
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$CC
	.byte	$D1
	.byte	$7C
	.byte	$00
	.byte	$CC
	.byte	$CD
	.byte	$CD
	.byte	$D3
	.byte	$CC
	.byte	$CD
	.byte	$CD
	.byte	$D3
	.byte	$C1
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D3
	.byte	$C1
	.byte	$D8
	.byte	$D3
	.byte	$C1
	.byte	$D8
	.byte	$C1
	.byte	$D8
	.byte	$CD
	.byte	$D3
	.byte	$C1
	.byte	$D8
	.byte	$CD
	.byte	$CD
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$82
	.byte	$C4
	.byte	$00
	.byte	$C3
	.byte	$82
	.byte	$01
	.byte	$02
	.byte	$DB
	.byte	$82
	.byte	$01
	.byte	$02
	.byte	$C1
	.byte	$DC
	.byte	$82
	.byte	$01
	.byte	$02
	.byte	$C1
	.byte	$DC
	.byte	$DD
	.byte	$C1
	.byte	$DC
	.byte	$C1
	.byte	$DC
	.byte	$82
	.byte	$82
	.byte	$C1
	.byte	$DC
	.byte	$82
	.byte	$82
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$C1
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$C1
	.byte	$C1
	.byte	$CF
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$C1
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$C3
	.byte	$C4
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$C3
	.byte	$82
	.byte	$DE
	.byte	$C3
	.byte	$82
	.byte	$82
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$82
	.byte	$C4
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$E1
	.byte	$FF
	.byte	$01
	.byte	$09
	.byte	$BF
	.byte	$BF
	.byte	$AF
	.byte	$FF
	.byte	$FF
	.byte	$EF
	.byte	$AA
	.byte	$01
	.byte	$07
	.byte	$FB
	.byte	$FA
	.byte	$BA
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$EA
	.byte	$AA
	.byte	$FF
	.byte	$01
	.byte	$17
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_jetpuri_ending_rle:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$E5
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$44
	.byte	$46
	.byte	$47
	.byte	$4A
	.byte	$4B
	.byte	$4D
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$45
	.byte	$48
	.byte	$49
	.byte	$4C
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$4F
	.byte	$52
	.byte	$53
	.byte	$56
	.byte	$57
	.byte	$5A
	.byte	$5B
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$50
	.byte	$51
	.byte	$54
	.byte	$55
	.byte	$58
	.byte	$59
	.byte	$5C
	.byte	$5D
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$5E
	.byte	$5F
	.byte	$61
	.byte	$62
	.byte	$65
	.byte	$66
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$60
	.byte	$63
	.byte	$64
	.byte	$67
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$6A
	.byte	$6C
	.byte	$6D
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$6B
	.byte	$6E
	.byte	$6F
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$7A
	.byte	$7B
	.byte	$7D
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$75
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$7C
	.byte	$7E
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$7F
	.byte	$81
	.byte	$82
	.byte	$85
	.byte	$86
	.byte	$89
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$80
	.byte	$83
	.byte	$84
	.byte	$87
	.byte	$88
	.byte	$8A
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$8B
	.byte	$8D
	.byte	$00
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$8C
	.byte	$8E
	.byte	$8F
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$15
	.byte	$FF
	.byte	$02
	.byte	$08
	.byte	$0F
	.byte	$0F
	.byte	$CF
	.byte	$FF
	.byte	$02
	.byte	$04
	.byte	$50
	.byte	$55
	.byte	$CC
	.byte	$FF
	.byte	$02
	.byte	$04
	.byte	$55
	.byte	$11
	.byte	$CC
	.byte	$FF
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$CC
	.byte	$FF
	.byte	$02
	.byte	$04
	.byte	$F0
	.byte	$F0
	.byte	$FC
	.byte	$FF
	.byte	$02
	.byte	$0B
	.byte	$0F
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
_l_TOP_ADJUST:
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
_l_SPRITE_ADJUST:
	.byte	$17
	.byte	$F7
	.byte	$17
	.byte	$0F
	.byte	$0F
_l_PLAYER_G:
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
_l_pcharacter:
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$20
	.byte	$30
_l_encelloffset:
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$24
	.byte	$34
_l_pal_spr:
	.addr	_mypal_game_fg0
	.addr	_mypal_game_fg1
	.addr	_mypal_game_fg6
	.addr	_mypal_game_fg3
	.addr	_mypal_game_fg4
_l_hudbaseline:
	.byte	$01
	.byte	$19
	.byte	$01
	.byte	$02
	.byte	$02
_l_PLAYER_AX:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$04
_l_ts_pals:
	.addr	_ts0_pals
	.addr	_ts1_pals
	.addr	_ts4_pals
	.addr	_ts2_pals
	.addr	_ts3_pals
_l_ts_tmaps:
	.addr	_ts0_tmaps
	.addr	_ts1_tmaps
	.addr	_ts4_tmaps
	.addr	_ts2_tmaps
	.addr	_ts3_tmaps
_l_behs:
	.addr	_behs0
	.addr	_behs0+16
	.addr	_behs0
	.addr	_behs1
	.addr	_behs1
_l_n_pant:
	.byte	$05
	.byte	$1C
	.byte	$05
	.byte	$11
	.byte	$05
L3075:
	.byte	$47,$4F,$53,$48,$2C,$20,$59,$4F,$55,$20,$4D,$41,$44,$45,$20,$49
	.byte	$54,$2E,$2E,$2E,$2F,$49,$20,$4D,$45,$41,$4E,$20,$49,$54,$2C,$20
	.byte	$57,$54,$46,$3F,$2F,$49,$20,$4E,$45,$56,$45,$52,$20,$54,$48,$4F
	.byte	$55,$47,$48,$54,$20,$53,$4F,$4D,$45,$42,$4F,$44,$59,$2F,$57,$4F
	.byte	$55,$4C,$44,$20,$45,$4E,$44,$55,$52,$45,$20,$54,$48,$49,$53,$20
	.byte	$47,$41,$4D,$45,$2F,$43,$4F,$4E,$47,$52,$41,$54,$55,$4C,$41,$54
	.byte	$49,$4F,$4E,$53,$2F,$54,$48,$45,$20,$4E,$45,$58,$54,$20,$43,$4F
	.byte	$50,$41,$20,$44,$45,$4C,$20,$4D,$45,$41,$4F,$2F,$57,$49,$4C,$4C
	.byte	$20,$42,$45,$20,$46,$4F,$52,$20,$59,$4F,$55,$2E,$2F,$54,$41,$4B
	.byte	$45,$20,$41,$20,$53,$43,$52,$45,$45,$4E,$53,$48,$4F,$54,$2F,$41
	.byte	$4E,$44,$20,$54,$45,$4C,$4C,$20,$55,$53,$21,$00
L3054:
	.byte	$4A,$45,$54,$20,$50,$55,$52,$49,$21,$21,$2F,$2F,$59,$4F,$55,$20
	.byte	$4D,$41,$44,$45,$20,$49,$54,$21,$2F,$2F,$4E,$4F,$57,$20,$53,$4F
	.byte	$4D,$45,$42,$4F,$44,$59,$2F,$2F,$53,$48,$4F,$55,$4C,$44,$20,$42
	.byte	$55,$47,$20,$54,$48,$45,$2F,$2F,$4D,$4F,$4A,$4F,$4E,$20,$54,$57
	.byte	$49,$4E,$53,$2F,$2F,$53,$4F,$20,$54,$48,$45,$59,$20,$47,$49,$56
	.byte	$45,$20,$59,$41,$2F,$2F,$41,$20,$50,$52,$4F,$50,$45,$52,$20,$47
	.byte	$41,$4D,$45,$21,$00
L3028:
	.byte	$4E,$47,$41,$20,$44,$4E,$41,$20,$44,$4F,$4E,$47,$4F,$20,$42,$4F
	.byte	$4E,$47,$4F,$21,$2F,$2F,$20,$20,$47,$41,$4E,$47,$41,$20,$4D,$4F
	.byte	$4A,$49,$4E,$47,$41,$4E,$47,$41,$2F,$2F,$44,$45,$4E,$20,$43,$41
	.byte	$47,$41,$4C,$45,$52,$41,$20,$43,$48,$55,$4E,$47,$41,$21,$00
L2FF9:
	.byte	$40,$20,$32,$30,$31,$36,$20,$54,$48,$45,$20,$4D,$4F,$4A,$4F,$4E
	.byte	$20,$54,$57,$49,$4E,$53,$2F,$20,$50,$55,$42,$4C,$49,$53,$48,$45
	.byte	$44,$20,$42,$59,$20,$58,$49,$4E,$20,$58,$49,$4E,$00
L2FEE:
	.byte	$5B,$53,$54,$41,$52,$54,$5D,$20,$20,$20,$4E,$45,$57,$20,$47,$41
	.byte	$4D,$45,$2F,$5B,$53,$45,$4C,$45,$43,$54,$5D,$20,$20,$43,$4F,$4E
	.byte	$54,$49,$4E,$55,$45,$00
L2FE3:
	.byte	$50,$45,$54,$55,$4C,$41,$4E,$54,$20,$50,$55,$47,$53,$4C,$41,$59
	.byte	$22,$53,$2F,$20,$50,$4F,$57,$45,$52,$46,$55,$4C,$20,$50,$41,$52
	.byte	$41,$44,$45,$53,$00
L304B:
	.byte	$47,$4F,$4F,$44,$20,$4A,$4F,$42,$2C,$20,$59,$4F,$55,$20,$41,$52
	.byte	$45,$2F,$2F,$54,$48,$45,$20,$53,$54,$52,$4F,$4E,$47,$45,$53,$54
	.byte	$21,$21,$21,$00
L25C1:
	.byte	$27,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$28
	.byte	$00
L25C3:
	.byte	$29,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A
	.byte	$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2B
	.byte	$00
L25BF:
	.byte	$23,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
	.byte	$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$25
	.byte	$00
L3023:
	.byte	$50,$4C,$41,$54,$41,$4E,$4F,$4E,$47,$41,$20,$4E,$47,$41,$20,$4E
	.byte	$47,$41,$53,$00
L2FC3:
	.byte	$5B,$53,$54,$41,$52,$54,$5D,$20,$20,$42,$45,$47,$49,$4E,$00
L2FCA:
	.byte	$5B,$53,$45,$4C,$45,$43,$54,$5D,$20,$43,$4F,$4E,$54,$2E,$00
L2FF4:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$21,$00
L2FFF:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00
L391A:
	.byte	$4F,$42,$4A,$45,$43,$54,$53,$3A,$00
L38D7:
	.byte	$42,$41,$4E,$41,$4E,$41,$53,$5C,$00
L38E4:
	.byte	$57,$57,$46,$4F,$52,$42,$53,$5C,$00
L3901:
	.byte	$43,$52,$59,$53,$54,$41,$4C,$5C,$00
L38E9:
	.byte	$4C,$49,$56,$45,$53,$5C,$00
L38DC:
	.byte	$4D,$4F,$4E,$4F,$53,$5C,$00
L3906:
	.byte	$53,$54,$45,$45,$4D,$5C,$00
L301E:
	.byte	$4D,$4F,$4E,$4F,$4E,$4F,$00
L3915:
	.byte	$4B,$45,$59,$53,$3A,$00
L3921:
	.byte	$4B,$45,$59,$53,$5C,$00
L3910:
	.byte	$4C,$49,$46,$45,$3A,$00
L306C:
	.byte	$43,$41,$43,$41,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_SPRITE_ADJUST:
	.res	1,$00
_TOP_ADJUST:
	.res	1,$00
_PLAYER_G:
	.res	1,$00
_PLAYER_AX:
	.res	1,$00
_oam_index:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_pad0:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_bi:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdct:
	.res	1,$00
_rdyb:
	.res	1,$00
_gpint:
	.res	2,$00
_gpsint:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_aux:
	.res	2,$00
_gp_map:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_addr:
	.res	2,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_ul:
	.res	2,$00
_cx1:
	.res	1,$00
_cy1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy2:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_caux:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
_en_t:
	.res	3,$00
_en_hl:
	.res	3,$00
_en_v:
	.res	3,$00
_en_state:
	.res	3,$00
_en_gen_life:
	.res	3,$00
_en_life:
	.res	3,$00
_en_washit:
	.res	3,$00
_en_gen_washit:
	.res	3,$00
_en_fishing:
	.res	3,$00
_en_s:
	.res	3,$00
_en_dying:
	.res	3,$00
_en_gen_dying:
	.res	3,$00
_en_facing:
	.res	3,$00
_spr_x:
	.res	1,$00
_spr_y:
	.res	1,$00
_spr_id:
	.res	1,$00
_en_fr:
	.res	1,$00
_enoffs:
	.res	1,$00
_genflipflop:
	.res	1,$00
_is_platform:
	.res	1,$00
_encelloffset:
	.res	1,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pcx:
	.res	2,$00
_pcy:
	.res	2,$00
_pvx:
	.res	1,$00
_pvy:
	.res	2,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pthrust:
	.res	1,$00
_pjb:
	.res	1,$00
_pfiring:
	.res	1,$00
_phit:
	.res	1,$00
_pflickering:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfacingh:
	.res	1,$00
_pfacingv:
	.res	1,$00
_pfacinglast:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_pregotten:
	.res	1,$00
_pfixct:
	.res	1,$00
_psprid:
	.res	1,$00
_pcharacter:
	.res	1,$00
_pvylast:
	.res	2,$00
_pgtmx:
	.res	1,$00
_pgtmy:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_itcelloffset:
	.res	1,$00
_sstart:
	.res	1,$00
_coco_x:
	.res	6,$00
_coco_y:
	.res	6,$00
_coco_vx:
	.res	6,$00
_coco_vy:
	.res	6,$00
_coco_flag:
	.res	3,$00
_coco_it:
	.res	1,$00
_inverted_screen:
	.res	1,$00
_game_jet_puri:
	.res	1,$00
_game_monono:
	.res	1,$00
_game_monona:
	.res	1,$00
_game_pppp:
	.res	1,$00
.segment	"BSS"
_ticks:
	.res	1,$00
_halfticks:
	.res	1,$00
_game_time:
	.res	1,$00
_ticker:
	.res	1,$00
_display:
	.res	1,$00
_flash:
	.res	1,$00
_update_list:
	.res	97,$00
_fader:
	.res	1,$00
_attr_table:
	.res	64,$00
_first_time:
	.res	1,$00
_c_map:
	.res	2,$00
_c_decos:
	.res	2,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_n_bolts:
	.res	1,$00
_max_hotspots_type_1:
	.res	1,$00
_level:
	.res	1,$00
_do_game:
	.res	1,$00
_game_state:
	.res	1,$00
_game_res:
	.res	1,$00
_scr_buff:
	.res	192,$00
_scr_attr:
	.res	208,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_evil_tile_hit:
	.res	1,$00
_ep_x:
	.res	90,$00
_ep_y:
	.res	90,$00
_ep_mx:
	.res	90,$00
_ep_my:
	.res	90,$00
_ep_it:
	.res	2,$00
_pkilled:
	.res	1,$00
_plife:
	.res	1,$00
_oplife:
	.res	1,$00
_pobjs:
	.res	1,$00
_opobjs:
	.res	1,$00
_pkeys:
	.res	1,$00
_opkeys:
	.res	1,$00
_b_x:
	.res	8,$00
_b_y:
	.res	8,$00
_b_mx:
	.res	8,$00
_b_my:
	.res	8,$00
_b_ac:
	.res	8,$00
_b_slots:
	.res	8,$00
_b_slot:
	.res	1,$00
_infested:
	.res	1,$00
_generators_active:
	.res	1,$00
_infsx:
	.res	1,$00
_infsy:
	.res	1,$00
_hact:
	.res	30,$00
_hr_hit:
	.res	1,$00
_lkact:
	.res	8,$00
_hudbaseline:
	.res	1,$00
_please_continue:
	.res	1,$00
_already_played:
	.res	1,$00
_fumettos_life:
	.res	8,$00
_fumettos_x:
	.res	8,$00
_fumettos_y:
	.res	8,$00
_thrustct:
	.res	1,$00
_rn_pant:
	.res	1,$00
_map_w:
	.res	1,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_ct:
	.res	3,$00

; ---------------------------------------------------------------
; void __near__ m113_comm_pool_checksum_calculate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_m113_comm_pool_checksum_calculate: near

.segment	"CODE"

;
; rda = 0; for (gpit = 1; gpit < 15; gpit ++) rda += COMM_POOL [gpit];
;
	lda     #$00
	sta     _rda
	lda     #$01
L3AC3:	sta     _gpit
	cmp     #$0F
	bcs     L2D9E
	ldx     #$03
	lda     #$00
	ldy     _gpit
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     _rda
	sta     _rda
	lda     _gpit
	clc
	adc     #$01
	jmp     L3AC3
;
; }
;
L2D9E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ m113_safe_change_chr_bank (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_m113_safe_change_chr_bank: near

.segment	"CODE"

;
; void m113_safe_change_chr_bank (unsigned char chr) {
;
	jsr     pusha
;
; rda = COMM_REG & 0xb8; // MCPPPCCC -> 10111000
;
	ldx     #$03
	lda     #$00
	sta     ptr1
	stx     ptr1+1
	tay
	lda     (ptr1),y
	and     #$B8
	sta     _rda
;
; if (chr & 8) { rda |= 0x40; chr &= 0x7; }
;
	lda     (sp),y
	and     #$08
	beq     L2DB0
	lda     _rda
	ora     #$40
	sta     _rda
	lda     (sp),y
	and     #$07
	sta     (sp),y
;
; rda |= chr;
;
L2DB0:	lda     (sp),y
	ora     _rda
	sta     _rda
;
; COMM_REG = rda; 
;
	sta     (ptr1),y
;
; __asm__ ("jmp _change_reg");
;
	jmp     _change_reg

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ m113_comm_pool_checksum_check (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_m113_comm_pool_checksum_check: near

.segment	"CODE"

;
; m113_comm_pool_checksum_calculate (); // Written to rda
;
	jsr     _m113_comm_pool_checksum_calculate
;
; return (COMM_CHECKSUM == rda);
;
	ldx     #$03
	lda     #$00
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	lda     (ptr1),y
	cmp     _rda
	jmp     booleq

.endproc

; ---------------------------------------------------------------
; void __near__ m113_handle_reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_m113_handle_reset: near

.segment	"CODE"

;
; if (m113_comm_pool_checksum_check ()) {
;
	jsr     _m113_comm_pool_checksum_check
	tax
	beq     L3AC5
;
; COMM_CHECKSUM = 0xff;     // Bad
;
	ldx     #$03
	lda     #$00
	sta     ptr1
	stx     ptr1+1
	lda     #$FF
	ldy     #$0F
	sta     (ptr1),y
;
; return;
;
	rts
;
; COMM_GAME_SELECT = 0x00;
;
L3AC5:	ldy     #$01
	sta     (ptr1),y
;
; COMM_REG = 0x80; // MCPPPCCC
;
	lda     #$80
	dey
	sta     (ptr1),y
;
; __asm__ ("jmp _change_rom");
;
	jmp     _change_rom

.endproc

; ---------------------------------------------------------------
; void __near__ m113_comm_pool_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_m113_comm_pool_init: near

.segment	"CODE"

;
; for (gpit = 1; gpit < 15; gpit ++) COMM_POOL [gpit] = gpit;
;
	lda     #$01
L3AC7:	sta     _gpit
	cmp     #$0F
	bcs     L2DDC
	ldy     _gpit
	lda     _gpit
	sta     $0300,y
	lda     _gpit
	clc
	adc     #$01
	jmp     L3AC7
;
; }
;
L2DDC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ m113_comm_pool_checksum_write (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_m113_comm_pool_checksum_write: near

.segment	"CODE"

;
; m113_comm_pool_checksum_calculate (); // Written to rda
;
	jsr     _m113_comm_pool_checksum_calculate
;
; COMM_CHECKSUM = rda;
;
	ldx     #$03
	lda     #$00
	sta     ptr1
	stx     ptr1+1
	lda     _rda
	ldy     #$0F
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ m113_rom_pair_jump (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_m113_rom_pair_jump: near

.segment	"CODE"

;
; void m113_rom_pair_jump (unsigned char prg, unsigned char chr) {
;
	jsr     pusha
;
; rda = 0x00; if (chr & 8) { rda |= 0x40; chr &= 0x7; }
;
	lda     #$00
	sta     _rda
	tay
	lda     (sp),y
	and     #$08
	beq     L2DF2
	lda     _rda
	ora     #$40
	sta     _rda
	lda     (sp),y
	and     #$07
	sta     (sp),y
;
; rda |= (prg << 3); 
;
L2DF2:	iny
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	ora     _rda
	sta     _rda
;
; rda |= chr;
;
	dey
	lda     (sp),y
	ora     _rda
	sta     _rda
;
; COMM_REG = rda; 
;
	ldx     #$03
	sty     ptr1
	stx     ptr1+1
	lda     _rda
	sta     (ptr1),y
;
; __asm__ ("jmp _change_rom");
;
	jmp     _change_rom

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; void fade_out (void) { fader = 5; while (fader --) { pal_bright (fader); ppu_wait_frame (); } }
;
	lda     #$05
	sta     _fader
	jmp     L3AC8
L2E07:	lda     _fader
	jsr     _pal_bright
	jsr     _ppu_wait_frame
L3AC8:	lda     _fader
	pha
	sec
	sbc     #$01
	sta     _fader
	pla
	tax
	bne     L2E07
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; void fade_in (void) { fader = 5; while (fader --) { pal_bright (4 - fader); ppu_wait_frame (); } }
;
	lda     #$05
	sta     _fader
	jmp     L3AC9
L2E12:	lda     #$04
	jsr     pusha0
	lda     _fader
	bpl     L2E19
	ldx     #$FF
L2E19:	jsr     tossubax
	jsr     _pal_bright
	jsr     _ppu_wait_frame
L3AC9:	lda     _fader
	pha
	sec
	sbc     #$01
	sta     _fader
	pla
	tax
	bne     L2E12
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; void cls (void) { vram_adr (0x2000); vram_fill (255,0x400); }
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$FF
	jsr     pusha
	ldx     #$04
	lda     #$00
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ reset_attributes (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_attributes: near

.segment	"CODE"

;
; gpit = 64; while (gpit --) attr_table [gpit] = 0xff;
;
	lda     #$40
	sta     _gpit
	jmp     L3ACA
L2E24:	ldy     _gpit
	lda     #$FF
	sta     _attr_table,y
L3ACA:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	bne     L2E24
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ show_attributes (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_attributes: near

.segment	"CODE"

;
; vram_adr (NAMETABLE_A + 0x03c0);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_write (attr_table, 64);
;
	lda     #<(_attr_table)
	ldx     #>(_attr_table)
	jsr     pushax
	ldx     #$00
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ write_attr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_write_attr: near

.segment	"CODE"

;
; rdc = (rdx >> 2) + ((rdy >> 2) << 3);
;
	ldx     #$00
	lda     _rdx
	lsr     a
	lsr     a
	sta     ptr1
	stx     ptr1+1
	lda     _rdy
	lsr     a
	lsr     a
	jsr     aslax3
	clc
	adc     ptr1
	sta     _rdc
	txa
	adc     ptr1+1
;
; rdb = ((rdx >> 1) & 1) + (((rdy >> 1) & 1) << 1);
;
	lda     _rdx
	lsr     a
	and     #$01
	sta     ptr1
	lda     _rdy
	lsr     a
	and     #$01
	asl     a
	bcc     L3ACE
	clc
L3ACE:	adc     ptr1
	sta     _rdb
;
; rda = attr_table [rdc];
;
	ldy     _rdc
	lda     _attr_table,y
	sta     _rda
;
; rda = (rda & bitmasks [rdb]) | (c_ts_pals [rdt] << (rdb << 1));
;
	ldy     _rdb
	ldx     #$00
	lda     _bitmasks,y
	and     _rda
	sta     sreg
	stx     sreg+1
	lda     _c_ts_pals
	ldx     _c_ts_pals+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sta     ptr1
	lda     _rdb
	asl     a
	tay
	lda     ptr1
	jsr     aslaxy
	ora     sreg
	sta     _rda
	txa
	ora     sreg+1
;
; attr_table [rdc] = rda;
;
	ldy     _rdc
	lda     _rda
	sta     _attr_table,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_write (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_write: near

.segment	"CODE"

;
; void update_list_write (unsigned char a) {
;
	jsr     pusha
;
; *ul ++ = MSB(gp_addr);
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E51
	inx
L2E51:	sta     _ul
	stx     _ul+1
	lda     _gp_addr+1
	ldy     #$00
	sta     (regsave),y
;
; *ul ++ = LSB(gp_addr++);
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E56
	inx
L2E56:	sta     _ul
	stx     _ul+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	clc
	adc     #$01
	bcc     L2E5A
	inx
L2E5A:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldy     #$00
	jsr     staspidx
;
; *ul ++ = a;
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E5C
	inx
L2E5C:	sta     _ul
	stx     _ul+1
	ldy     #$00
	lda     (sp),y
	sta     (regsave),y
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; write_attr ();
;
	jsr     _write_attr
;
; gp_tmap = (unsigned char *) c_ts_tmaps + (rdt << 2);
;
	ldx     #$00
	lda     _rdt
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((rdy << 5) + rdx + 0x2000);
;
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _rdx
	bcc     L3ACF
	inx
L3ACF:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr++);
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E69
	inx
L2E69:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E6C
	inx
L2E6C:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E6F
	inx
L2E6F:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L2E72
	inc     _gp_addr+1
;
; vram_adr (gp_addr++);
;
L2E72:	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E75
	inx
L2E75:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E78
	inx
L2E78:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap); 
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile_advance (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile_advance: near

.segment	"CODE"

;
; draw_tile (); rdx = (rdx + 2) & 31; if (!rdx) rdy += 2;
;
	jsr     _draw_tile
	lda     _rdx
	clc
	adc     #$02
	and     #$1F
	sta     _rdx
	lda     _rdx
	bne     L2E81
	lda     #$02
	clc
	adc     _rdy
	sta     _rdy
;
; }
;
L2E81:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_horz_2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_horz_2: near

.segment	"CODE"

;
; *ul ++ = MSB (gp_addr) | NT_UPD_HORZ;
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E87
	inx
L2E87:	sta     _ul
	stx     _ul+1
	lda     _gp_addr+1
	ora     #$40
	ldy     #$00
	sta     (regsave),y
;
; *ul ++ = LSB (gp_addr);
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E8C
	inx
L2E8C:	sta     _ul
	stx     _ul+1
	lda     _gp_addr
	sta     (regsave),y
;
; *ul ++ = 2; 
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2E91
	inx
L2E91:	sta     _ul
	stx     _ul+1
	lda     #$02
	sta     (regsave),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; write_attr ();
;
	jsr     _write_attr
;
; gp_addr = 0x23c0 + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; update_list_write (rda);
;
	lda     _rda
	jsr     _update_list_write
;
; gp_tmap = (unsigned char *) c_ts_tmaps + (rdt << 2);
;
	ldx     #$00
	lda     _rdt
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((rdy << 5) + rdx + 0x2000);
;
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _rdx
	bcc     L3AD0
	inx
L3AD0:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; update_list_horz_2 ();
;
	jsr     _update_list_horz_2
;
; *ul ++ = *gp_tmap ++;
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2EA2
	inx
L2EA2:	sta     _ul
	stx     _ul+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2EA4
	inx
L2EA4:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; *ul ++ = *gp_tmap ++;
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2EA6
	inx
L2EA6:	sta     _ul
	stx     _ul+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2EA8
	inx
L2EA8:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; gp_addr += 32;
;
	lda     #$20
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L2EAB
	inc     _gp_addr+1
;
; update_list_horz_2 ();
;
L2EAB:	jsr     _update_list_horz_2
;
; *ul ++ = *gp_tmap ++;
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2EAE
	inx
L2EAE:	sta     _ul
	stx     _ul+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2EB0
	inx
L2EB0:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; *ul ++ = *gp_tmap;
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2EB2
	inx
L2EB2:	sta     _ul
	stx     _ul+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jmp     staspidx

.endproc

; ---------------------------------------------------------------
; void __near__ set_map_tile (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_map_tile: near

.segment	"CODE"

;
; void set_map_tile (unsigned char x, unsigned char y, unsigned char t) {
;
	jsr     pusha
;
; rdx = x + x; rdy = y + y + TOP_ADJUST; rdt = t;
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     (sp),y
	sta     _rdx
	dey
	lda     (sp),y
	clc
	adc     (sp),y
	clc
	adc     _TOP_ADJUST
	sta     _rdy
	dey
	lda     (sp),y
	sta     _rdt
;
; scr_buff [x + (y << 4)] = rdt; scr_attr [x + (y << 4)] = c_behs [rdt];
;
	ldx     #$00
	iny
	lda     (sp),y
	jsr     aslax4
	clc
	iny
	adc     (sp),y
	bcc     L3AD7
	inx
	clc
L3AD7:	adc     #<(_scr_buff)
	sta     ptr1
	txa
	adc     #>(_scr_buff)
	sta     ptr1+1
	lda     _rdt
	ldy     #$00
	sta     (ptr1),y
	ldx     #$00
	iny
	lda     (sp),y
	jsr     aslax4
	clc
	iny
	adc     (sp),y
	bcc     L3AD8
	inx
	clc
L3AD8:	adc     #<(_scr_attr)
	tay
	txa
	adc     #>(_scr_attr)
	tax
	tya
	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; update_list_tile ();
;
	jsr     _update_list_tile
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ p_t2 (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t2: near

.segment	"CODE"

;
; void p_t2 (unsigned char x, unsigned char y, unsigned char n) {
;
	jsr     pusha
;
; gp_addr = NAMETABLE_A + (y << 5) + x;
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     tmp1
	clc
	adc     #$20
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L3AD9
	inx
L3AD9:	sta     _gp_addr
	stx     _gp_addr+1
;
; *ul ++ = MSB (gp_addr) | NT_UPD_HORZ;
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2ECA
	inx
L2ECA:	sta     _ul
	stx     _ul+1
	lda     _gp_addr+1
	ora     #$40
	ldy     #$00
	sta     (regsave),y
;
; *ul ++ = LSB (gp_addr);
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2ECF
	inx
L2ECF:	sta     _ul
	stx     _ul+1
	lda     _gp_addr
	sta     (regsave),y
;
; *ul ++ = 2; 
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2ED4
	inx
L2ED4:	sta     _ul
	stx     _ul+1
	lda     #$02
	sta     (regsave),y
;
; *ul ++ = DIGIT ((n / 10));
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2ED7
	inx
L2ED7:	sta     _ul
	stx     _ul+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	ldy     #$00
	jsr     staspidx
;
; *ul ++ = DIGIT ((n % 10));
;
	lda     _ul
	ldx     _ul+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2EDE
	inx
L2EDE:	sta     _ul
	stx     _ul+1
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ advance_worm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_advance_worm: near

.segment	"CODE"

;
; scr_buff [gpit] = rdt; scr_attr [gpit] = c_behs [rdt]; draw_tile_advance (); gpit ++;
;
	ldy     _gpit
	lda     _rdt
	sta     _scr_buff,y
	lda     #<(_scr_attr)
	ldx     #>(_scr_attr)
	clc
	adc     _gpit
	bcc     L2EEB
	inx
L2EEB:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	jsr     _draw_tile_advance
	lda     _gpit
	clc
	adc     #$01
	sta     _gpit
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; set_rand (1 + n_pant);
;
	ldx     #$00
	lda     _n_pant
	clc
	adc     #$01
	bcc     L2EF3
	inx
L2EF3:	jsr     _set_rand
;
; rn_pant = n_pant;
;
	ldx     #$00
	lda     _n_pant
	sta     _rn_pant
;
; if (inverted_screen) {
;
	lda     _inverted_screen
	beq     L3AE8
;
; if (n_pant < 6) rn_pant = 12 + n_pant;
;
	lda     _n_pant
	cmp     #$06
	bcs     L3AE7
	clc
	adc     #$0C
;
; else if (n_pant > 11) rn_pant = n_pant - 12;
;
	jmp     L3AE2
L3AE7:	lda     _n_pant
	cmp     #$0C
	bcc     L3AE8
	sec
	sbc     #$0C
L3AE2:	sta     _rn_pant
;
; gp_map = (unsigned char *) c_map + (rn_pant << 6) + (rn_pant << 5); 
;
L3AE8:	lda     _rn_pant
	jsr     aslax4
	jsr     aslax2
	clc
	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldx     #$00
	lda     _rn_pant
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	sta     _gp_map
	lda     tmp1
	adc     ptr1+1
	sta     _gp_map+1
;
; if (inverted_screen) {
;
	lda     _inverted_screen
	beq     L2F07
;
; for (rdyb = 11; rdyb < 0xff; rdyb --) {
;
	lda     #$0B
L3AF0:	sta     _rdyb
	cmp     #$FF
	jcs     L2F2E
;
; rdy = TOP_ADJUST + rdyb + rdyb; gpit = rdyb << 4; rdx = 0;
;
	lda     _TOP_ADJUST
	clc
	adc     _rdyb
	bcc     L3AE3
	clc
L3AE3:	adc     _rdyb
	sta     _rdy
	lda     _rdyb
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _gpit
	lda     #$00
	sta     _rdx
;
; gpjt = 8; while (gpjt --) {
;
	lda     #$08
	sta     _gpjt
	jmp     L3AEA
;
; rdct = *gp_map ++;
;
L2F19:	lda     _gp_map
	ldx     _gp_map+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2F1F
	inx
L2F1F:	sta     _gp_map
	stx     _gp_map+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdct
;
; rdt = rdct >> 4; advance_worm ();
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _rdt
	jsr     _advance_worm
;
; rdt = rdct & 15; advance_worm ();
;
	lda     _rdct
	and     #$0F
	sta     _rdt
	jsr     _advance_worm
;
; gpjt = 8; while (gpjt --) {
;
L3AEA:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L2F19
;
; for (rdyb = 11; rdyb < 0xff; rdyb --) {
;
	lda     _rdyb
	sec
	sbc     #$01
	jmp     L3AF0
;
; gpit = 0; rdx = 0; rdy = TOP_ADJUST;
;
L2F07:	sta     _gpit
	sta     _rdx
	lda     _TOP_ADJUST
	sta     _rdy
;
; while (gpit < 192) {
;
	jmp     L3AEB
;
; rdct = *gp_map ++;
;
L2F2D:	lda     _gp_map
	ldx     _gp_map+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2F33
	inx
L2F33:	sta     _gp_map
	stx     _gp_map+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdct
;
; rdt = rdct >> 4; advance_worm ();
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _rdt
	jsr     _advance_worm
;
; rdt = rdct & 15; advance_worm ();
;
	lda     _rdct
	and     #$0F
	sta     _rdt
	jsr     _advance_worm
;
; while (gpit < 192) {
;
L3AEB:	lda     _gpit
	cmp     #$C0
	bcc     L2F2D
;
; if (c_decos && c_decos [rn_pant]) {
;
L2F2E:	lda     _c_decos
	ora     _c_decos+1
	beq     L3AED
	ldx     #$00
	lda     _rn_pant
	asl     a
	bcc     L3AE4
	inx
	clc
L3AE4:	adc     _c_decos
	pha
	txa
	adc     _c_decos+1
	tax
	pla
	ldy     #$00
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	bne     L2F3B
L3AED:	rts
;
; gp_gen = (unsigned char *) c_decos [rn_pant];
;
L2F3B:	ldx     #$00
	lda     _rn_pant
	asl     a
	bcc     L3AE5
	inx
	clc
L3AE5:	adc     _c_decos
	sta     ptr1
	txa
	adc     _c_decos+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
;
; while (rdt = *gp_gen ++) {
;
	jmp     L2F44
;
; if (rdt & 0x80) {
;
L2F42:	lda     _rdt
	and     #$80
	beq     L2F48
;
; rdt &= 0x7F;
;
	lda     _rdt
	and     #$7F
	sta     _rdt
;
; rdct = 1;
;
	lda     #$01
	sta     _rdct
;
; } else {
;
	jmp     L3AEF
;
; rdct = *gp_gen ++;
;
L2F48:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2F51
	inx
L2F51:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdct
;
; while (rdct --) {
;
	jmp     L3AEF
;
; gpit = *gp_gen ++;
;
L2F52:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2F58
	inx
L2F58:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
;
; rdx = gpit & 15; 
;
	and     #$0F
	sta     _rdx
;
; rdy = gpit >> 4; if (inverted_screen) {
;
	lda     _gpit
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _rdy
	lda     _inverted_screen
	beq     L3AEE
;
; rdy = 11 - rdy;
;
	lda     #$0B
	sec
	sbc     _rdy
	sta     _rdy
;
; gpit = (rdy << 4) | rdx;
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	lda     _rdx
	ora     ptr1
	sta     _gpit
;
; rdx = rdx + rdx; rdy = TOP_ADJUST + rdy + rdy;
;
L3AEE:	lda     _rdx
	clc
	adc     _rdx
	sta     _rdx
	lda     _TOP_ADJUST
	clc
	adc     _rdy
	bcc     L3AE6
	clc
L3AE6:	adc     _rdy
	sta     _rdy
;
; advance_worm ();
;
	jsr     _advance_worm
;
; while (rdct --) {
;
L3AEF:	lda     _rdct
	pha
	sec
	sbc     #$01
	sta     _rdct
	pla
	tax
	bne     L2F52
;
; while (rdt = *gp_gen ++) {
;
L2F44:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2F47
	inx
L2F47:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
	tax
	jne     L2F42
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_s (unsigned char, unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_s: near

.segment	"CODE"

;
; void p_s (unsigned char x, unsigned char y, unsigned char *s) {
;
	jsr     pushax
;
; vram_adr (NAMETABLE_A + (y << 5) + x);
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     tmp1
	clc
	adc     #$20
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L3AF1
	inx
L3AF1:	jsr     _vram_adr
;
; while (rda = *s ++) {
;
	jmp     L2F6F
;
; if (rda == '/') {
;
L2F6D:	lda     _rda
	cmp     #$2F
	bne     L3AF3
;
; y ++; vram_adr (NAMETABLE_A + (y << 5) + x);
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     tmp1
	clc
	adc     #$20
	sta     ptr1+1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L3AF2
	inx
L3AF2:	jsr     _vram_adr
;
; } else vram_put (rda - 32);
;
	jmp     L2F6F
L3AF3:	lda     _rda
	sec
	sbc     #$20
	jsr     _vram_put
;
; while (rda = *s ++) {
;
L2F6F:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2F72
	inx
L2F72:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	tax
	bne     L2F6D
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ enter_screen (__near__ const unsigned char *, __near__ __near__ function returning void *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enter_screen: near

.segment	"CODE"

;
; void enter_screen (const unsigned char *pal, void (*func) (void)) {
;
	jsr     pushax
;
; scroll (0, 0);
;
	jsr     push0
	jsr     _scroll
;
; cls ();
;
	jsr     _cls
;
; reset_attributes ();
;
	jsr     _reset_attributes
;
; (*func) ();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; pal_bg (pal);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _pal_bg
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; fade_in ();
;
	jsr     _fade_in
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ exit_cleanly (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_exit_cleanly: near

.segment	"CODE"

;
; oam_hide_rest (0);
;
	lda     #$00
	jsr     _oam_hide_rest
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; ppu_off (); 
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ wait_time_or_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_time_or_input: near

.segment	"CODE"

;
; rda = (pad_poll (0) != 0);
;
	lda     #$00
	jsr     _pad_poll
	cmp     #$00
	jsr     boolne
	sta     _rda
;
; while (game_time) {
;
	jmp     L2F96
;
; ticker ++; if (ticker == ticks) {
;
L2F94:	lda     _ticker
	clc
	adc     #$01
	sta     _ticker
	lda     _ticks
	cmp     _ticker
	bne     L2F99
;
; ticker = 0;
;
	lda     #$00
	sta     _ticker
;
; game_time --;
;
	lda     _game_time
	sec
	sbc     #$01
	sta     _game_time
;
; if (pad_poll (0)) {
;
L2F99:	lda     #$00
	jsr     _pad_poll
	tax
	beq     L3AF6
;
; if (!rda) break;
;
	lda     _rda
	bne     L2FA3
	rts
;
; rda = 0;
;
L3AF6:	sta     _rda
;
; ppu_wait_frame ();
;
L2FA3:	jsr     _ppu_wait_frame
;
; while (game_time) {
;
L2F96:	lda     _game_time
	bne     L2F94
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_screen (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_screen: near

.segment	"CODE"

;
; void do_screen (unsigned char seconds) {
;
	jsr     pusha
;
; game_time = seconds; ticker = 0;
;
	ldy     #$00
	lda     (sp),y
	sta     _game_time
	sty     _ticker
;
; wait_time_or_input ();
;
	jsr     _wait_time_or_input
;
; exit_cleanly ();
;
	jsr     _exit_cleanly
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ screen_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_title: near

.segment	"CODE"

;
; rdy = 24;
;
	lda     #$18
	sta     _rdy
;
; switch (level) {
;
	lda     _level
;
; }
;
	beq     L2FB5
	cmp     #$01
	beq     L2FCF
	cmp     #$02
	beq     L2FBB
	cmp     #$03
	beq     L2FD5
	cmp     #$04
	beq     L2FDB
	jmp     L3AF8
;
; vram_adr (NAMETABLE_A);
;
L2FB5:	ldx     #$20
	jsr     _vram_adr
;
; vram_unrle (monono_title_rle);
;
	lda     #<(_monono_title_rle)
	ldx     #>(_monono_title_rle)
	jsr     _vram_unrle
;
; break;
;
	jmp     L3AF8
;
; vram_adr (NAMETABLE_A);
;
L2FBB:	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle (monona_title_rle);
;
	lda     #<(_monona_title_rle)
	ldx     #>(_monona_title_rle)
	jsr     _vram_unrle
;
; p_s (16, 19, "[START]  BEGIN");
;
	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	lda     #<(L2FC3)
	ldx     #>(L2FC3)
	jsr     _p_s
;
; if (already_played) p_s (16, 20, "[SELECT] CONT.");
;
	lda     _already_played
	beq     L2FC5
	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #<(L2FCA)
	ldx     #>(L2FCA)
	jsr     _p_s
;
; rdy = 25;
;
L2FC5:	lda     #$19
	sta     _rdy
;
; break;
;
	jmp     L3AF8
;
; vram_adr (NAMETABLE_A);
;
L2FCF:	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle (jetpuri_title_rle);
;
	lda     #<(_jetpuri_title_rle)
	ldx     #>(_jetpuri_title_rle)
	jsr     _vram_unrle
;
; break;
;
	jmp     L3AF8
;
; vram_adr (NAMETABLE_A);
;
L2FD5:	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle (lah_title_rle);
;
	lda     #<(_lah_title_rle)
	ldx     #>(_lah_title_rle)
	jsr     _vram_unrle
;
; break;
;
	jmp     L3AF8
;
; vram_adr (NAMETABLE_A);
;
L2FDB:	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle (pppp_title_rle);
;
	lda     #<(_pppp_title_rle)
	ldx     #>(_pppp_title_rle)
	jsr     _vram_unrle
;
; p_s (7, 14, "PETULANT PUGSLAY\"S/ POWERFUL PARADES");
;
	jsr     decsp2
	lda     #$07
	ldy     #$01
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #<(L2FE3)
	ldx     #>(L2FE3)
	jsr     _p_s
;
; if (level != GAME_MONONA) {
;
L3AF8:	lda     _level
	cmp     #$02
	beq     L2FF0
;
; if (already_played && level < GAME_LAH) {
;
	lda     _already_played
	beq     L2FE7
	lda     _level
	cmp     #$03
	bcs     L2FE7
;
; p_s (7, 19, "[START]   NEW GAME/[SELECT]  CONTINUE");
;
	jsr     decsp2
	lda     #$07
	ldy     #$01
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	lda     #<(L2FEE)
	ldx     #>(L2FEE)
;
; } else {
;
	jmp     L3AF7
;
; p_s (10, 19, "PRESS START!");
;
L2FE7:	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	lda     #<(L2FF4)
	ldx     #>(L2FF4)
L3AF7:	jsr     _p_s
;
; p_s (5, rdy, "@ 2016 THE MOJON TWINS/ PUBLISHED BY XIN XIN");
;
L2FF0:	jsr     decsp2
	lda     #$05
	ldy     #$01
	sta     (sp),y
	lda     _rdy
	dey
	sta     (sp),y
	lda     #<(L2FF9)
	ldx     #>(L2FF9)
	jmp     _p_s

.endproc

; ---------------------------------------------------------------
; void __near__ screen_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_game_over: near

.segment	"CODE"

;
; p_s (11, 14, "GAME OVER!");
;
	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #<(L2FFF)
	ldx     #>(L2FFF)
	jsr     _p_s
;
; show_attributes ();
;
	jmp     _show_attributes

.endproc

; ---------------------------------------------------------------
; void __near__ screen_game_ending (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_game_ending: near

.segment	"CODE"

;
; vram_adr (NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; switch (level) {
;
	lda     _level
;
; }
;
	beq     L3009
	cmp     #$01
	jeq     L304E
	cmp     #$02
	jeq     L3045
	cmp     #$03
	jeq     L3057
	cmp     #$04
	jeq     L306F
	rts
;
; c_ts_pals = ts0_pals;
;
L3009:	lda     #<(_ts0_pals)
	sta     _c_ts_pals
	lda     #>(_ts0_pals)
	sta     _c_ts_pals+1
;
; c_ts_tmaps = ts0_tmaps;
;
	lda     #<(_ts0_tmaps)
	sta     _c_ts_tmaps
	lda     #>(_ts0_tmaps)
	sta     _c_ts_tmaps+1
;
; rdx = 8; rdy = 16; rdt = 10; gpjt = 8; while (gpjt --) draw_tile_advance ();
;
	lda     #$08
	sta     _rdx
	lda     #$10
	sta     _rdy
	lda     #$0A
	sta     _rdt
	lda     #$08
	sta     _gpjt
	jmp     L3AFC
L3016:	jsr     _draw_tile_advance
L3AFC:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L3016
;
; p_s (13, 8, "MONONO");
;
	jsr     decsp2
	lda     #$0D
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #<(L301E)
	ldx     #>(L301E)
	jsr     _p_s
;
; p_s (7, 10, "PLATANONGA NGA NGAS");
;
	jsr     decsp2
	lda     #$07
	ldy     #$01
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     #<(L3023)
	ldx     #>(L3023)
	jsr     _p_s
;
; p_s (6, 20, "NGA DNA DONGO BONGO!//  GANGA MOJINGANGA//DEN CAGALERA CHUNGA!");
;
	jsr     decsp2
	lda     #$06
	ldy     #$01
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #<(L3028)
	ldx     #>(L3028)
	jsr     _p_s
;
; oam_meta_spr (124, 111, 4, sspl0_00_a);
;
	jsr     decsp3
	lda     #$7C
	ldy     #$02
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	lda     #<(_sspl0_00_a)
	ldx     #>(_sspl0_00_a)
	jsr     _oam_meta_spr
;
; oam_meta_spr (96, 111, 28, ssit0_00);
;
	jsr     decsp3
	lda     #$60
	ldy     #$02
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     #<(_ssit0_00)
	ldx     #>(_ssit0_00)
	jsr     _oam_meta_spr
;
; oam_meta_spr (144, 111, 44, ssit0_00);
;
	jsr     decsp3
	lda     #$90
	ldy     #$02
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$2C
	dey
	sta     (sp),y
	lda     #<(_ssit0_00)
	ldx     #>(_ssit0_00)
	jsr     _oam_meta_spr
;
; oam_meta_spr (156, 111, 60, ssit0_00);
;
	jsr     decsp3
	lda     #$9C
	ldy     #$02
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$3C
	dey
	sta     (sp),y
	lda     #<(_ssit0_00)
	ldx     #>(_ssit0_00)
	jsr     _oam_meta_spr
;
; oam_meta_spr (150, 96, 76, ssit0_00); 
;
	jsr     decsp3
	lda     #$96
	ldy     #$02
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	lda     #$4C
	dey
	sta     (sp),y
	lda     #<(_ssit0_00)
	ldx     #>(_ssit0_00)
	jsr     _oam_meta_spr
;
; show_attributes ();  
;
	jmp     _show_attributes
;
; vram_unrle (monona_ending_rle);
;
L3045:	lda     #<(_monona_ending_rle)
	ldx     #>(_monona_ending_rle)
	jsr     _vram_unrle
;
; p_s (13, 14, "GOOD JOB, YOU ARE//THE STRONGEST!!!");
;
	jsr     decsp2
	lda     #$0D
	ldy     #$01
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #<(L304B)
	ldx     #>(L304B)
	jmp     _p_s
;
; vram_unrle (jetpuri_ending_rle);
;
L304E:	lda     #<(_jetpuri_ending_rle)
	ldx     #>(_jetpuri_ending_rle)
	jsr     _vram_unrle
;
; p_s (14, 8, "JET PURI!!//YOU MADE IT!//NOW SOMEBODY//SHOULD BUG THE//MOJON TWINS//SO THEY GIVE YA//A PROPER GAME!");
;
	jsr     decsp2
	lda     #$0E
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #<(L3054)
	ldx     #>(L3054)
	jmp     _p_s
;
; vram_unrle (lah_ending_rle);
;
L3057:	lda     #<(_lah_ending_rle)
	ldx     #>(_lah_ending_rle)
	jsr     _vram_unrle
;
; oam_meta_spr (120, 112, 4, sspl_lah_ending_00);
;
	jsr     decsp3
	lda     #$78
	ldy     #$02
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	lda     #<(_sspl_lah_ending_00)
	ldx     #>(_sspl_lah_ending_00)
	jsr     _oam_meta_spr
;
; oam_meta_spr (120, 112, 28, sspl_lah_ending_01);
;
	jsr     decsp3
	lda     #$78
	ldy     #$02
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     #<(_sspl_lah_ending_01)
	ldx     #>(_sspl_lah_ending_01)
	jsr     _oam_meta_spr
;
; oam_meta_spr (140, 112, 52, sspl_lah_ending_02);
;
	jsr     decsp3
	lda     #$8C
	ldy     #$02
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	lda     #<(_sspl_lah_ending_02)
	ldx     #>(_sspl_lah_ending_02)
	jsr     _oam_meta_spr
;
; p_s (14, 10, "CACA");
;
	jsr     decsp2
	lda     #$0E
	ldy     #$01
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     #<(L306C)
	ldx     #>(L306C)
	jmp     _p_s
;
; vram_unrle (pppp_ending_rle);
;
L306F:	lda     #<(_pppp_ending_rle)
	ldx     #>(_pppp_ending_rle)
	jsr     _vram_unrle
;
; p_s (2, 7, "GOSH, YOU MADE IT.../I MEAN IT, WTF?/I NEVER THOUGHT SOMEBODY/WOULD ENDURE THIS GAME/CONGRATULATIONS/THE NEXT COPA DEL MEAO/WILL BE FOR YOU./TAKE A SCREENSHOT/AND TELL US!");
;
	jsr     decsp2
	lda     #$02
	ldy     #$01
	sta     (sp),y
	lda     #$07
	dey
	sta     (sp),y
	lda     #<(L3075)
	ldx     #>(L3075)
	jsr     _p_s
;
; oam_meta_spr (142, 120, 4, ssending_pppp_00);
;
	jsr     decsp3
	lda     #$8E
	ldy     #$02
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	lda     #<(_ssending_pppp_00)
	ldx     #>(_ssending_pppp_00)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; caux = cy1 ? cy1 - 1 : 0; 
;
	lda     _cy1
	beq     L3AFF
	sec
	sbc     #$01
L3AFF:	sta     _caux
;
; at1 = scr_attr [cx1 + (caux << 4)];
;
	ldx     #$00
	lda     _caux
	jsr     aslax4
	clc
	adc     _cx1
	bcc     L3AFD
	inx
L3AFD:	sta     ptr1
	txa
	clc
	adc     #>(_scr_attr)
	sta     ptr1+1
	ldy     #<(_scr_attr)
	lda     (ptr1),y
	sta     _at1
;
; caux = cy2 ? cy2 - 1 : 0;
;
	lda     _cy2
	beq     L3B01
	sec
	sbc     #$01
L3B01:	sta     _caux
;
; at2 = scr_attr [cx2 + (caux << 4)];
;
	ldx     #$00
	lda     _caux
	jsr     aslax4
	clc
	adc     _cx2
	bcc     L3AFE
	inx
L3AFE:	sta     ptr1
	txa
	clc
	adc     #>(_scr_attr)
	sta     ptr1+1
	ldy     #<(_scr_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; unsigned char collide (unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2) {
;
	jsr     pusha
;
; return (x1 + 8 >= x2 && x1 <= x2 + 8 && y1 + 8 >= y2 && y1 <= y2 + 8);
;
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$08
	bcc     L3B03
	inx
L3B03:	ldy     #$01
	cmp     (sp),y
	txa
	sbc     #$00
	lda     #$00
	tax
	bcc     L3B07
	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$08
	bcc     L3098
	ldx     #$01
L3098:	jsr     tosicmp
	beq     L3B02
	bcs     L3097
L3B02:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$08
	bcc     L3B04
	inx
L3B04:	ldy     #$00
	cmp     (sp),y
	txa
	sbc     #$00
	tya
	tax
	bcc     L3B07
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$08
	bcc     L309A
	ldx     #$01
L309A:	jsr     tosicmp
	bcc     L3095
	beq     L3095
L3097:	ldx     #$00
	txa
	jmp     incsp4
L3095:	lda     #$01
	ldx     #$00
;
; }
;
L3B07:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_ini (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_ini: near

.segment	"CODE"

;
; gpit = MAP_W * MAP_H; while (gpit --) hact [gpit] = 1;
;
	lda     #$1E
	sta     _gpit
	jmp     L3B08
L309F:	ldy     _gpit
	lda     #$01
	sta     _hact,y
L3B08:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	bne     L309F
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; if (hact [rn_pant]) {
;
	ldy     _rn_pant
	lda     _hact,y
	beq     L3B10
;
; gp_gen = (unsigned char *) c_hotspots + rn_pant + rn_pant;
;
	lda     _c_hotspots
	ldx     _c_hotspots+1
	clc
	adc     _rn_pant
	bcc     L3B0B
	inx
	clc
L3B0B:	adc     _rn_pant
	bcc     L3B0A
	inx
L3B0A:	sta     _gp_gen
	stx     _gp_gen+1
;
; hrt = *gp_gen ++; rda = *gp_gen;
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L30B0
	inx
L30B0:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _hrt
	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _rda
;
; hry = rda & 0xf0; hrx = rda << 4;
;
	and     #$F0
	sta     _hry
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; if (game_jet_puri && hrt == HOTSPOT_TYPE_KEY) hrt = HOTSPOT_TYPE_REFILL;
;
	lda     _game_jet_puri
	beq     L30B7
	lda     _hrt
	cmp     #$02
	bne     L30B7
	lda     #$03
	sta     _hrt
;
; if (inverted_screen) hry = 208 - hry;
;
L30B7:	lda     _inverted_screen
	beq     L30C1
	lda     #$D0
	sec
	sbc     _hry
	sta     _hry
;
; } else hrt = 0;
;
	rts
L3B10:	sta     _hrt
;
; }
;
L30C1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_do: near

.segment	"CODE"

;
; if (hrt) {
;
	lda     _hrt
	bne     L3B17
;
; }
;
	rts
;
; if (hr_hit) hr_hit --;
;
L3B17:	lda     _hr_hit
	beq     L30C7
	sec
	sbc     #$01
	sta     _hr_hit
;
; oam_index = oam_meta_spr (hrx, hry + SPRITE_ADJUST, oam_index, spr_items [itcelloffset + hrt]);
;
L30C7:	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	lda     _hry
	clc
	adc     _SPRITE_ADJUST
	dey
	sta     (sp),y
	lda     _oam_index
	dey
	sta     (sp),y
	ldx     #$00
	lda     _itcelloffset
	clc
	adc     _hrt
	bcc     L3B12
	inx
L3B12:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_spr_items)
	sta     ptr1
	lda     tmp1
	adc     #>(_spr_items)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; if (collide (prx, pry, hrx, hry)) {
;
	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	dey
	sta     (sp),y
	lda     _hrx
	dey
	sta     (sp),y
	lda     _hry
	jsr     _collide
	tax
	beq     L30D1
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$01
	beq     L3B14
	cmp     #$02
	beq     L3B15
	cmp     #$03
	bne     L30D9
;
; plife ++; if (plife > 9) plife = 9;
;
	lda     _plife
	clc
	adc     #$01
	sta     _plife
	cmp     #$0A
	lda     #$00
	bcc     L3B16
	lda     #$09
	sta     _plife
;
; break;
;
	jmp     L30D9
;
; pobjs ++;
;
L3B14:	lda     _pobjs
	pha
	clc
	adc     #$01
	sta     _pobjs
;
; break;
;
	jmp     L3B13
;
; pkeys ++;
;
L3B15:	lda     _pkeys
	pha
	clc
	adc     #$01
	sta     _pkeys
L3B13:	pla
;
; sfx_play (0, SC_LEVEL);
;
L30D9:	lda     #$00
L3B16:	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hact [rn_pant] = hrt = 0;
;
	lda     #<(_hact)
	ldx     #>(_hact)
	clc
	adc     _rn_pant
	bcc     L30EC
	inx
L30EC:	jsr     pushax
	lda     #$00
	sta     _hrt
	tay
	jmp     staspidx
;
; }
;
L30D1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bolts_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolts_load: near

.segment	"CODE"

;
; gpit = BOLTS_MAX; while (gpit --) lkact [gpit] = 0;
;
	lda     #$08
	sta     _gpit
	jmp     L3B18
L30F2:	ldy     _gpit
	lda     #$00
	sta     _lkact,y
L3B18:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	bne     L30F2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pppp_invert_bolt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pppp_invert_bolt: near

.segment	"CODE"

;
; if (inverted_screen) {
;
	lda     _inverted_screen
	beq     L30FB
;
; rdx = rdb & 0xf; rdy = 11 - (rdb >> 4);
;
	lda     _rdb
	and     #$0F
	sta     _rdx
	lda     #$0B
	jsr     pusha0
	lda     _rdb
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     tossuba0
	sta     _rdy
;
; rdb = (rdy << 4) | rdx;
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	lda     _rdx
	ora     ptr1
	sta     _rdb
;
; }
;
L30FB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bolts_clear_bolt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolts_clear_bolt: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_locks;
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < BOLTS_MAX; gpit ++) {
;
	lda     #$00
L3B1D:	sta     _gpit
	cmp     #$08
	bcs     L3109
;
; rda = *gp_gen ++; // Screen
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L3112
	inx
L3112:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
;
; rdb = *gp_gen ++; // YX
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L3115
	inx
L3115:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdb
;
; pppp_invert_bolt ();
;
	jsr     _pppp_invert_bolt
;
; if (rn_pant == rda) {
;
	lda     _rda
	cmp     _rn_pant
	bne     L3B1C
;
; if (rdc == rdb) {    
;
	lda     _rdb
	cmp     _rdc
	bne     L3B1C
;
; lkact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _lkact,y
;
; for (gpit = 0; gpit < BOLTS_MAX; gpit ++) {
;
L3B1C:	lda     _gpit
	clc
	adc     #$01
	jmp     L3B1D
;
; }
;
L3109:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bolts_update_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolts_update_screen: near

.segment	"CODE"

;
; rdt = 0; gp_gen = (unsigned char *) c_locks;
;
	lda     #$00
	sta     _rdt
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; for (gpjt = 0; gpjt < BOLTS_MAX; gpjt ++) {
;
	lda     #$00
L3B26:	sta     _gpjt
	cmp     #$08
	bcc     L3B27
;
; }
;
	rts
;
; rda = *gp_gen ++;  // Screen
;
L3B27:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L312E
	inx
L312E:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
;
; rdb = *gp_gen ++; // YX
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L3131
	inx
L3131:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdb
;
; pppp_invert_bolt ();
;
	jsr     _pppp_invert_bolt
;
; if (rn_pant == rda) {
;
	lda     _rda
	cmp     _rn_pant
	jne     L3B25
;
; if (lkact [gpjt] || game_jet_puri) {
;
	ldy     _gpjt
	lda     _lkact,y
	bne     L3B24
	lda     _game_jet_puri
	beq     L3B25
;
; scr_buff [rdb] = scr_attr [rdb] = 0;
;
L3B24:	lda     #<(_scr_buff)
	ldx     #>(_scr_buff)
	clc
	adc     _rdb
	bcc     L313C
	inx
L313C:	jsr     pushax
	ldy     _rdb
	lda     #$00
	sta     _scr_attr,y
	tay
	jsr     staspidx
;
; rdx = rdb & 0xf; rdx = rdx + rdx;
;
	lda     _rdb
	and     #$0F
	sta     _rdx
	clc
	adc     _rdx
	sta     _rdx
;
; rdy = rdb >> 4; rdy = rdy + rdy + TOP_ADJUST;
;
	lda     _rdb
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _rdy
	clc
	adc     _rdy
	bcc     L3B22
	clc
L3B22:	adc     _TOP_ADJUST
	sta     _rdy
;
; rdb -= 16; scr_buff [rdb] = scr_attr [rdb] = 0; // Custom
;
	lda     _rdb
	sec
	sbc     #$10
	sta     _rdb
	lda     #<(_scr_buff)
	ldx     #>(_scr_buff)
	clc
	adc     _rdb
	bcc     L314D
	inx
L314D:	jsr     pushax
	ldy     _rdb
	lda     #$00
	sta     _scr_attr,y
	tay
	jsr     staspidx
;
; draw_tile (); 
;
	jsr     _draw_tile
;
; if (level < GAME_LAH) rdy -= 2; draw_tile (); // CUSTOM
;
	lda     _level
	cmp     #$03
	bcs     L3153
	lda     _rdy
	sec
	sbc     #$02
	sta     _rdy
L3153:	jsr     _draw_tile
;
; for (gpjt = 0; gpjt < BOLTS_MAX; gpjt ++) {
;
L3B25:	lda     _gpjt
	clc
	adc     #$01
	jmp     L3B26

.endproc

; ---------------------------------------------------------------
; void __near__ fumettos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fumettos_init: near

.segment	"CODE"

;
; bi = FUMETTOS_MAX; while (bi --) fumettos_life [bi] = 0;
;
	lda     #$08
	sta     _bi
	jmp     L3B28
L315B:	ldy     _bi
	lda     #$00
	sta     _fumettos_life,y
L3B28:	lda     _bi
	pha
	sec
	sbc     #$01
	sta     _bi
	pla
	tax
	bne     L315B
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fumettos_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fumettos_add: near

.segment	"CODE"

;
; bi = FUMETTOS_MAX; while (bi --) {
;
	lda     #$08
	sta     _bi
	jmp     L3B2A
;
; if (!fumettos_life [bi]) {
;
L3166:	ldy     _bi
	lda     _fumettos_life,y
	bne     L3B2A
;
; fumettos_life [bi] = 32;
;
	ldy     _bi
	lda     #$20
	sta     _fumettos_life,y
;
; if (pfacing) fumettos_x [bi] = prx + 4; else fumettos_x [bi] = prx - 4;
;
	lda     _pfacing
	beq     L3172
	lda     #<(_fumettos_x)
	ldx     #>(_fumettos_x)
	clc
	adc     _bi
	bcc     L3176
	inx
L3176:	jsr     pushax
	lda     _prx
	clc
	adc     #$04
	jmp     L3B2B
L3172:	lda     #<(_fumettos_x)
	ldx     #>(_fumettos_x)
	clc
	adc     _bi
	bcc     L317C
	inx
L317C:	jsr     pushax
	lda     _prx
	sec
	sbc     #$04
L3B2B:	ldy     #$00
	jsr     staspidx
;
; fumettos_y [bi] = pry + 8;
;
	lda     #<(_fumettos_y)
	ldx     #>(_fumettos_y)
	clc
	adc     _bi
	bcc     L3181
	inx
L3181:	sta     ptr1
	stx     ptr1+1
	lda     _pry
	clc
	adc     #$08
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	rts
;
; bi = FUMETTOS_MAX; while (bi --) {
;
L3B2A:	lda     _bi
	pha
	sec
	sbc     #$01
	sta     _bi
	pla
	tax
	bne     L3166
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fumettos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fumettos_do: near

.segment	"CODE"

;
; bi = FUMETTOS_MAX; while (bi --) {
;
	lda     #$08
	sta     _bi
	jmp     L3B2D
;
; if (fumettos_life [bi]) {
;
L3187:	ldy     _bi
	lda     _fumettos_life,y
	beq     L3B2D
;
; fumettos_life [bi] --;
;
	lda     #<(_fumettos_life)
	ldx     #>(_fumettos_life)
	clc
	adc     _bi
	bcc     L3191
	inx
L3191:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	jsr     staspidx
;
; oam_index = oam_spr (fumettos_x [bi], fumettos_y [bi] + SPRITE_ADJUST, FUMETTO_BASE_PATTERN + 3-(fumettos_life [bi] >> 3), 0, oam_index);
;
	jsr     decsp4
	ldy     _bi
	lda     _fumettos_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _bi
	lda     _fumettos_y,y
	clc
	adc     _SPRITE_ADJUST
	ldy     #$02
	sta     (sp),y
	lda     #$05
	jsr     pusha0
	ldy     _bi
	lda     _fumettos_life,y
	lsr     a
	lsr     a
	lsr     a
	jsr     tossuba0
	ldy     #$01
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; bi = FUMETTOS_MAX; while (bi --) {
;
L3B2D:	lda     _bi
	pha
	sec
	sbc     #$01
	sta     _bi
	pla
	tax
	bne     L3187
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_reset_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_reset_movement: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
;
; pfixct = pfiring = 0;
;
	sta     _pfiring
	sta     _pfixct
;
; phit = 0;
;
	sta     _phit
;
; pvylast = 0;
;
	sta     _pvylast
	sta     _pvylast+1
;
; pthrust = 0;
;
	sta     _pthrust
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_process_block (signed char, signed char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_process_block: near

.segment	"CODE"

;
; void player_process_block (signed char x, signed char y) {
;
	jsr     pusha
;
; if (y) y --;
;
	ldy     #$00
	lda     (sp),y
	beq     L31AF
	sec
	sbc     #$01
	sta     (sp),y
;
; rdc = x + (y << 4);
;
L31AF:	iny
	ldx     #$00
	lda     (sp),y
	bpl     L31B5
	dex
L31B5:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (sp,x)
	bpl     L31B7
	dex
L31B7:	jsr     aslax4
	clc
	adc     ptr1
	sta     _rdc
	txa
	adc     ptr1+1
;
; rda = scr_buff [rdc];
;
	ldy     _rdc
	lda     _scr_buff,y
	sta     _rda
;
; }
;
	cmp     #$0E
	beq     L31C0
	cmp     #$0F
	jeq     L31F5
	jmp     incsp2
;
; rdct = x;
;
L31C0:	ldy     #$01
	lda     (sp),y
	sta     _rdct
;
; if (pad0 & PAD_LEFT) {
;
	lda     _pad0
	and     #$40
	beq     L3B31
;
; if (x > 0) if (0 == scr_buff [x - 1 + (y << 4)]) rdct = x - 1;
;
	lda     (sp),y
	sec
	sbc     #$01
	bvs     L31C8
	eor     #$80
L31C8:	jpl     L31DB
	jsr     push0
	ldy     #$03
	lda     (sp),y
	bpl     L31CC
	ldx     #$FF
L31CC:	sec
	sbc     #$01
	bcs     L31CD
	dex
L31CD:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	dey
	lda     (sp),y
	bpl     L31CF
	dex
L31CF:	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_scr_buff)
	sta     ptr1+1
	ldy     #<(_scr_buff)
	lda     (ptr1),y
	jsr     tosicmp0
	bne     L31DB
	ldy     #$01
	lda     (sp),y
	sec
	sbc     #$01
;
; } else if (pad0 & PAD_RIGHT) {
;
	jmp     L3B2F
L3B31:	lda     _pad0
	and     #$80
	beq     L31DB
;
; if (x < 15) if (0 == scr_buff [x + 1 + (y << 4)]) rdct = x + 1;
;
	lda     (sp),y
	sec
	sbc     #$0F
	bvc     L31DA
	eor     #$80
L31DA:	bpl     L31DB
	jsr     push0
	ldy     #$03
	lda     (sp),y
	bpl     L31DE
	ldx     #$FF
L31DE:	clc
	adc     #$01
	bcc     L31DF
	inx
L31DF:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	dey
	lda     (sp),y
	bpl     L31E1
	dex
L31E1:	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_scr_buff)
	sta     ptr1+1
	ldy     #<(_scr_buff)
	lda     (ptr1),y
	jsr     tosicmp0
	bne     L31DB
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
L3B2F:	sta     _rdct
;
; if (rdct != x) {
;
L31DB:	ldx     #$00
	ldy     #$01
	lda     (sp),y
	bpl     L31E8
	dex
L31E8:	cpx     #$00
	bne     L3B32
	cmp     _rdct
	beq     L31BE
;
; set_map_tile (x, y, 0); set_map_tile (rdct, y, 14);
;
L3B32:	jsr     decsp2
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	tya
	jsr     _set_map_tile
	jsr     decsp2
	lda     _rdct
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     #$0E
	jsr     _set_map_tile
;
; sfx_play (SFX_BUTT_HIT, SC_LEVEL);
;
	lda     #$09
;
; break;
;
	jmp     L3B34
;
; if (pkeys) {
;
L31F5:	lda     _pkeys
	beq     L31BE
;
; pkeys --;
;
	sec
	sbc     #$01
	sta     _pkeys
;
; bolts_clear_bolt ();
;
	jsr     _bolts_clear_bolt
;
; set_map_tile (x, y, 0);
;
	jsr     decsp2
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	tya
	jsr     _set_map_tile
;
; sfx_play (SFX_CHOF, SC_LEVEL);
;
	lda     #$07
L3B34:	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; }
;
L31BE:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; switch (level) {
;
	lda     _level
;
; }
;
	beq     L3206
	cmp     #$01
	beq     L3210
	cmp     #$02
	beq     L3206
	cmp     #$03
	beq     L3218
	cmp     #$04
	beq     L3218
	jmp     L3B36
;
; px = (signed int) (2 << 4) << FIX_BITS;
;
L3206:	ldx     #$02
	lda     #$00
	sta     _px
	stx     _px+1
;
; py = (signed int) (11 << 4) << FIX_BITS;
;
	ldx     #$0B
;
; break;
;
	jmp     L3B37
;
; px = (signed int) (2 << 4) << FIX_BITS;
;
L3210:	ldx     #$02
	lda     #$00
	sta     _px
	stx     _px+1
;
; py = (signed int) (5 << 4) << FIX_BITS;
;
	ldx     #$05
;
; break;
;
	jmp     L3B37
;
; px = (signed int) (12 << 4) << FIX_BITS;
;
L3218:	ldx     #$0C
	lda     #$00
	sta     _px
	stx     _px+1
;
; py = (signed int) (9 << 4) << FIX_BITS;
;
	ldx     #$09
L3B37:	sta     _py
	stx     _py+1
;
; pfacing = CELL_FACING_RIGHT;
;
L3B36:	lda     #$00
	sta     _pfacing
;
; player_reset_movement ();
;
	jsr     _player_reset_movement
;
; pkilled = 0;
;
	lda     #$00
	sta     _pkilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_hit: near

.segment	"CODE"

;
; phit = PLAYER_HIT_FRAMES;
;
	lda     #$20
	sta     _phit
;
; pflickering = PLAYER_FLICKERS;
;
	lda     #$78
	sta     _pflickering
;
; sfx_play (SFX_ENEMY_HIT, SC_PLAYER);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) {
;
	lda     _plife
	beq     L322E
;
; plife --;
;
	sec
	sbc     #$01
	sta     _plife
;
; } else pkilled = 1;
;
	rts
L322E:	lda     #$01
	sta     _pkilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (phit) phit --;
;
	lda     _phit
	beq     L3235
	sec
	sbc     #$01
	sta     _phit
;
; if (pflickering) pflickering --;
;
L3235:	lda     _pflickering
	beq     L3BBB
	sec
	sbc     #$01
	sta     _pflickering
;
; evil_tile_hit = 0;
;
	lda     #$00
L3BBB:	sta     _evil_tile_hit
;
; pcx = px; pcy = py;
;
	lda     _px
	sta     _pcx
	lda     _px+1
	sta     _pcx+1
	lda     _py
	sta     _pcy
	lda     _py+1
	sta     _pcy+1
;
; if (!pgotten && !pthrust) {
;
	lda     _pgotten
	bne     L3258
	lda     _pthrust
	bne     L3258
;
; if (inverted_screen) {
;
	lda     _inverted_screen
	beq     L3245
;
; if (pvy > -PLAYER_VY_FALLING_MAX) pvy -= PLAYER_G; else pvy = -PLAYER_VY_FALLING_MAX;
;
	lda     _pvy
	cmp     #$C1
	lda     _pvy+1
	sbc     #$FF
	bvs     L3249
	eor     #$80
L3249:	bpl     L3247
	lda     _PLAYER_G
	eor     #$FF
	sec
	adc     _pvy
	sta     _pvy
	lda     #$FF
	adc     _pvy+1
	sta     _pvy+1
	jmp     L3258
L3247:	ldx     #$FF
	lda     #$C0
;
; } else {
;
	jmp     L3BB3
;
; if (!game_jet_puri || half_life) {
;
L3245:	lda     _game_jet_puri
	beq     L3B4E
	lda     _half_life
	beq     L3258
;
; if (pvy < PLAYER_VY_FALLING_MAX) pvy += PLAYER_G; else pvy = PLAYER_VY_FALLING_MAX;
;
L3B4E:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$00
	bvc     L3255
	eor     #$80
L3255:	asl     a
	ldx     #$00
	bcc     L3B4F
	lda     _PLAYER_G
	clc
	adc     _pvy
	sta     _pvy
	txa
	adc     _pvy+1
	sta     _pvy+1
	jmp     L3258
L3B4F:	lda     #$40
L3BB3:	sta     _pvy
	stx     _pvy+1
;
; py += pvy;
;
L3258:	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) { py = pry = 0; }
;
	ldx     _py+1
	cpx     #$80
	bcc     L325D
	lda     #$00
	sta     _pry
	sta     _py
	sta     _py+1
;
; else if (py > (192<<FIX_BITS)) pry = 192;
;
	jmp     L3B50
L325D:	lda     _py
	cmp     #$01
	lda     _py+1
	sbc     #$0C
	bvs     L3266
	eor     #$80
L3266:	bpl     L3263
	lda     #$C0
;
; else pry = py >> FIX_BITS;
;
	jmp     L3B3E
L3263:	lda     _py
	ldx     _py+1
	jsr     asrax4
L3B3E:	sta     _pry
;
; cx1 = prx >> 4;
;
L3B50:	lda     _prx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L3271
	inx
L3271:	jsr     shrax4
	sta     _cx2
;
; if (pvy + pgtmy) {
;
	ldx     #$00
	lda     _pgtmy
	bpl     L3274
	dex
L3274:	clc
	adc     _pvy
	pha
	txa
	adc     _pvy+1
	sta     tmp1
	pla
	ora     tmp1
	jeq     L32A1
;
; if (pvy + pgtmy < 0) {
;
	ldx     #$00
	lda     _pgtmy
	bpl     L3277
	dex
L3277:	clc
	adc     _pvy
	txa
	adc     _pvy+1
	tax
	cpx     #$80
	ldx     #$00
	bcc     L3B60
;
; cy1 = cy2 = pry >> 4;
;
	lda     _pry
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; (inverted_screen && ((at1 & 12) || (at2 & 12))) || 
;
	lda     _inverted_screen
	beq     L3B39
	lda     _at1
	ldx     #$00
	and     #$0C
	bne     L3B5F
	lda     _at2
	and     #$0C
	bne     L3B5F
;
; (!inverted_screen && ((at1 & 8) || (at2 & 8)))
;
L3B39:	lda     _inverted_screen
	jne     L32A1
	lda     _at1
	ldx     #$00
	and     #$08
	bne     L3B5F
	lda     _at2
	and     #$08
	jeq     L32A1
;
; pgotten = pvy = 0;
;
L3B5F:	txa
	sta     _pvy
	sta     _pvy+1
	sta     _pgotten
;
; pry = (cy1 + 1) << 4;
;
	lda     _cy1
	clc
	adc     #$01
;
; } else if (pvy + pgtmy > 0) {
;
	jmp     L3BC9
L3B60:	lda     _pgtmy
	bpl     L3299
	dex
L3299:	clc
	adc     _pvy
	pha
	txa
	adc     _pvy+1
	tax
	pla
	cmp     #$01
	txa
	sbc     #$00
	bvs     L329A
	eor     #$80
L329A:	bpl     L32A1
;
; cy1 = cy2 = (pry + 15) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L329F
	inx
L329F:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; (inverted_screen && ((at1 & 8) || (at2 & 8))) || 
;
	lda     _inverted_screen
	beq     L3B3B
	lda     _at1
	ldx     #$00
	and     #$08
	bne     L3B73
	lda     _at2
	and     #$08
	bne     L3B73
;
; (!inverted_screen && (((pry - 1) & 15) < 4 && ((at1 & 12) || (at2 & 12))))
;
L3B3B:	lda     _inverted_screen
	bne     L32A1
	lda     _pry
	sec
	sbc     #$01
	and     #$0F
	cmp     #$04
	bcs     L32A1
	lda     _at1
	ldx     #$00
	and     #$0C
	bne     L3B73
	lda     _at2
	and     #$0C
	beq     L32A1
;
; pgotten = pvy = 0;
;
L3B73:	txa
	sta     _pvy
	sta     _pvy+1
	sta     _pgotten
;
; pry = (cy1 - 1) << 4;
;
	lda     _cy1
	sec
	sbc     #$01
L3BC9:	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
;
; py = pry << FIX_BITS;
;
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; if (inverted_screen) {
;
L32A1:	lda     _inverted_screen
	beq     L32C2
;
; cy1 = cy2 = (pry - 1) >> 4;
;
	ldx     #$00
	lda     _pry
	sec
	sbc     #$01
	bcs     L32CE
	dex
;
; } else {
;
	jmp     L32CE
;
; cy1 = cy2 = (pry + 16) >> 4;
;
L32C2:	tax
	lda     _pry
	clc
	adc     #$10
	bcc     L32CE
	inx
L32CE:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; ppossee = ((at1 & 14) || (at2 & 14));
;
	lda     _at1
	and     #$0E
	bne     L3B74
	lda     _at2
	and     #$0E
	beq     L3BB6
L3B74:	lda     #$01
L3BB6:	ldx     #$00
	sta     _ppossee
;
; if (!game_jet_puri) { 
;
	lda     _game_jet_puri
	bne     L3B7B
;
; if (inverted_screen) {
;
	lda     _inverted_screen
	beq     L3B76
;
; cy1 = cy2 = (pry + 2) >> 4;  // Let it bleed a bit
;
	lda     _pry
	clc
	adc     #$02
;
; } else {
;
	jmp     L3BC2
;
; cy1 = cy2 = (pry + 12) >> 4; // Let it bleed a bit
;
L3B76:	lda     _pry
	clc
	adc     #$0C
L3BC2:	bcc     L32E4
	inx
L32E4:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 == 1 || at2 == 1) evil_tile_hit = 1;
;
	lda     _at1
	cmp     #$01
	beq     L3B7A
	lda     _at2
	cmp     #$01
	bne     L3B7B
L3B7A:	sta     _evil_tile_hit
;
; switch (level) { 
;
L3B7B:	lda     _level
;
; }       
;
	beq     L3B7C
	cmp     #$01
	jeq     L3B7E
	cmp     #$02
	beq     L3B7C
	cmp     #$03
	jeq     L3B82
	cmp     #$04
	jeq     L3B88
	jmp     L3B8E
;
; if (!(pad0 & PAD_A)) { pj = 0; pvylast = -PLAYER_VY_JUMP_INITIAL_MONONO; } else {
;
L3B7C:	lda     _pad0
	and     #$01
	bne     L32F2
	sta     _pj
	ldx     #$FF
	lda     #$E0
	sta     _pvylast
	stx     _pvylast+1
	jmp     L3B8E
;
; if (ppossee || pgotten) {
;
L32F2:	lda     _ppossee
	bne     L3B7D
	lda     _pgotten
	jeq     L3B8E
;
; pvy = SATURATE_N (pvylast - PLAYER_AY_JUMP_MONONO, -PLAYER_VY_JUMP_MAX_MONONO);
;
L3B7D:	lda     _pvylast
	ldx     _pvylast+1
	sec
	sbc     #$10
	bcs     L3300
	dex
L3300:	cmp     #$A0
	txa
	sbc     #$FF
	bvc     L3301
	eor     #$80
L3301:	bpl     L3302
	ldx     #$FF
	lda     #$A0
	jmp     L3306
L3302:	lda     _pvylast
	ldx     _pvylast+1
	sec
	sbc     #$10
	bcs     L3306
	dex
L3306:	sta     _pvy
	stx     _pvy+1
;
; pvylast = pvy;
;
	sta     _pvylast
	stx     _pvylast+1
;
; pj = 1;
;
	lda     #$01
	sta     _pj
;
; sfx_play (SFX_JUMP, SC_PLAYER);
;
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; break;
;
	jmp     L3B8E
;
; if (pad0 & PAD_A) {
;
L3B7E:	lda     _pad0
	and     #$01
	beq     L3B81
;
; pvy = SATURATE_N (pvy - PLATER_AY_JETPAC, -PLAYER_VY_JETPAC_MAX);  
;
	lda     _pvy
	ldx     _pvy+1
	sec
	sbc     #$02
	bcs     L3315
	dex
L3315:	cmp     #$F4
	txa
	sbc     #$FF
	bvc     L3316
	eor     #$80
L3316:	bpl     L3317
	ldx     #$FF
	lda     #$F4
	jmp     L331B
L3317:	lda     _pvy
	ldx     _pvy+1
	sec
	sbc     #$02
	bcs     L331B
	dex
L331B:	sta     _pvy
	stx     _pvy+1
;
; pthrust = 1;
;
	lda     #$01
	sta     _pthrust
;
; if (!(thrustct)) fumettos_add ();
;
	lda     _thrustct
	bne     L3B7F
	jsr     _fumettos_add
;
; thrustct ++; if (thrustct == 7) thrustct = 0; // so it stays out of phase
;
L3B7F:	lda     _thrustct
	clc
	adc     #$01
	sta     _thrustct
	cmp     #$07
	jne     L3B8E
	lda     #$00
	sta     _thrustct
;
; } else {
;
	jmp     L3B8E
;
; pthrust = 0;
;
L3B81:	sta     _pthrust
;
; thrustct = 0;
;
	sta     _thrustct
;
; break;
;
	jmp     L3B8E
;
; if (pad0 & PAD_A) {
;
L3B82:	lda     _pad0
	and     #$01
	jeq     L3B8D
;
; if (!pjb) {
;
	lda     _pjb
	bne     L3336
;
; pjb = 1;
;
	lda     #$01
	sta     _pjb
;
; if (!pj) {
;
	lda     _pj
	bne     L3336
;
; if (pgotten || ppossee || phit) {
;
	lda     _pgotten
	bne     L3B83
	lda     _ppossee
	bne     L3B83
	lda     _phit
	beq     L3336
;
; pj = 1; pctj = 0; 
;
L3B83:	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	ldx     #$FF
	lda     #$F0
	sta     _pvy
	stx     _pvy+1
;
; sfx_play (SFX_JUMP, SC_PLAYER);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (pj) {
;
L3336:	lda     _pj
	jeq     L3B8E
;
; rda = PLAYER_AY_JUMP - (pctj >> 2) - (pctj >> 3);
;
	lda     #$08
	jsr     pusha0
	lda     _pctj
	lsr     a
	lsr     a
	jsr     tossuba0
	jsr     pushax
	lda     _pctj
	lsr     a
	lsr     a
	lsr     a
	jsr     tossuba0
	sta     _rda
;
; pvy -= (rda > 1 ? rda : 1);
;
	cmp     #$02
	bcc     L3B84
	lda     _rda
	jmp     L334D
L3B84:	lda     #$01
L334D:	eor     #$FF
	sec
	adc     _pvy
	sta     _pvy
	lda     #$FF
	adc     _pvy+1
	sta     _pvy+1
;
; if (pvy < -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$C0
	lda     _pvy+1
	sbc     #$FF
	bvc     L3351
	eor     #$80
L3351:	bpl     L3B85
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; pctj ++; if (pctj == PLAYER_VY_JUMP_A_STEPS) pj = 0;
;
L3B85:	lda     _pctj
	clc
	adc     #$01
	sta     _pctj
	cmp     #$10
	jne     L3B8E
	lda     #$00
;
; } else pj = pjb = 0;
;
	jmp     L3B41
;
; if (pad0 & PAD_A) {
;
L3B88:	lda     _pad0
	and     #$01
	jeq     L3B8D
;
; if (!pjb) {
;
	lda     _pjb
	bne     L3367
;
; pjb = 1;
;
	lda     #$01
	sta     _pjb
;
; if (!pj) {
;
	lda     _pj
	bne     L3367
;
; if (pgotten || ppossee || phit) {
;
	lda     _pgotten
	bne     L3B89
	lda     _ppossee
	bne     L3B89
	lda     _phit
	beq     L3367
;
; pj = 1; pctj = 0; 
;
L3B89:	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; pvy = PLAYER_VY_JUMP_INITIAL;
;
	tax
	lda     #$10
	sta     _pvy
	stx     _pvy+1
;
; sfx_play (SFX_JUMP, SC_PLAYER);
;
	lda     #$01
	jsr     pusha
	txa
	jsr     _sfx_play
;
; if (pj) {
;
L3367:	lda     _pj
	beq     L3B8E
;
; rda = PLAYER_AY_JUMP - (pctj >> 2) - (pctj >> 3);
;
	lda     #$08
	jsr     pusha0
	lda     _pctj
	lsr     a
	lsr     a
	jsr     tossuba0
	jsr     pushax
	lda     _pctj
	lsr     a
	lsr     a
	lsr     a
	jsr     tossuba0
	sta     _rda
;
; pvy += (rda > 1 ? rda : 1);
;
	cmp     #$02
	bcc     L3B8A
	lda     _rda
	jmp     L337E
L3B8A:	lda     #$01
L337E:	clc
	adc     _pvy
	sta     _pvy
	lda     #$00
	adc     _pvy+1
	sta     _pvy+1
;
; if (pvy > PLAYER_VY_JUMP_MAX) pvy = PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$41
	lda     _pvy+1
	sbc     #$00
	bvs     L3382
	eor     #$80
L3382:	bpl     L3B8B
	ldx     #$00
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; pctj ++; if (pctj == PLAYER_VY_JUMP_A_STEPS) pj = 0;
;
L3B8B:	lda     _pctj
	clc
	adc     #$01
	sta     _pctj
	cmp     #$10
	bne     L3B8E
	lda     #$00
;
; } else pj = pjb = 0;
;
	jmp     L3B41
L3B8D:	sta     _pjb
L3B41:	sta     _pj
;
; if (pad0 & PAD_LEFT) {
;
L3B8E:	lda     _pad0
	ldx     #$00
	and     #$40
	beq     L3B91
;
; if (!pfixct) if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pfixct
	bne     L3B90
	lda     _pvx
	sec
	sbc     #$E1
	bvs     L3395
	eor     #$80
L3395:	bpl     L3B90
;
; pvx -= PLAYER_AX;   
;
	lda     _PLAYER_AX
	cmp     #$80
	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
;
; pfacing = CELL_FACING_LEFT;
;
L3B90:	lda     #$08
	sta     _pfacing
;
; } else if (pad0 & PAD_RIGHT) {
;
	jmp     L3B99
L3B91:	lda     _pad0
	and     #$80
	beq     L3B95
;
; if (!pfixct) if (pvx < PLAYER_VX_MAX) {
;
	lda     _pfixct
	bne     L3B93
	lda     _pvx
	sec
	sbc     #$20
	bvc     L33A4
	eor     #$80
L33A4:	asl     a
	txa
	bcc     L3B94
;
; pvx += PLAYER_AX;
;
	lda     _PLAYER_AX
	cmp     #$80
	clc
	adc     _pvx
	sta     _pvx
;
; pfacing = CELL_FACING_RIGHT;
;
L3B93:	txa
L3B94:	sta     _pfacing
;
; } else {
;
	jmp     L3B99
;
; if (pvx > 0) {
;
L3B95:	lda     _pvx
	sec
	sbc     #$01
	bvs     L33AF
	eor     #$80
L33AF:	bpl     L3B97
;
; pvx -= PLAYER_RX; if (pvx < 0) pvx = 0;
;
	lda     _pvx
	sec
	sbc     #$04
	sta     _pvx
	asl     a
	bcc     L3B99
;
; } else if (pvx < 0) {
;
	jmp     L3BB8
L3B97:	lda     _pvx
	asl     a
	bcc     L3B99
;
; pvx += PLAYER_RX; if (pvx > 0) pvx = 0;
;
	lda     #$04
	clc
	adc     _pvx
	sta     _pvx
	sec
	sbc     #$01
	bvs     L33C2
	eor     #$80
L33C2:	bpl     L3B99
L3BB8:	stx     _pvx
;
; px += pvx;  
;
L3B99:	lda     _pvx
	cmp     #$80
	bcc     L3B4A
	dex
	clc
L3B4A:	adc     _px
	sta     _px
	txa
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L33C9
	ldx     #$00
	lda     _pgtmx
	cmp     #$80
	bcc     L3B4B
	dex
	clc
L3B4B:	adc     _px
	sta     _px
	txa
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIX_BITS)) prx = 4;
;
L33C9:	lda     _px
	cmp     #$40
	lda     _px+1
	sbc     #$00
	bvc     L33D2
	eor     #$80
L33D2:	bpl     L33CF
	lda     #$04
;
; else if (px > (244<<FIX_BITS)) prx = 244;
;
	jmp     L3B43
L33CF:	lda     _px
	cmp     #$41
	lda     _px+1
	sbc     #$0F
	bvs     L33D9
	eor     #$80
L33D9:	bpl     L33D6
	lda     #$F4
;
; else prx = px >> FIX_BITS;
;
	jmp     L3B43
L33D6:	lda     _px
	ldx     _px+1
	jsr     asrax4
L3B43:	sta     _prx
;
; cy1 = pry >> 4;
;
	lda     _pry
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L33E4
	inx
L33E4:	jsr     shrax4
	sta     _cy2
;
; if (pvx + pgtmx) {
;
	ldx     #$00
	lda     _pvx
	bpl     L33E7
	dex
L33E7:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _pgtmx
	bpl     L33E8
	dex
L33E8:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	jeq     L341E
;
; if (pvx + pgtmx < 0) {
;
	ldx     #$00
	lda     _pvx
	bpl     L33EB
	dex
L33EB:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _pgtmx
	bpl     L33EC
	dex
L33EC:	clc
	adc     ptr1
	txa
	adc     ptr1+1
	tax
	cpx     #$80
	ldx     #$00
	bcc     L3B9D
;
; cx1 = cx2 = prx >> 4;
;
	lda     _prx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cx2
	sta     _cx1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L3B9C
	lda     _at2
	and     #$08
	jeq     L3B9F
;
; pvx = 0;
;
L3B9C:	lda     #$00
	sta     _pvx
;
; prx = (cx1 + 1) << 4;
;
	lda     _cx1
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
;
; } else if (pvx + pgtmx > 0) {
;
	jmp     L3BC7
L3B9D:	lda     _pvx
	bpl     L3401
	dex
L3401:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _pgtmx
	bpl     L3402
	dex
L3402:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     #$01
	txa
	sbc     #$00
	bvs     L3403
	eor     #$80
L3403:	bpl     L3B9F
;
; cx1 = cx2 = (prx + 7) >> 4; 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L3408
	inx
L3408:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L3B9E
	lda     _at2
	and     #$08
	beq     L3B9F
;
; pvx = 0;
;
L3B9E:	lda     #$00
	sta     _pvx
;
; prx = ((cx1 - 1) << 4) + 8;
;
	lda     _cx1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$08
L3BC7:	sta     _prx
;
; px = prx << FIX_BITS;
;
	ldx     #$00
	lda     _prx
	jsr     aslax4
	sta     _px
	stx     _px+1
;
; if (at1 == 10) player_process_block (cx1, cy1);
;
L3B9F:	lda     _at1
	cmp     #$0A
	bne     L3BA0
	lda     _cx1
	jsr     pusha
	lda     _cy1
	jsr     _player_process_block
;
; if (at2 == 10) player_process_block (cx2, cy2);
;
L3BA0:	lda     _at2
	cmp     #$0A
	bne     L341E
	lda     _cx2
	jsr     pusha
	lda     _cy2
	jsr     _player_process_block
;
; if (game_jet_puri) {
;
L341E:	lda     _game_jet_puri
	beq     L3423
;
; cx1 = cx2 = (prx + 4) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L3429
	inx
L3429:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; cy1 = pry >> 4;
;
	lda     _pry
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cy1
;
; cy2 = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L342F
	inx
L342F:	jsr     shrax4
	sta     _cy2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; evil_tile_hit = (at1 | at2) & 1;
;
	lda     _at2
	ora     _at1
	and     #$01
	sta     _evil_tile_hit
;
; if (evil_tile_hit) {
;
L3423:	lda     _evil_tile_hit
	jeq     L3478
;
; switch (level) {
;
	ldx     #$00
	lda     _level
;
; }
;
	beq     L343A
	cmp     #$01
	beq     L3BA2
	cmp     #$02
	beq     L343A
	cmp     #$03
	beq     L343A
	cmp     #$04
	beq     L3BA1
	jmp     L3438
;
; pvy = -PLAYER_V_REBOUND; 
;
L343A:	dex
	lda     #$C0
;
; break;
;
	jmp     L3BBA
;
; pvy = PLAYER_V_REBOUND;
;
L3BA1:	lda     #$40
;
; break;
;
	jmp     L3BBA
;
; if (ABS(pvx) > ABS(pvy)) {
;
L3BA2:	lda     _pvx
	asl     a
	bcc     L3BA4
	lda     _pvx
	eor     #$FF
	clc
	adc     #$01
L3BA3:	cmp     #$80
	bcc     L3455
	jmp     L3B45
L3BA4:	lda     _pvx
	cmp     #$80
	bcc     L3BA3
L3B45:	dex
L3455:	jsr     pushax
	ldx     _pvy+1
	cpx     #$80
	bcc     L3458
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	jmp     L345B
L3458:	lda     _pvy
	ldx     _pvy+1
L345B:	jsr     tosicmp
	bmi     L3447
	beq     L3447
;
; if (pvx > 0) pvx = -(PLAYER_V_REBOUND>>1); else pvx = (PLAYER_V_REBOUND>>1);
;
	lda     _pvx
	sec
	sbc     #$01
	bvs     L3461
	eor     #$80
L3461:	bpl     L3BA6
	lda     #$E0
	sta     _pvx
	jmp     L3438
L3BA6:	lda     #$20
	sta     _pvx
;
; } else {
;
	jmp     L3438
;
; if (pvy > 0) pvy = -(PLAYER_V_REBOUND>>1); else pvy = (PLAYER_V_REBOUND>>1);
;
L3447:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L346C
	eor     #$80
L346C:	asl     a
	ldx     #$00
	bcc     L3BA7
	dex
	lda     #$E0
	jmp     L3BBA
L3BA7:	lda     #$20
L3BBA:	sta     _pvy
	stx     _pvy+1
;
; px = pcx; py = pcy;
;
L3438:	lda     _pcx
	sta     _px
	lda     _pcx+1
	sta     _px+1
	lda     _pcy
	sta     _py
	lda     _pcy+1
	sta     _py+1
;
; if (!pflickering) player_hit ();
;
	lda     _pflickering
	bne     L3478
	jsr     _player_hit
;
; if (game_jet_puri) {
;
L3478:	lda     _game_jet_puri
	beq     L347B
;
; if (ppossee || pgotten) {
;
	lda     _ppossee
	bne     L347E
	lda     _pgotten
	beq     L347D
;
; if (ABS (pvx) > PLAYER_VX_MIN) {
;
L347E:	lda     _pvx
	asl     a
	ldx     #$00
	bcc     L3BA9
	lda     _pvx
	eor     #$FF
	clc
	adc     #$01
L3BA8:	cmp     #$80
	bcc     L3489
	jmp     L3B46
L3BA9:	lda     _pvx
	cmp     #$80
	bcc     L3BA8
L3B46:	dex
L3489:	cmp     #$09
	txa
	sbc     #$00
	bvs     L348F
	eor     #$80
L348F:	asl     a
	lda     #$00
	jcc     L3B48
;
; psprid = CELL_WALK_BASE + ((prx >> 4) & 3);
;
	lda     _prx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$03
	clc
	adc     #$01
;
; } else psprid = CELL_IDLE;
;
	jmp     L3B48
;
; } else if (pthrust) {
;
L347D:	lda     _pthrust
	beq     L3499
;
; psprid = CELL_ASCENDING;
;
	lda     #$06
;
; } else if (pvy >= PLAYER_VY_MIN) {
;
	jmp     L3B48
L3499:	lda     _pvy
	cmp     #$10
	lda     _pvy+1
	sbc     #$00
	bvs     L34A0
	eor     #$80
L34A0:	bpl     L3BAD
;
; psprid = CELL_DESCENDING;
;
	lda     #$05
;
; } else {
;
	jmp     L3B48
;
; psprid = CELL_AIRBORNE;
;
L3BAD:	lda     #$07
;
; } else {
;
	jmp     L3B48
;
; if (phit) {
;
L347B:	lda     _phit
	beq     L34A7
;
; psprid = CELL_HIT;
;
	lda     #$07
;
; } else if (ppossee || pgotten) {
;
	jmp     L3B48
L34A7:	lda     _ppossee
	bne     L34AD
	lda     _pgotten
	beq     L34AC
;
; if (ABS (pvx) > PLAYER_VX_MIN) {
;
L34AD:	lda     _pvx
	asl     a
	ldx     #$00
	bcc     L3BAF
	lda     _pvx
	eor     #$FF
	clc
	adc     #$01
L3BAE:	cmp     #$80
	bcc     L34B8
	jmp     L3B49
L3BAF:	lda     _pvx
	cmp     #$80
	bcc     L3BAE
L3B49:	dex
L34B8:	cmp     #$09
	txa
	sbc     #$00
	bvs     L34BE
	eor     #$80
L34BE:	asl     a
	lda     #$00
	bcc     L3B48
;
; psprid = CELL_WALK_BASE + ((prx >> 4) & 3);
;
	lda     _prx
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$03
	clc
	adc     #$01
;
; } else psprid = CELL_IDLE;
;
	jmp     L3B48
;
; } else if (pvy < 0) {
;
L34AC:	ldx     _pvy+1
	cpx     #$80
	bcc     L34C8
;
; psprid = CELL_ASCENDING;
;
	lda     #$06
;
; } else if (pvy >= PLAYER_VY_MIN) {
;
	jmp     L3B48
L34C8:	lda     _pvy
	cmp     #$10
	lda     _pvy+1
	sbc     #$00
	bvs     L34CF
	eor     #$80
L34CF:	bpl     L34CD
;
; psprid = CELL_DESCENDING;
;
	lda     #$05
;
; } else if (pvy >= 0) {
;
	jmp     L3B48
L34CD:	ldx     _pvy+1
	bmi     L34D3
;
; psprid = CELL_IDLE;
;
	lda     #$00
L3B48:	sta     _psprid
;
; psprid += pfacing + pcharacter;
;
L34D3:	lda     _pfacing
	clc
	adc     _pcharacter
	clc
	adc     _psprid
	sta     _psprid
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (!pflickering || half_life) {
;
	lda     _pflickering
	beq     L34DB
	lda     _half_life
	beq     L34DA
;
; oam_meta_spr (prx, pry + SPRITE_ADJUST, 4, spr_player [psprid]); 
;
L34DB:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     _SPRITE_ADJUST
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L3BCD
	inx
	clc
L3BCD:	adc     #<(_spr_player)
	sta     ptr1
	txa
	adc     #>(_spr_player)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     _oam_meta_spr
;
; oam_meta_spr (prx, pry + SPRITE_ADJUST, 4, sprplempty);
;
L34DA:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     _SPRITE_ADJUST
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	lda     #<(_sprplempty)
	ldx     #>(_sprplempty)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ simplecoco_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_simplecoco_init: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) {
;
	lda     #$03
	sta     _coco_it
	jmp     L3BCE
;
; coco_flag [coco_it] = 0;
;
L34EC:	ldy     _coco_it
	lda     #$00
	sta     _coco_flag,y
;
; coco_it = COCOS_MAX; while (coco_it --) {
;
L3BCE:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	bne     L34EC
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ simplecoco_straight_new (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_simplecoco_straight_new: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) if (!coco_flag [coco_it]) {
;
	lda     #$03
	sta     _coco_it
	jmp     L3BD9
L34F7:	ldy     _coco_it
	lda     _coco_flag,y
	jne     L3BD9
;
; coco_x [coco_it] = rdx << FIX_BITS;
;
	tax
	lda     _coco_it
	asl     a
	bcc     L3BD3
	inx
	clc
L3BD3:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << FIX_BITS;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BD4
	inx
	clc
L3BD4:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_vx [coco_it] = coco_vx_precalc [rda];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BD5
	inx
	clc
L3BD5:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	lda     #<(_coco_vx_precalc)
	ldx     #>(_coco_vx_precalc)
	clc
	adc     _rda
	bcc     L3509
	inx
L3509:	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	cmp     #$80
	bcc     L3BD7
	dex
L3BD7:	jsr     staxspidx
;
; coco_vy [coco_it] = coco_vy_precalc [rda];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BD6
	inx
	clc
L3BD6:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	lda     #<(_coco_vy_precalc)
	ldx     #>(_coco_vy_precalc)
	clc
	adc     _rda
	bcc     L350F
	inx
L350F:	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	cmp     #$80
	bcc     L3BD8
	dex
L3BD8:	jsr     staxspidx
;
; coco_flag [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_flag,y
;
; break;
;
	rts
;
; coco_it = COCOS_MAX; while (coco_it --) if (!coco_flag [coco_it]) {
;
L3BD9:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	jne     L34F7
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ simplecoco_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_simplecoco_do: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) if (coco_flag [coco_it]) {
;
	lda     #$03
	sta     _coco_it
	jmp     L3BF5
L3518:	ldy     _coco_it
	lda     _coco_flag,y
	jeq     L3BF5
;
; coco_x [coco_it] += coco_vx [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BE5
	inx
	clc
L3BE5:	adc     #<(_coco_x)
	tay
	txa
	adc     #>(_coco_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BE6
	inx
	clc
L3BE6:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; coco_y [coco_it] += coco_vy [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BE7
	inx
	clc
L3BE7:	adc     #<(_coco_y)
	tay
	txa
	adc     #>(_coco_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BE8
	inx
	clc
L3BE8:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; if (coco_x [coco_it] < 0 || coco_x [coco_it] > 256<<FIX_BITS || coco_y [coco_it] < 0 || coco_y [coco_it] > 192<<FIX_BITS) {
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BE9
	inx
	clc
L3BE9:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	bcs     L3BF1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BEA
	inx
	clc
L3BEA:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$10
	bvs     L352C
	eor     #$80
L352C:	bmi     L3BF1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BEB
	inx
	clc
L3BEB:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	bcs     L3BF1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BEC
	inx
	clc
L3BEC:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$0C
	bvs     L352F
	eor     #$80
L352F:	bmi     L3BF1
	ldx     #$00
	jmp     L3BF2
;
; coco_flag [coco_it] = 0; break;
;
L3BF1:	ldy     _coco_it
	lda     #$00
	sta     _coco_flag,y
	rts
;
; rdx = coco_x [coco_it] >> FIX_BITS;
;
L3BF2:	lda     _coco_it
	asl     a
	bcc     L3BED
	ldx     #$01
	clc
L3BED:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	sta     _rdx
;
; rdy = coco_y [coco_it] >> FIX_BITS;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L3BEE
	inx
	clc
L3BEE:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	sta     _rdy
;
; oam_index = oam_spr (rdx, rdy + SPRITE_ADJUST, COCO_PATTERN, 0, oam_index);
;
	jsr     decsp4
	lda     _rdx
	ldy     #$03
	sta     (sp),y
	lda     _rdy
	clc
	adc     _SPRITE_ADJUST
	dey
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (rdx >= prx + 1 && rdx <= prx + 7 && rdy + 7 >= pry && rdy <= pry + 12
;
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$01
	bcc     L3544
	ldx     #$01
L3544:	jsr     tosicmp
	bcc     L3BF5
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$07
	bcc     L3546
	ldx     #$01
L3546:	jsr     tosicmp
	beq     L3BEF
	bcs     L3BF5
L3BEF:	ldx     #$00
	lda     _rdy
	clc
	adc     #$07
	bcc     L3547
	inx
L3547:	cmp     _pry
	txa
	sbc     #$00
	bcc     L3BF5
	lda     _rdy
	jsr     pusha0
	lda     _pry
;
; && !pflickering
;
	clc
	adc     #$0C
	bcc     L3548
	ldx     #$01
L3548:	jsr     tosicmp
	beq     L3BF0
	bcs     L3BF5
;
; ) {
;
L3BF0:	lda     _pflickering
	bne     L3BF5
;
; player_hit ();
;
	jsr     _player_hit
;
; coco_flag [coco_it] = 0; 
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_flag,y
;
; coco_it = COCOS_MAX; while (coco_it --) if (coco_flag [coco_it]) {
;
L3BF5:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	jne     L3518
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ persistent_enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_persistent_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems);
;
	lda     _c_enems
	sta     _gp_gen
	lda     _c_enems+1
	sta     _gp_gen+1
;
; for (ep_it = 0; ep_it < 3 * MAP_W * MAP_H; ep_it ++) {
;
	lda     #$00
	sta     _ep_it
	sta     _ep_it+1
L3553:	lda     _ep_it+1
	cmp     #$00
	bne     L355A
	lda     _ep_it
	cmp     #$5A
L355A:	bcc     L3BFB
;
; }
;
	rts
;
; gp_gen ++;
;
L3BFB:	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L355E
	inx
L355E:	sta     _gp_gen
	stx     _gp_gen+1
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L3561
	inx
L3561:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
;
; ep_y [ep_it] = rda & 0xf0;
;
	lda     #<(_ep_y)
	clc
	adc     _ep_it
	sta     ptr1
	lda     #>(_ep_y)
	adc     _ep_it+1
	sta     ptr1+1
	lda     _rda
	and     #$F0
	sta     (ptr1),y
;
; if (inverted_screen) ep_y [ep_it] = 208 - ep_y [ep_it]; // Upside down
;
	lda     _inverted_screen
	beq     L3565
	lda     #<(_ep_y)
	clc
	adc     _ep_it
	tay
	lda     #>(_ep_y)
	adc     _ep_it+1
	tax
	tya
	jsr     pushax
	lda     #$D0
	jsr     pusha0
	lda     #<(_ep_y)
	sta     ptr1
	lda     #>(_ep_y)
	clc
	adc     _ep_it+1
	sta     ptr1+1
	ldy     _ep_it
	lda     (ptr1),y
	jsr     tossuba0
	ldy     #$00
	jsr     staspidx
;
; ep_x [ep_it] = (rda << 4);
;
L3565:	lda     #<(_ep_x)
	clc
	adc     _ep_it
	sta     ptr1
	lda     #>(_ep_x)
	adc     _ep_it+1
	sta     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L3571
	inx
L3571:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; rdc = rda & 0xf0;
;
	and     #$F0
	sta     _rdc
;
; if (inverted_screen) rdc = 208 - rdc; // Upside down
;
	lda     _inverted_screen
	beq     L3BF8
	lda     #$D0
	sec
	sbc     _rdc
	sta     _rdc
;
; rdb = rda << 4;
;
L3BF8:	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdb
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L357C
	inx
L357C:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; if (rda > 1) rda >>= 1;
;
	cmp     #$02
	bcc     L357D
	lda     _rda
	lsr     a
	sta     _rda
;
; ep_mx [ep_it] = ADD_SIGN2 (rdb, ep_x [ep_it], rda);
;
L357D:	lda     #<(_ep_mx)
	clc
	adc     _ep_it
	tay
	lda     #>(_ep_mx)
	adc     _ep_it+1
	tax
	tya
	jsr     pushax
	lda     _rdb
	jsr     pusha0
	lda     #<(_ep_x)
	sta     ptr1
	lda     #>(_ep_x)
	clc
	adc     _ep_it+1
	sta     ptr1+1
	ldy     _ep_it
	lda     (ptr1),y
	jsr     tosicmp0
	bne     L3588
	lda     #$00
	jmp     L3BF9
L3588:	lda     _rdb
	jsr     pusha0
	lda     #<(_ep_x)
	sta     ptr1
	lda     #>(_ep_x)
	clc
	adc     _ep_it+1
	sta     ptr1+1
	ldy     _ep_it
	lda     (ptr1),y
	jsr     tosicmp0
	bcc     L3592
	beq     L3592
	lda     _rda
	jmp     L3BF9
L3592:	lda     _rda
	eor     #$FF
	clc
	adc     #$01
L3BF9:	cmp     #$80
	ldy     #$00
	jsr     staspidx
;
; ep_my [ep_it] = ADD_SIGN2 (rdc, ep_y [ep_it], rda); 
;
	lda     #<(_ep_my)
	clc
	adc     _ep_it
	tay
	lda     #>(_ep_my)
	adc     _ep_it+1
	tax
	tya
	jsr     pushax
	lda     _rdc
	jsr     pusha0
	lda     #<(_ep_y)
	sta     ptr1
	lda     #>(_ep_y)
	clc
	adc     _ep_it+1
	sta     ptr1+1
	ldy     _ep_it
	lda     (ptr1),y
	jsr     tosicmp0
	bne     L35A1
	lda     #$00
	jmp     L3BFA
L35A1:	lda     _rdc
	jsr     pusha0
	lda     #<(_ep_y)
	sta     ptr1
	lda     #>(_ep_y)
	clc
	adc     _ep_it+1
	sta     ptr1+1
	ldy     _ep_it
	lda     (ptr1),y
	jsr     tosicmp0
	bcc     L35AB
	beq     L35AB
	lda     _rda
	jmp     L3BFA
L35AB:	lda     _rda
	eor     #$FF
	clc
	adc     #$01
L3BFA:	cmp     #$80
	ldy     #$00
	jsr     staspidx
;
; for (ep_it = 0; ep_it < 3 * MAP_W * MAP_H; ep_it ++) {
;
	lda     _ep_it
	ldx     _ep_it+1
	clc
	adc     #$01
	bcc     L355C
	inx
L355C:	sta     _ep_it
	stx     _ep_it+1
	jmp     L3553

.endproc

; ---------------------------------------------------------------
; void __near__ persistent_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_persistent_update: near

.segment	"CODE"

;
; if (on_pant != 99) {
;
	lda     _on_pant
	cmp     #$63
	bne     L3BFE
;
; }
;
	rts
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
L3BFE:	lda     #$00
L3BFD:	sta     _gpit
	cmp     #$03
	bcc     L3BFF
;
; }
;
	rts
;
; ep_x [enoffs] = en_x [gpit];
;
L3BFF:	lda     #<(_ep_x)
	ldx     #>(_ep_x)
	clc
	adc     _enoffs
	bcc     L35C0
	inx
L35C0:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x,y
	ldy     #$00
	sta     (ptr1),y
;
; ep_y [enoffs] = en_y [gpit];
;
	lda     #<(_ep_y)
	ldx     #>(_ep_y)
	clc
	adc     _enoffs
	bcc     L35C6
	inx
L35C6:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y,y
	ldy     #$00
	sta     (ptr1),y
;
; ep_mx [enoffs] = en_mx [gpit];
;
	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _enoffs
	bcc     L35CC
	inx
L35CC:	jsr     pushax
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L35CF
	inx
L35CF:	ldy     #$00
	jsr     ldaidx
	jsr     staspidx
;
; ep_my [enoffs] = en_my [gpit]; 
;
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _enoffs
	bcc     L35D2
	inx
L35D2:	jsr     pushax
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L35D5
	inx
L35D5:	ldy     #$00
	jsr     ldaidx
	jsr     staspidx
;
; enoffs ++;  
;
	lda     _enoffs
	clc
	adc     #$01
	sta     _enoffs
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L3BFD

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; infested = 0; // Type 7s active?
;
	lda     #$00
	sta     _infested
;
; gp_gen = (unsigned char *) (c_enems + (rn_pant << 3) + (rn_pant << 2));
;
	tax
	lda     _rn_pant
	jsr     aslax3
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _rn_pant
	jsr     aslax2
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	sta     _gp_gen+1
;
; rdc = enoffs = rn_pant + rn_pant + rn_pant;
;
	lda     _rn_pant
	clc
	adc     _rn_pant
	bcc     L3C04
	clc
L3C04:	adc     _rn_pant
	sta     _enoffs
	sta     _rdc
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     #$00
L3C09:	sta     _gpit
	cmp     #$03
	bcc     L3C0A
;
; }
;
	rts
;
; rda = *gp_gen ++;
;
L3C0A:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L35EC
	inx
L35EC:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
;
; en_t [gpit] = rda; rdt = en_t [gpit] & 0xf0;
;
	ldy     _gpit
	lda     _rda
	sta     _en_t,y
	ldy     _gpit
	lda     _en_t,y
	and     #$F0
	sta     _rdt
;
; if (game_jet_puri) {
;
	lda     _game_jet_puri
	beq     L35F5
;
; switch (rdt) {
;
	lda     _rdt
;
; }
;
	cmp     #$20
	beq     L3604
	cmp     #$80
	bne     L3C06
;
; en_t [gpit] = (en_t [gpit] & 0x0f) | 0x10;
;
	lda     #<(_en_t)
	ldx     #>(_en_t)
	clc
	adc     _gpit
	bcc     L35FE
	inx
L35FE:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_t,y
	and     #$0F
	ora     #$10
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	jmp     L3C06
;
; en_t [gpit] = 0x12;
;
L3604:	ldy     _gpit
	lda     #$12
	sta     _en_t,y
;
; rdt = 0x10;
;
L3C06:	lda     #$10
	sta     _rdt
;
; rdb = *gp_gen ++;
;
L35F5:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L360D
	inx
L360D:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdb
;
; en_x1 [gpit] = rdb << 4;
;
	lda     #<(_en_x1)
	ldx     #>(_en_x1)
	clc
	adc     _gpit
	bcc     L3610
	inx
L3610:	sta     ptr1
	stx     ptr1+1
	lda     _rdb
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; en_y1 [gpit] = rdb & 0xf0;
;
	lda     #<(_en_y1)
	ldx     #>(_en_y1)
	clc
	adc     _gpit
	bcc     L3614
	inx
L3614:	sta     ptr1
	stx     ptr1+1
	lda     _rdb
	and     #$F0
	sta     (ptr1),y
;
; if (inverted_screen) en_y1 [gpit] = 208 - en_y1 [gpit]; // Upside down
;
	lda     _inverted_screen
	beq     L3616
	lda     #<(_en_y1)
	ldx     #>(_en_y1)
	clc
	adc     _gpit
	bcc     L361A
	inx
L361A:	jsr     pushax
	lda     #$D0
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tossuba0
	ldy     #$00
	jsr     staspidx
;
; rdb = *gp_gen ++;
;
L3616:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L3620
	inx
L3620:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdb
;
; en_x2 [gpit] = rdb << 4;
;
	lda     #<(_en_x2)
	ldx     #>(_en_x2)
	clc
	adc     _gpit
	bcc     L3623
	inx
L3623:	sta     ptr1
	stx     ptr1+1
	lda     _rdb
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; en_y2 [gpit] = rdb & 0xf0;
;
	lda     #<(_en_y2)
	ldx     #>(_en_y2)
	clc
	adc     _gpit
	bcc     L3627
	inx
L3627:	sta     ptr1
	stx     ptr1+1
	lda     _rdb
	and     #$F0
	sta     (ptr1),y
;
; if (inverted_screen) en_y2 [gpit] = 208 - en_y2 [gpit]; // Upside down
;
	lda     _inverted_screen
	beq     L3629
	lda     #<(_en_y2)
	ldx     #>(_en_y2)
	clc
	adc     _gpit
	bcc     L362D
	inx
L362D:	jsr     pushax
	lda     #$D0
	jsr     pusha0
	ldy     _gpit
	lda     _en_y2,y
	jsr     tossuba0
	ldy     #$00
	jsr     staspidx
;
; rdb = *gp_gen ++;
;
L3629:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L3633
	inx
L3633:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdb
;
; en_x [gpit] = ep_x [rdc];
;
	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L3636
	inx
L3636:	sta     ptr1
	stx     ptr1+1
	ldy     _rdc
	lda     _ep_x,y
	ldy     #$00
	sta     (ptr1),y
;
; en_y [gpit] = ep_y [rdc];
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L363C
	inx
L363C:	sta     ptr1
	stx     ptr1+1
	ldy     _rdc
	lda     _ep_y,y
	ldy     #$00
	sta     (ptr1),y
;
; en_state [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_state,y
;
; switch (rdt) {
;
	lda     _rdt
;
; }
;
	cmp     #$10
	beq     L364A
	cmp     #$20
	beq     L364A
	cmp     #$80
	beq     L3665
	jmp     L3646
;
; en_s [gpit] = (en_t [gpit] & 0x0f) << 2;
;
L364A:	lda     #<(_en_s)
	ldx     #>(_en_s)
	clc
	adc     _gpit
	bcc     L364D
	inx
L364D:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_t,y
	and     #$0F
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; en_mx [gpit] = ep_mx [rdc];
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L3654
	inx
L3654:	jsr     pushax
	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _rdc
	bcc     L3657
	inx
L3657:	ldy     #$00
	jsr     ldaidx
	jsr     staspidx
;
; en_my [gpit] = ep_my [rdc];
;
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L365A
	inx
L365A:	jsr     pushax
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _rdc
	bcc     L365D
	inx
L365D:	ldy     #$00
	jsr     ldaidx
	jsr     staspidx
;
; if (rdb == 1) {
;
	lda     _rdb
	cmp     #$01
	jne     L3646
;
; en_state [gpit] = 1;
;
	ldy     _gpit
	sta     _en_state,y
;
; break;
;
	jmp     L3646
;
; rda = ADD_SIGN2 (en_x2 [gpit], en_x1 [gpit], 1);
;
L3665:	ldy     _gpit
	ldx     #$00
	lda     _en_x2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	cpx     ptr1+1
	bne     L366F
	cmp     ptr1
	bne     L366F
	txa
	jmp     L3C07
L366F:	ldy     _gpit
	lda     _en_x2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x1,y
	jsr     tosicmp0
	bcc     L367C
	beq     L367C
	lda     #$01
	jmp     L3C07
L367C:	lda     #$FF
L3C07:	sta     _rda
;
; if (rda) en_my [gpit] = rda + 1; else en_my [gpit] = ADD_SIGN2 (en_y2 [gpit], en_y1 [gpit], 1) + 2;
;
	lda     _rda
	beq     L3683
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L3687
	inx
L3687:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	clc
	adc     #$01
	cmp     #$80
	ldy     #$00
	sta     (ptr1),y
	jmp     L368B
L3683:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L368E
	inx
L368E:	jsr     pushax
	ldy     _gpit
	ldx     #$00
	lda     _en_y2,y
	sta     ptr1
	ldy     _gpit
	lda     _en_y1,y
	cpx     ptr1+1
	bne     L3697
	cmp     ptr1
	bne     L3697
	txa
	jmp     L3C08
L3697:	ldy     _gpit
	lda     _en_y2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tosicmp0
	bcc     L36A4
	beq     L36A4
	lda     #$01
	jmp     L36A7
L36A4:	lda     #$FF
L36A7:	clc
	adc     #$02
L3C08:	cmp     #$80
	ldy     #$00
	jsr     staspidx
;
; en_s [gpit] = STEADY_SHOOTER_CELL + en_my [gpit];
;
L368B:	lda     #<(_en_s)
	ldx     #>(_en_s)
	clc
	adc     _gpit
	bcc     L36AF
	inx
L36AF:	jsr     pushax
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L36B2
	inx
L36B2:	ldy     #$00
	jsr     ldaidx
	clc
	adc     #$20
	jsr     staspidx
;
; en_mx [gpit] = rdb; 
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L36B6
	inx
L36B6:	sta     ptr1
	stx     ptr1+1
	lda     _rdb
	ldy     #$00
	sta     (ptr1),y
;
; en_ct [gpit] = rdb; 
;
	ldy     _gpit
	lda     _rdb
	sta     _en_ct,y
;
; en_washit [gpit] = 0;
;
L3646:	ldy     _gpit
	lda     #$00
	sta     _en_washit,y
;
; en_dying [gpit] = 0;
;
	ldy     _gpit
	sta     _en_dying,y
;
; en_gen_dying [gpit] = 0;
;
	ldy     _gpit
	sta     _en_gen_dying,y
;
; rdc ++;
;
	lda     _rdc
	clc
	adc     #$01
	sta     _rdc
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L3C09

.endproc

; ---------------------------------------------------------------
; void __near__ enems_spr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_spr: near

.segment	"CODE"

;
; spr_x = en_x [gpit];
;
	ldy     _gpit
	lda     _en_x,y
	sta     _spr_x
;
; spr_y = en_y [gpit];
;
	ldy     _gpit
	lda     _en_y,y
	sta     _spr_y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_do: near

.segment	"CODE"

;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pgtmx = 0;
;
	sta     _pgtmx
;
; pgtmy = 0;
;
	sta     _pgtmy
;
; genflipflop = half_life;
;
	lda     _half_life
	sta     _genflipflop
;
; gpit = (frame_counter & 3);
;
	lda     _frame_counter
	and     #$03
	sta     _gpit
;
; gpjt = 3; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
	jmp     L3C76
;
; gpit = gpit + 2; if (gpit > 2) gpit -= 3;
;
L36E2:	lda     _gpit
	clc
	adc     #$02
	sta     _gpit
	cmp     #$03
	bcc     L36E9
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; _en_x = en_x [gpit]; _en_y = en_y [gpit];
;
L36E9:	ldy     _gpit
	lda     _en_x,y
	sta     __en_x
	ldy     _gpit
	lda     _en_y,y
	sta     __en_y
;
; _en_mx = en_mx [gpit]; _en_my = en_my [gpit];
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L36F8
	inx
L36F8:	ldy     #$00
	jsr     ldaidx
	sta     __en_mx
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L3C26
	inx
L3C26:	jsr     ldaidx
	sta     __en_my
;
; _en_ct = en_ct [gpit];
;
	ldy     _gpit
	lda     _en_ct,y
	sta     __en_ct
;
; _en_x1 = en_x1 [gpit]; _en_y1 = en_y1 [gpit];
;
	ldy     _gpit
	lda     _en_x1,y
	sta     __en_x1
	ldy     _gpit
	lda     _en_y1,y
	sta     __en_y1
;
; _en_x2 = en_x2 [gpit]; _en_y2 = en_y2 [gpit];
;
	ldy     _gpit
	lda     _en_x2,y
	sta     __en_x2
	ldy     _gpit
	lda     _en_y2,y
	sta     __en_y2
;
; rdt = en_t [gpit] & 0xf0;
;
	ldy     _gpit
	lda     _en_t,y
	and     #$F0
	sta     _rdt
;
; if (rdt) {
;
	lda     _rdt
	jeq     L3715
;
; is_platform = (rdt == 0x20);
;
	cmp     #$20
	jsr     booleq
	sta     _is_platform
;
; rda = _en_x;
;
	lda     __en_x
	sta     _rda
;
; pregotten = (prx + 9 >= rda && prx <= rda + 17);
;
	lda     _prx
	clc
	adc     #$09
	bcc     L371F
	inx
L371F:	cmp     _rda
	txa
	sbc     #$00
	lda     #$00
	bcc     L3C29
	lda     _prx
	jsr     pusha0
	lda     _rda
	clc
	adc     #$11
	bcc     L3721
	ldx     #$01
L3721:	jsr     tosicmp
	bcc     L371E
	beq     L371E
	lda     #$00
	jmp     L3C29
L371E:	lda     #$01
L3C29:	sta     _pregotten
;
; if (_en_mx != 0) {
;
	lda     __en_mx
	beq     L3723
;
; en_fr = ((_en_x) >> 4) & 1;
;
	lda     __en_x
;
; } else {
;
	jmp     L3C81
;
; en_fr = ((_en_y) >> 4) & 1;
;
L3723:	lda     __en_y
L3C81:	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	sta     _en_fr
;
; switch (rdt) {
;
	lda     _rdt
;
; }
;
	cmp     #$10
	beq     L3735
	cmp     #$20
	beq     L3735
	cmp     #$80
	jeq     L37A4
	jmp     L3731
;
; if (!en_state [gpit] || half_life) {
;
L3735:	ldy     _gpit
	lda     _en_state,y
	beq     L3C2A
	lda     _half_life
	jeq     L3736
;
; rdx = _en_x;
;
L3C2A:	lda     __en_x
	sta     _rdx
;
; _en_x += _en_mx;
;
	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L3C2E
;
; cy1 = _en_y >> 4; 
;
	lda     __en_y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cy1
;
; cy2 = (_en_y + 15) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L3747
	inx
L3747:	jsr     shrax4
	sta     _cy2
;
; if (_en_mx < 0) {
;
	lda     __en_mx
	asl     a
	ldx     #$00
	bcc     L3C2D
;
; cx1 = cx2 = _en_x >> 4;
;
	lda     __en_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
;
; } else {
;
	jmp     L3C78
;
; cx1 = cx2 = (_en_x + 15) >> 4;
;
L3C2D:	lda     __en_x
	clc
	adc     #$0F
	bcc     L3753
	inx
L3753:	jsr     shrax4
L3C78:	sta     _cx2
	sta     _cx1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 + at2) {
;
	ldx     #$00
	lda     _at1
	clc
	adc     _at2
	bcc     L3C0B
	inx
L3C0B:	stx     tmp1
	ora     tmp1
	beq     L3C2E
;
; _en_x = rdx;
;
	lda     _rdx
	sta     __en_x
;
; _en_mx = -_en_mx;
;
	lda     __en_mx
	eor     #$FF
	clc
	adc     #$01
	sta     __en_mx
;
; rdy = _en_y;
;
L3C2E:	lda     __en_y
	sta     _rdy
;
; _en_y += _en_my;
;
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_my) {
;
	lda     __en_my
	beq     L3C32
;
; cx1 = _en_x >> 4;
;
	lda     __en_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _cx1
;
; cx2 = (_en_x + 15) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0F
	bcc     L3768
	inx
L3768:	jsr     shrax4
	sta     _cx2
;
; if (_en_my < 0) {
;
	lda     __en_my
	asl     a
	ldx     #$00
	bcc     L3C31
;
; cy1 = cy2 = _en_y >> 4; 
;
	lda     __en_y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
;
; } else  {
;
	jmp     L3C79
;
; cy1 = cy2 = (_en_y + 15) >> 4;
;
L3C31:	lda     __en_y
	clc
	adc     #$0F
	bcc     L3774
	inx
L3774:	jsr     shrax4
L3C79:	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 + at2) {
;
	ldx     #$00
	lda     _at1
	clc
	adc     _at2
	bcc     L3C0C
	inx
L3C0C:	stx     tmp1
	ora     tmp1
	beq     L3C32
;
; _en_y = rdy;
;
	lda     _rdy
	sta     __en_y
;
; _en_my = -_en_my;
;
	lda     __en_my
	eor     #$FF
	clc
	adc     #$01
	sta     __en_my
;
; if (_en_x == _en_x1 || _en_x == _en_x2) _en_mx = -_en_mx; 
;
L3C32:	lda     __en_x1
	cmp     __en_x
	beq     L3C33
	lda     __en_x2
	cmp     __en_x
	bne     L3C34
L3C33:	lda     __en_mx
	eor     #$FF
	clc
	adc     #$01
	sta     __en_mx
;
; if (_en_y == _en_y1 || _en_y == _en_y2) _en_my = -_en_my;  
;
L3C34:	lda     __en_y1
	cmp     __en_y
	beq     L3C35
	lda     __en_y2
	cmp     __en_y
	bne     L3736
L3C35:	lda     __en_my
	eor     #$FF
	clc
	adc     #$01
	sta     __en_my
;
; spr_id = en_s [gpit] + en_fr + (_en_mx ? ((_en_mx > 0) ? 0 : 2) : ((_en_my > 0) ? 0 : 2));
;
L3736:	ldy     _gpit
	lda     _en_s,y
	clc
	adc     _en_fr
	sta     ptr1
	lda     __en_mx
	beq     L378E
	sec
	sbc     #$01
	bvs     L3793
	eor     #$80
L3793:	bpl     L3C21
	lda     #$00
	jmp     L37A0
L378E:	lda     __en_my
	sec
	sbc     #$01
	bvs     L379D
	eor     #$80
L379D:	bpl     L3C21
	lda     #$00
	jmp     L37A0
L3C21:	lda     #$02
L37A0:	clc
	adc     ptr1
;
; break;
;
	jmp     L3C7E
;
; if (!ticker) {
;
L37A4:	lda     _ticker
	bne     L37A5
;
; if (_en_ct) _en_ct --; else {
;
	lda     __en_ct
	beq     L3C37
	sec
	sbc     #$01
	sta     __en_ct
	jmp     L37A5
;
; _en_ct = _en_mx;  // reset timer
;
L3C37:	lda     __en_mx
	sta     __en_ct
;
; rdx = _en_x + 4;   //
;
	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
;
; rdy = _en_y + 4;   // Coordinates
;
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
;
; rda = _en_my;    // Direction 0 left 1 up 2 right 3 down
;
	lda     __en_my
	sta     _rda
;
; simplecoco_straight_new ();
;
	jsr     _simplecoco_straight_new
;
; sfx_play (SFX_SHOOT, SC_ENEMS);
;
	lda     #$05
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; spr_id = en_s [gpit];
;
L37A5:	ldy     _gpit
	lda     _en_s,y
L3C7E:	sta     _spr_id
;
; enems_spr ();
;
	jsr     _enems_spr
;
; if (is_platform) {
;
L3731:	lda     _is_platform
	jeq     L3C69
;
; if (pregotten && !pgotten && !(pj && pvy <= 0)) {
;
	lda     _pregotten
	jeq     L3C69
	lda     _pgotten
	jne     L3C69
	lda     _pj
	beq     L37C7
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvc     L37C6
	eor     #$80
L37C6:	bmi     L3C38
	lda     #$00
	jmp     L37C7
L3C38:	lda     #$01
L37C7:	jsr     bnega
	jeq     L3C69
;
; if (_en_mx) {
;
	lda     __en_mx
	jeq     L37CB
;
; (inverted_screen && pj == 0 && (pry >= _en_y + 12 && pry <= _en_y + 18)) ||
;
	lda     _inverted_screen
	beq     L3C15
	lda     _pj
	bne     L3C15
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0C
	bcc     L37D0
	ldx     #$01
L37D0:	jsr     tosicmp
	bcc     L3C15
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$12
	bcc     L37D2
	ldx     #$01
L37D2:	jsr     tosicmp
	bcc     L37D7
	beq     L37D7
;
; (!inverted_screen && (pry + 18 >= _en_y && pry + 12 <= _en_y)) 
;
L3C15:	lda     _inverted_screen
	jne     L37CB
	tax
	lda     _pry
	clc
	adc     #$12
	bcc     L37D8
	inx
L37D8:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L37CB
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L37DA
	inx
L37DA:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L37D7
	bne     L37CB
L37D7:	lda     #$01
;
; pgotten = 1;
;
	sta     _pgotten
;
; pgtmx = _en_mx << (FIX_BITS - en_state [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L37E2
	dex
L37E2:	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     _gpit
	lda     _en_state,y
	jsr     tossuba0
	jsr     tosaslax
	cmp     #$80
	sta     _pgtmx
;
; if (inverted_screen) pry = _en_y + 16; else pry = _en_y - 16; 
;
	lda     _inverted_screen
	beq     L37E7
	lda     __en_y
	clc
	adc     #$10
	jmp     L3C22
L37E7:	lda     __en_y
	sec
	sbc     #$10
L3C22:	sta     _pry
;
; py = pry << FIX_BITS;
;
	ldx     #$00
	lda     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; (inverted_screen && pj == 0 && ( 
;
L37CB:	lda     _inverted_screen
	jeq     L3C19
	lda     _pj
	jne     L3C19
;
; (_en_my < 0 && pry >= _en_y + 13 && pry <= _en_y + 17 + _en_my) ||
;
	lda     __en_my
	asl     a
	bcc     L3C4B
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L37FC
	ldx     #$01
L37FC:	jsr     tosicmp
	bcc     L3C4B
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$11
	bcc     L37FD
	ldx     #$01
L37FD:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L37FE
	dex
L37FE:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     tosicmp
	jcc     L3812
	jeq     L3812
;
; (_en_my > 0 && pry >= _en_y + 12 && pry <= _en_y + 17)
;
L3C4B:	lda     __en_my
	sec
	sbc     #$01
	bvs     L3802
	eor     #$80
L3802:	bpl     L3C19
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0C
	bcc     L3804
	ldx     #$01
L3804:	jsr     tosicmp
	bcc     L3C19
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$11
	bcc     L3805
	ldx     #$01
L3805:	jsr     tosicmp
	jcc     L3812
;
; )) ||
;
	jeq     L3812
;
; (!inverted_screen && ( 
;
L3C19:	lda     _inverted_screen
	jne     L3C69
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
	lda     __en_my
	asl     a
	bcc     L3C58
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L380F
	inx
L380F:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L3C58
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L3810
	inx
L3810:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L3812
	beq     L3812
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L3C58:	lda     __en_my
	sec
	sbc     #$01
	bvs     L3814
	eor     #$80
L3814:	jpl     L3C69
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L3816
	inx
L3816:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L3817
	dex
L3817:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L3C69
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L3818
	inx
L3818:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L3812
	bne     L3C69
L3812:	lda     #$01
;
; pgotten = 1;
;
	sta     _pgotten
;
; pgtmy = _en_my << (FIX_BITS - en_state [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L3821
	dex
L3821:	jsr     pushax
	lda     #$04
	jsr     pusha0
	ldy     _gpit
	lda     _en_state,y
	jsr     tossuba0
	jsr     tosaslax
	cmp     #$80
	sta     _pgtmy
;
; if (inverted_screen) pry = _en_y + 16; else pry = _en_y - 16; 
;
	lda     _inverted_screen
	beq     L3826
	lda     __en_y
	clc
	adc     #$10
	jmp     L3C23
L3826:	lda     __en_y
	sec
	sbc     #$10
L3C23:	sta     _pry
;
; py = pry << FIX_BITS;
;
	ldx     #$00
	lda     _pry
	jsr     aslax4
	sta     _py
	stx     _py+1
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; if (spr_id != 0xff) oam_index = oam_meta_spr (
;
L3C69:	lda     _spr_id
	cmp     #$FF
	beq     L3833
;
; spr_x, spr_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     _spr_x
	ldy     #$02
	sta     (sp),y
	lda     _spr_y
	clc
	adc     _SPRITE_ADJUST
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [spr_id + encelloffset]);
;
	ldx     #$00
	lda     _spr_id
	clc
	adc     _encelloffset
	bcc     L3C0F
	inx
L3C0F:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_spr_enems)
	sta     ptr1
	lda     tmp1
	adc     #>(_spr_enems)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; (game_monono || game_monona)
;
L3833:	lda     _game_monono
	bne     L383E
	lda     _game_monona
	jeq     L383C
;
; && pry + 15 >= _en_y
;
L383E:	lda     _pregotten
	jeq     L383C
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L3841
	inx
;
; && pry + 8 <= _en_y
;
L3841:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L383C
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L3842
	inx
;
; && pvy >= 0
;
L3842:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	beq     L3C1D
	bcs     L383C
L3C1D:	ldx     _pvy+1
;
; ) {
;
	bmi     L383C
;
; if (pad0 & PAD_A) {
;
	lda     _pad0
	and     #$01
	beq     L3844
;
; pj = 1; pctj = 0; 
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	ldx     #$FF
	lda     #$F0
;
; } else pvy = -PLAYER_VY_BUTT_REBOUND;
;
	jmp     L3C7B
L3844:	ldx     #$FF
	lda     #$D0
L3C7B:	sta     _pvy
	stx     _pvy+1
;
; fumettos_add ();
;
	jsr     _fumettos_add
;
; sfx_play (SFX_BUTT_HIT, SC_LEVEL);
;
	lda     #$09
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; _en_my = ABS (_en_my);
;
	lda     __en_my
	asl     a
	bcc     L3C6D
	lda     __en_my
	eor     #$FF
	clc
	adc     #$01
L3C6C:	cmp     #$80
	bcc     L3C6F
	jmp     L3C6F
L3C6D:	lda     __en_my
	cmp     #$80
	bcc     L3C6C
L3C6F:	cmp     #$80
	sta     __en_my
;
; } else
;
	jmp     L3715
;
; if (collide (prx, pry, _en_x, _en_y)
;
L383C:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	dey
	sta     (sp),y
	lda     __en_x
	dey
	sta     (sp),y
	lda     __en_y
;
; && !is_platform
;
	jsr     _collide
	tax
	beq     L3715
;
; && !pflickering
;
	lda     _is_platform
	bne     L3715
;
; && rdt != 0x80
;
	lda     _pflickering
	bne     L3715
	lda     _rdt
;
; ) {
;
	cmp     #$80
	beq     L3715
;
; pvx = ADD_SIGN (_en_mx, PLAYER_V_REBOUND);
;
	lda     __en_mx
	beq     L3C74
	sec
	sbc     #$01
	bvs     L3876
	eor     #$80
L3876:	bpl     L3877
	lda     #$40
	jmp     L3C74
L3877:	lda     #$C0
L3C74:	cmp     #$80
	sta     _pvx
;
; player_hit ();
;
	jsr     _player_hit
;
; en_x [gpit] = _en_x; en_y [gpit] = _en_y;
;
L3715:	ldy     _gpit
	lda     __en_x
	sta     _en_x,y
	ldy     _gpit
	lda     __en_y
	sta     _en_y,y
;
; en_mx [gpit] = _en_mx; en_my [gpit] = _en_my;
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L388D
	inx
L388D:	sta     ptr1
	stx     ptr1+1
	lda     __en_mx
	ldy     #$00
	sta     (ptr1),y
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L3892
	inx
L3892:	sta     ptr1
	stx     ptr1+1
	lda     __en_my
	sta     (ptr1),y
;
; en_ct [gpit] = _en_ct;
;
	ldy     _gpit
	lda     __en_ct
	sta     _en_ct,y
;
; gpjt = 3; while (gpjt --) {
;
L3C76:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	jne     L36E2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (level < GAME_LAH) {
;
	lda     _level
	cmp     #$03
	bcs     L3C8B
;
; if (plife != oplife) {
;
	lda     _oplife
	cmp     _plife
	beq     L3C89
;
; p_t2 (7, hudbaseline + 1, plife);
;
	jsr     decsp2
	lda     #$07
	ldy     #$01
	sta     (sp),y
	lda     _hudbaseline
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     _plife
	jsr     _p_t2
;
; oplife = plife;
;
	lda     _plife
	sta     _oplife
;
; if (pobjs != opobjs) {
;
L3C89:	lda     _opobjs
	cmp     _pobjs
	beq     L3C8A
;
; p_t2 (0x1c, hudbaseline, max_hotspots_type_1 - pobjs);
;
	jsr     decsp2
	lda     #$1C
	ldy     #$01
	sta     (sp),y
	lda     _hudbaseline
	dey
	sta     (sp),y
	lda     _max_hotspots_type_1
	sec
	sbc     _pobjs
	jsr     _p_t2
;
; opobjs = pobjs;
;
	lda     _pobjs
	sta     _opobjs
;
; if (pkeys != opkeys) {
;
L3C8A:	lda     _opkeys
	cmp     _pkeys
	beq     L38C6
;
; p_t2 (7, hudbaseline, pkeys);
;
	jsr     decsp2
	lda     #$07
	ldy     #$01
	sta     (sp),y
	lda     _hudbaseline
;
; } else {
;
	jmp     L3C92
;
; if (plife != oplife) {
;
L3C8B:	lda     _oplife
	cmp     _plife
	beq     L3C8C
;
; p_t2 (6, 2, plife);
;
	jsr     decsp2
	lda     #$06
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     _plife
	jsr     _p_t2
;
; oplife = plife;
;
	lda     _plife
	sta     _oplife
;
; if (pobjs != opobjs) {
;
L3C8C:	lda     _opobjs
	cmp     _pobjs
	beq     L3C8D
;
; p_t2 (0x1d, 2, max_hotspots_type_1 - pobjs);
;
	jsr     decsp2
	lda     #$1D
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     _max_hotspots_type_1
	sec
	sbc     _pobjs
	jsr     _p_t2
;
; opobjs = pobjs;
;
	lda     _pobjs
	sta     _opobjs
;
; if (pkeys != opkeys) {
;
L3C8D:	lda     _opkeys
	cmp     _pkeys
	beq     L38C6
;
; p_t2 (0x10, 2, pkeys);
;
	jsr     decsp2
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$02
L3C92:	dey
	sta     (sp),y
	lda     _pkeys
	jsr     _p_t2
;
; opkeys = pkeys;
;
	lda     _pkeys
	sta     _opkeys
;
; }
;
L38C6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hud_draw (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_draw: near

.segment	"CODE"

;
; switch (level) {
;
	lda     _level
;
; }
;
	beq     L38D3
	cmp     #$01
	beq     L38ED
	cmp     #$02
	beq     L38E0
	cmp     #$03
	jeq     L390A
	cmp     #$04
	jeq     L390A
	jmp     L3C94
;
; p_s (0x14, hudbaseline, "BANANAS\\");
;
L38D3:	jsr     decsp2
	lda     #$14
	ldy     #$01
	sta     (sp),y
	lda     _hudbaseline
	dey
	sta     (sp),y
	lda     #<(L38D7)
	ldx     #>(L38D7)
	jsr     _p_s
;
; p_s (1, hudbaseline + 1, "MONOS\\");
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _hudbaseline
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #<(L38DC)
	ldx     #>(L38DC)
;
; break;
;
	jmp     L3C93
;
; p_s (0x14, hudbaseline, "WWFORBS\\");
;
L38E0:	jsr     decsp2
	lda     #$14
	ldy     #$01
	sta     (sp),y
	lda     _hudbaseline
	dey
	sta     (sp),y
	lda     #<(L38E4)
	ldx     #>(L38E4)
	jsr     _p_s
;
; p_s (1, hudbaseline + 1, "LIVES\\");
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _hudbaseline
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #<(L38E9)
	ldx     #>(L38E9)
;
; break;
;
	jmp     L3C93
;
; p_s (0, 24, (unsigned char *) hud1);
;
L38ED:	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     _hud1
	ldx     _hud1+1
	jsr     _p_s
;
; p_s (0, 25, (unsigned char *) hud2);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$19
	dey
	sta     (sp),y
	lda     _hud2
	ldx     _hud2+1
	jsr     _p_s
;
; p_s (0, 26, (unsigned char *) hud2);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$1A
	dey
	sta     (sp),y
	lda     _hud2
	ldx     _hud2+1
	jsr     _p_s
;
; p_s (0, 27, (unsigned char *) hud3);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$1B
	dey
	sta     (sp),y
	lda     _hud3
	ldx     _hud3+1
	jsr     _p_s
;
; p_s (0x14, hudbaseline, "CRYSTAL\\");
;
	jsr     decsp2
	lda     #$14
	ldy     #$01
	sta     (sp),y
	lda     _hudbaseline
	dey
	sta     (sp),y
	lda     #<(L3901)
	ldx     #>(L3901)
	jsr     _p_s
;
; p_s (1, hudbaseline + 1, "STEEM\\");
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _hudbaseline
	clc
	adc     #$01
	dey
	sta     (sp),y
	lda     #<(L3906)
	ldx     #>(L3906)
;
; break;
;
	jmp     L3C93
;
; p_s (1, 2, "LIFE:");
;
L390A:	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     #<(L3910)
	ldx     #>(L3910)
	jsr     _p_s
;
; p_s (0xb, 2, "KEYS:");
;
	jsr     decsp2
	lda     #$0B
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     #<(L3915)
	ldx     #>(L3915)
	jsr     _p_s
;
; p_s (0x15, 2, "OBJECTS:");
;
	jsr     decsp2
	lda     #$15
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	lda     #<(L391A)
	ldx     #>(L391A)
L3C93:	jsr     _p_s
;
; if (level < GAME_LAH) p_s (2, hudbaseline, "KEYS\\");
;
L3C94:	lda     _level
	cmp     #$03
	bcs     L391C
	jsr     decsp2
	lda     #$02
	ldy     #$01
	sta     (sp),y
	lda     _hudbaseline
	dey
	sta     (sp),y
	lda     #<(L3921)
	ldx     #>(L3921)
	jmp     _p_s
;
; }
;
L391C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; gp_gen = scr_attr + 192; gpit = 16; while (gpit --) *gp_gen = 0;
;
	lda     #<(_scr_attr+192)
	sta     _gp_gen
	lda     #>(_scr_attr+192)
	sta     _gp_gen+1
	lda     #$10
	sta     _gpit
	jmp     L3C9C
L3928:	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
L3C9C:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	bne     L3928
;
; c_ts_pals = l_ts_pals [level];
;
	lda     _level
	asl     a
	bcc     L3C99
	inx
	clc
L3C99:	adc     #<(_l_ts_pals)
	sta     ptr1
	txa
	adc     #>(_l_ts_pals)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_ts_pals+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals
;
; c_ts_tmaps = l_ts_tmaps [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L3C9A
	inx
	clc
L3C9A:	adc     #<(_l_ts_tmaps)
	sta     ptr1
	txa
	adc     #>(_l_ts_tmaps)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps
;
; c_behs = l_behs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L3C9B
	inx
	clc
L3C9B:	adc     #<(_l_behs)
	sta     ptr1
	txa
	adc     #>(_l_behs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_behs+1
	dey
	lda     (ptr1),y
	sta     _c_behs
;
; n_pant = l_n_pant [level];
;
	ldy     _level
	lda     _l_n_pant,y
	sta     _n_pant
;
; if (level < GAME_LAH) {
;
	lda     _level
	cmp     #$03
	bcs     L393B
;
; c_map = map_0_tiles;
;
	lda     #<(_map_0_tiles)
	sta     _c_map
	lda     #>(_map_0_tiles)
	sta     _c_map+1
;
; c_decos = 0;
;
	lda     #$00
	sta     _c_decos
	sta     _c_decos+1
;
; c_enems = enems_0;
;
	lda     #<(_enems_0)
	sta     _c_enems
	lda     #>(_enems_0)
	sta     _c_enems+1
;
; c_hotspots = hotspots_0;
;
	lda     #<(_hotspots_0)
	sta     _c_hotspots
	lda     #>(_hotspots_0)
	sta     _c_hotspots+1
;
; c_locks = map_0_locks;
;
	lda     #<(_map_0_locks)
	sta     _c_locks
	lda     #>(_map_0_locks)
	sta     _c_locks+1
;
; max_hotspots_type_1 = MAX_HOTSPOTS_0_TYPE_1;
;
	lda     #$08
;
; } else {
;
	jmp     L3C98
;
; c_map = map_1_tiles;
;
L393B:	lda     #<(_map_1_tiles)
	sta     _c_map
	lda     #>(_map_1_tiles)
	sta     _c_map+1
;
; c_decos = map_1_decos;
;
	lda     #<(_map_1_decos)
	sta     _c_decos
	lda     #>(_map_1_decos)
	sta     _c_decos+1
;
; c_enems = enems_1;
;
	lda     #<(_enems_1)
	sta     _c_enems
	lda     #>(_enems_1)
	sta     _c_enems+1
;
; c_hotspots = hotspots_1;
;
	lda     #<(_hotspots_1)
	sta     _c_hotspots
	lda     #>(_hotspots_1)
	sta     _c_hotspots+1
;
; c_locks = map_1_locks;
;
	lda     #<(_map_1_locks)
	sta     _c_locks
	lda     #>(_map_1_locks)
	sta     _c_locks+1
;
; max_hotspots_type_1 = MAX_HOTSPOTS_1_TYPE_1;
;
	lda     #$0C
L3C98:	sta     _max_hotspots_type_1
;
; persistent_enems_load ();
;
	jsr     _persistent_enems_load
;
; if (!please_continue) {
;
	lda     _please_continue
	bne     L3957
;
; bolts_load ();
;
	jsr     _bolts_load
;
; hotspots_ini ();
;
	jsr     _hotspots_ini
;
; pobjs = 0; 
;
	lda     #$00
	sta     _pobjs
;
; pkeys = 0; 
;
	sta     _pkeys
;
; player_init ();
;
L3957:	jsr     _player_init
;
; plife = 9; 
;
	lda     #$09
	sta     _plife
;
; oplife = 0xff;
;
	lda     #$FF
	sta     _oplife
;
; opobjs = 0xff;
;
	sta     _opobjs
;
; opkeys = 0xff;
;
	sta     _opkeys
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_prepare_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_prepare_screen: near

.segment	"CODE"

;
; if (first_time) first_time = 0; else fade_out ();
;
	lda     _first_time
	beq     L3969
	lda     #$00
	sta     _first_time
	jmp     L396D
L3969:	jsr     _fade_out
;
; ppu_off ();
;
L396D:	jsr     _ppu_off
;
; draw_scr ();
;
	jsr     _draw_scr
;
; bolts_update_screen ();
;
	jsr     _bolts_update_screen
;
; show_attributes (); 
;
	jsr     _show_attributes
;
; simplecoco_init ();
;
	jsr     _simplecoco_init
;
; persistent_update ();
;
	jsr     _persistent_update
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; fumettos_init ();
;
	jsr     _fumettos_init
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; oam_index = 28;
;
	lda     #$1C
	sta     _oam_index
;
; prx = px >> FIX_BITS; pry = py >> FIX_BITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	sta     _pry
;
; player_render ();
;
	jsr     _player_render
;
; enems_do ();
;
	jsr     _enems_do
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; ul = update_list; hud_update (); *ul = NT_UPD_EOF;
;
	lda     #<(_update_list)
	sta     _ul
	lda     #>(_update_list)
	sta     _ul+1
	jsr     _hud_update
	lda     _ul
	sta     ptr1
	lda     _ul+1
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; ppu_wait_frame ();
;
	jsr     _ppu_wait_frame
;
; fade_in ();
;
	jsr     _fade_in
;
; generators_active = 0;
;
	lda     #$00
	sta     _generators_active
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; half_life = 0;
;
	lda     #$00
	sta     _half_life
;
; first_time = 1;
;
	lda     #$01
	sta     _first_time
;
; on_pant = 99;
;
	lda     #$63
	sta     _on_pant
;
; game_res = GS_GAME_OVER;
;
	lda     #$00
	sta     _game_res
;
; reset_attributes ();
;
	jsr     _reset_attributes
;
; if (level < GAME_LAH) scroll (0, 472);
;
	ldx     #$00
	lda     _level
	cmp     #$03
	bcs     L3CA2
	jsr     push0
	ldx     #$01
	lda     #$D8
	jsr     _scroll
;
; pal_bg (mypal_game_bg [level]);
;
	ldx     #$00
L3CA2:	lda     _level
	asl     a
	bcc     L3CA1
	inx
	clc
L3CA1:	adc     #<(_mypal_game_bg)
	sta     ptr1
	txa
	adc     #>(_mypal_game_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; music_play (music_track_ingame [level]);
;
	ldy     _level
	lda     _music_track_ingame,y
	jsr     _music_play
;
; pflickering = PLAYER_FLICKERS;
;
	lda     #$78
	sta     _pflickering
;
; set_vram_update (update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; do_game = 1; ticker = ticks;
;
	lda     #$01
	sta     _do_game
	ldx     #$00
	lda     _ticks
	sta     _ticker
;
; while (do_game) {  
;
	jmp     L39AD
;
; half_life = 1 - half_life;  // Main flip-flop
;
L3CA3:	lda     #$01
	sec
	sbc     _half_life
	sta     _half_life
	txa
	sbc     #$00
;
; frame_counter ++;    // Increase frame counter
;
	lda     _frame_counter
	clc
	adc     #$01
	sta     _frame_counter
;
; if (ticker) ticker --; else ticker = ticks;
;
	lda     _ticker
	beq     L3CA4
	sec
	sbc     #$01
	jmp     L3CB6
L3CA4:	lda     _ticks
L3CB6:	sta     _ticker
;
; ul = update_list;    // Reset pointer to update list
;
	lda     #<(_update_list)
	sta     _ul
	lda     #>(_update_list)
	sta     _ul+1
;
; oam_index = 28;     // Reset OAM index; skip sprite #0 & player
;
	lda     #$1C
	sta     _oam_index
;
; pad0 = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; hotspots_do ();
;
	jsr     _hotspots_do
;
; enems_do ();
;
	jsr     _enems_do
;
; simplecoco_do ();
;
	jsr     _simplecoco_do
;
; player_move ();
;
	jsr     _player_move
;
; fumettos_do ();
;
	jsr     _fumettos_do
;
; player_render ();
;
	jsr     _player_render
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; hud_update ();
;
	jsr     _hud_update
;
; *ul = NT_UPD_EOF;
;
	lda     _ul
	sta     ptr1
	lda     _ul+1
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; ppu_wait_frame ();
;
	jsr     _ppu_wait_frame
;
; if (prx == 4 && pvx < 0) {
;
	lda     _prx
	cmp     #$04
	bne     L3CA7
	lda     _pvx
	asl     a
	bcc     L3CA7
;
; n_pant --;
;
	lda     _n_pant
	sec
	sbc     #$01
	sta     _n_pant
;
; px = 244 << FIX_BITS;
;
	ldx     #$0F
	lda     #$40
	sta     _px
	stx     _px+1
;
; } else if (prx == 244 && pvx > 0) {
;
	jmp     L3CB2
L3CA7:	lda     _prx
	cmp     #$F4
	bne     L3CAA
	lda     _pvx
	sec
	sbc     #$01
	bvs     L39D8
	eor     #$80
L39D8:	bpl     L3CAA
;
; n_pant ++;
;
	lda     _n_pant
	clc
	adc     #$01
	sta     _n_pant
;
; px = 4;
;
	ldx     #$00
	lda     #$04
	sta     _px
	stx     _px+1
;
; } else if (pry == 0 && pvy < 0 && n_pant >= MAP_W) {
;
	jmp     L3CB2
L3CAA:	lda     _pry
	bne     L3CAE
	ldx     _pvy+1
	cpx     #$80
	bcc     L3CAE
	lda     _n_pant
	cmp     #$03
	bcc     L3CAE
;
; n_pant -= map_w;
;
	lda     _map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIX_BITS;
;
	ldx     #$0C
;
; } else if (pry >= 192 && pvy > 0) {
;
	jmp     L3CB8
L3CAE:	lda     _pry
	cmp     #$C0
	bcc     L3CB2
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L39EA
	eor     #$80
L39EA:	bpl     L3CB2
;
; n_pant += map_w;
;
	lda     _map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	ldx     #$00
L3CB8:	lda     #$00
	sta     _py
	stx     _py+1
;
; if (on_pant != n_pant && do_game) {
;
L3CB2:	lda     _n_pant
	cmp     _on_pant
	beq     L39F0
	lda     _do_game
	beq     L39F0
;
; game_prepare_screen ();
;
	jsr     _game_prepare_screen
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if (pkilled || 
;
L39F0:	lda     _pkilled
	bne     L3CB5
;
; pobjs == max_hotspots_type_1 ||
;
	lda     _max_hotspots_type_1
	cmp     _pobjs
	beq     L3CB5
;
; ((pad0 & (PAD_SELECT | PAD_B | PAD_UP)) == (PAD_SELECT | PAD_B | PAD_UP))
;
	lda     _pad0
	and     #$16
	cmp     #$16
;
; ) do_game = 0;
;
	beq     L3CB5
	ldx     #$00
	jmp     L39AD
L3CB5:	ldx     #$00
	stx     _do_game
;
; while (do_game) {  
;
L39AD:	lda     _do_game
	jne     L3CA3
;
; music_stop ();
;
	jsr     _music_stop
;
; set_vram_update (0);
;
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; fade_out ();
;
	jsr     _fade_out
;
; oam_hide_rest (4);
;
	lda     #$04
	jsr     _oam_hide_rest
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ game_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_title: near

.segment	"CODE"

;
; if (game_monona) {
;
	lda     _game_monona
	beq     L3A09
;
; m113_safe_change_chr_bank (CHR_BANK_ENDING); bank_bg (1);
;
	lda     #$08
	jsr     _m113_safe_change_chr_bank
	lda     #$01
	jsr     _bank_bg
;
; enter_screen (mypal_game_bg_title [level], screen_title);
;
L3A09:	ldx     #$00
	lda     _level
	asl     a
	bcc     L3CBA
	inx
	clc
L3CBA:	adc     #<(_mypal_game_bg_title)
	sta     ptr1
	txa
	adc     #>(_mypal_game_bg_title)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #<(_screen_title)
	ldx     #>(_screen_title)
	jsr     _enter_screen
;
; gpit = 0; while (!gpit) {
;
	lda     #$00
	sta     _gpit
	jmp     L3A17
;
; if (pad_poll (0) & PAD_START) {
;
L3CBB:	jsr     _pad_poll
	and     #$08
	beq     L3A19
;
; gpit = 1; please_continue = 0;
;
	lda     #$01
	sta     _gpit
	lda     #$00
	sta     _please_continue
;
; if (already_played && (pad_poll (0) & PAD_SELECT) && level < GAME_LAH) {
;
L3A19:	lda     _already_played
	beq     L3A20
	lda     #$00
	jsr     _pad_poll
	and     #$04
	beq     L3A20
	lda     _level
	cmp     #$03
	bcs     L3A20
;
; gpit = please_continue = 1;
;
	lda     #$01
	sta     _please_continue
	sta     _gpit
;
; ppu_wait_frame ();
;
L3A20:	jsr     _ppu_wait_frame
;
; gpit = 0; while (!gpit) {
;
L3A17:	lda     _gpit
	beq     L3CBB
;
; while (pad_poll (0));
;
L3A2C:	lda     #$00
	jsr     _pad_poll
	tax
	bne     L3A2C
;
; music_stop ();
;
	jsr     _music_stop
;
; sfx_play (SFX_START, SC_LEVEL);
;
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; delay (ticks);
;
	lda     _ticks
	jsr     _delay
;
; exit_cleanly ();
;
	jsr     _exit_cleanly
;
; if (game_monona) m113_safe_change_chr_bank (CHR_BANK_MAIN);
;
	lda     _game_monona
	beq     L3CBF
	lda     #$01
	jsr     _m113_safe_change_chr_bank
;
; bank_bg (0);
;
	lda     #$00
L3CBF:	jmp     _bank_bg

.endproc

; ---------------------------------------------------------------
; void __near__ game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_over: near

.segment	"CODE"

;
; enter_screen (mypal_game_bg [level], screen_game_over);
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L3CC1
	inx
	clc
L3CC1:	adc     #<(_mypal_game_bg)
	sta     ptr1
	txa
	adc     #>(_mypal_game_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #<(_screen_game_over)
	ldx     #>(_screen_game_over)
	jsr     _enter_screen
;
; do_screen (10);
;
	lda     #$0A
	jmp     _do_screen

.endproc

; ---------------------------------------------------------------
; void __near__ game_ending (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_ending: near

.segment	"CODE"

;
; if (game_jet_puri || game_monona) m113_safe_change_chr_bank (CHR_BANK_ENDING);
;
	lda     _game_jet_puri
	bne     L3A45
	lda     _game_monona
	beq     L3A44
L3A45:	lda     #$08
	jsr     _m113_safe_change_chr_bank
;
; if (game_pppp) pal_spr (mypal_game_fg5);
;
L3A44:	lda     _game_pppp
	beq     L3A49
	lda     #<(_mypal_game_fg5)
	ldx     #>(_mypal_game_fg5)
	jsr     _pal_spr
;
; enter_screen (mypal_game_bg_ending [level], screen_game_ending);
;
L3A49:	ldx     #$00
	lda     _level
	asl     a
	bcc     L3CC3
	inx
	clc
L3CC3:	adc     #<(_mypal_game_bg_ending)
	sta     ptr1
	txa
	adc     #>(_mypal_game_bg_ending)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #<(_screen_game_ending)
	ldx     #>(_screen_game_ending)
	jsr     _enter_screen
;
; do_screen (60);
;
	lda     #$3C
	jsr     _do_screen
;
; if (game_jet_puri || game_monona) m113_safe_change_chr_bank (CHR_BANK_MAIN);
;
	lda     _game_jet_puri
	bne     L3A54
	lda     _game_monona
	beq     L3A53
L3A54:	lda     #$01
	jsr     _m113_safe_change_chr_bank
;
; if (game_pppp) pal_spr (mypal_game_fg4);
;
L3A53:	lda     _game_pppp
	beq     L3A58
	lda     #<(_mypal_game_fg4)
	ldx     #>(_mypal_game_fg4)
	jmp     _pal_spr
;
; }
;
L3A58:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; m113_handle_reset ();  // If bad checksum, this jumps to PRG 0 / CHR 0 (main menu)
;
	jsr     _m113_handle_reset
;
; level = COMM_GAME_SELECT;
;
	ldx     #$03
	lda     #$00
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _level
;
; game_jet_puri = (level == GAME_JET_PURI);
;
	cmp     #$01
	jsr     booleq
	sta     _game_jet_puri
;
; game_monono = (level == GAME_MONONO);
;
	lda     _level
	jsr     booleq
	sta     _game_monono
;
; game_monona = (level == GAME_MONONA);
;
	lda     _level
	cmp     #$02
	jsr     booleq
	sta     _game_monona
;
; game_pppp = (level == GAME_PPPP);
;
	lda     _level
	cmp     #$04
	jsr     booleq
	sta     _game_pppp
;
; inverted_screen = 0;
;
	stx     _inverted_screen
;
; TOP_ADJUST = l_TOP_ADJUST [level];
;
	ldy     _level
	lda     _l_TOP_ADJUST,y
	sta     _TOP_ADJUST
;
; SPRITE_ADJUST = l_SPRITE_ADJUST [level];
;
	ldy     _level
	lda     _l_SPRITE_ADJUST,y
	sta     _SPRITE_ADJUST
;
; PLAYER_G = l_PLAYER_G [level];
;
	ldy     _level
	lda     _l_PLAYER_G,y
	sta     _PLAYER_G
;
; pcharacter = l_pcharacter [level];
;
	ldy     _level
	lda     _l_pcharacter,y
	sta     _pcharacter
;
; encelloffset = l_encelloffset [level];
;
	ldy     _level
	lda     _l_encelloffset,y
	sta     _encelloffset
;
; itcelloffset = level << 2; //l_itcelloffset [level];
;
	lda     _level
	asl     a
	asl     a
	sta     _itcelloffset
;
; pal_spr (l_pal_spr [level]);
;
	lda     _level
	asl     a
	bcc     L3CC5
	inx
	clc
L3CC5:	adc     #<(_l_pal_spr)
	sta     ptr1
	txa
	adc     #>(_l_pal_spr)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_spr
;
; hudbaseline = l_hudbaseline [level];
;
	ldy     _level
	lda     _l_hudbaseline,y
	sta     _hudbaseline
;
; PLAYER_AX = l_PLAYER_AX [level];
;
	ldy     _level
	lda     _l_PLAYER_AX,y
	sta     _PLAYER_AX
;
; inverted_screen = (game_pppp);
;
	lda     _game_pppp
	sta     _inverted_screen
;
; n_bolts = 5;
;
	lda     #$05
	sta     _n_bolts
;
; map_w = (level < GAME_LAH) ? 3 : 6;
;
	lda     _level
	cmp     #$03
	bcs     L3CC6
	lda     #$03
	jmp     L3CC7
L3CC6:	lda     #$06
L3CC7:	sta     _map_w
;
; please_continue = 0;
;
	lda     #$00
	sta     _please_continue
;
; already_played = 0;
;
	sta     _already_played
;
; ticks = ppu_system () ? 60 : 50;
;
	jsr     _ppu_system
	stx     tmp1
	ora     tmp1
	beq     L3AA4
	lda     #$3C
	jmp     L3CC8
L3AA4:	lda     #$32
L3CC8:	sta     _ticks
;
; halfticks = ticks >> 1;
;
	lsr     a
	sta     _halfticks
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; oam_size (0);
;
	lda     #$00
	jsr     _oam_size
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; game_title ();
;
L3AB2:	jsr     _game_title
;
; cls ();
;
	jsr     _cls
;
; hud_draw ();
;
	jsr     _hud_draw
;
; game_init ();
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; already_played = 1;
;
	lda     #$01
	sta     _already_played
;
; if (pkilled) game_over (); else game_ending ();
;
	lda     _pkilled
	beq     L3ABD
	jsr     _game_over
	jmp     L3AB2
L3ABD:	jsr     _game_ending
;
; while (1) {
;
	jmp     L3AB2

.endproc

